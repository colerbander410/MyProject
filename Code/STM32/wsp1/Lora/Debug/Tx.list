
Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b50  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08005c60  08005c60  00006c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006024  08006024  000081e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006024  08006024  00007024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800602c  0800602c  000081e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800602c  0800602c  0000702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006030  08006030  00007030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08006034  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  200001e8  0800621c  000081e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  0800621c  000083e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b718  00000000  00000000  00008211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c33  00000000  00000000  00013929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00015560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000985  00000000  00000000  00016198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001879c  00000000  00000000  00016b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d823  00000000  00000000  0002f2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c238  00000000  00000000  0003cadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8d14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044bc  00000000  00000000  000c8d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000cd214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c48 	.word	0x08005c48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08005c48 	.word	0x08005c48

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_f2uiz>:
 8000e0c:	0042      	lsls	r2, r0, #1
 8000e0e:	d20e      	bcs.n	8000e2e <__aeabi_f2uiz+0x22>
 8000e10:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e14:	d30b      	bcc.n	8000e2e <__aeabi_f2uiz+0x22>
 8000e16:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e1e:	d409      	bmi.n	8000e34 <__aeabi_f2uiz+0x28>
 8000e20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e28:	fa23 f002 	lsr.w	r0, r3, r2
 8000e2c:	4770      	bx	lr
 8000e2e:	f04f 0000 	mov.w	r0, #0
 8000e32:	4770      	bx	lr
 8000e34:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e38:	d101      	bne.n	8000e3e <__aeabi_f2uiz+0x32>
 8000e3a:	0242      	lsls	r2, r0, #9
 8000e3c:	d102      	bne.n	8000e44 <__aeabi_f2uiz+0x38>
 8000e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e42:	4770      	bx	lr
 8000e44:	f04f 0000 	mov.w	r0, #0
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <goToOutput>:
#define lineDown()      HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()        HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()       (HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)        HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]

    // By default, the line is at high level
    lineUp();
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6818      	ldr	r0, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	889b      	ldrh	r3, [r3, #4]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f000 ffcc 	bl	8001e0a <HAL_GPIO_WritePin>

    // Configure the port as output
    GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	889b      	ldrh	r3, [r3, #4]
 8000e76:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;   // Open drain
 8000e78:	2311      	movs	r3, #17
 8000e7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = sensor->pullUp;        // Pull-up to power
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	79db      	ldrb	r3, [r3, #7]
 8000e80:	613b      	str	r3, [r7, #16]

    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; // High-speed port operation
 8000e82:	2303      	movs	r3, #3
 8000e84:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f107 0208 	add.w	r2, r7, #8
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fe1f 	bl	8001ad4 <HAL_GPIO_Init>
}
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]

    // Configure the port as input
    GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	889b      	ldrh	r3, [r3, #4]
 8000eb8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = sensor->pullUp;        // Pull-up to power
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	79db      	ldrb	r3, [r3, #7]
 8000ec2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f107 0208 	add.w	r2, r7, #8
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fe00 	bl	8001ad4 <HAL_GPIO_Init>
}
 8000ed4:	bf00      	nop
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	@ 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
    DHT_data data = {-128.0f, -128.0f};
 8000ee6:	4a75      	ldr	r2, [pc, #468]	@ (80010bc <DHT_getData+0x1e0>)
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ef0:	e883 0003 	stmia.w	r3, {r0, r1}

    #if DHT_POLLING_CONTROL == 1
    /* Limiting the sensor polling frequency */
    // Determine polling interval depending on sensor type
    uint16_t pollingInterval;
    if (sensor->type == DHT11) {
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	799b      	ldrb	r3, [r3, #6]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d103      	bne.n	8000f04 <DHT_getData+0x28>
        pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8000efc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f00:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000f02:	e002      	b.n	8000f0a <DHT_getData+0x2e>
    } else {
        pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 8000f04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f08:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    // If interval is too short, return the last successful value
    if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 8000f0a:	f000 fcd1 	bl	80018b0 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	1ad2      	subs	r2, r2, r3
 8000f16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d212      	bcs.n	8000f42 <DHT_getData+0x66>
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00e      	beq.n	8000f42 <DHT_getData+0x66>
        data.hum = sensor->lastHum;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	617b      	str	r3, [r7, #20]
        data.temp = sensor->lastTemp;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	61bb      	str	r3, [r7, #24]
        return data;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	461a      	mov	r2, r3
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f3c:	e882 0003 	stmia.w	r2, {r0, r1}
 8000f40:	e162      	b.n	8001208 <DHT_getData+0x32c>
    }
    sensor->lastPollingTime = HAL_GetTick()+1;
 8000f42:	f000 fcb5 	bl	80018b0 <HAL_GetTick>
 8000f46:	4603      	mov	r3, r0
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	609a      	str	r2, [r3, #8]
    #endif

    /* Request data from the sensor */
    // Switch pin to "output"
    goToOutput(sensor);
 8000f4e:	6838      	ldr	r0, [r7, #0]
 8000f50:	f7ff ff7c 	bl	8000e4c <goToOutput>
    // Pull the data line low for 18 ms
    lineDown();
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	6818      	ldr	r0, [r3, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	889b      	ldrh	r3, [r3, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f000 ff53 	bl	8001e0a <HAL_GPIO_WritePin>
    Delay(18);
 8000f64:	2012      	movs	r0, #18
 8000f66:	f000 fcad 	bl	80018c4 <HAL_Delay>
    // Pull the line high, then switch port to "input"
    lineUp();
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	889b      	ldrh	r3, [r3, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	4619      	mov	r1, r3
 8000f76:	f000 ff48 	bl	8001e0a <HAL_GPIO_WritePin>
    goToInput(sensor);
 8000f7a:	6838      	ldr	r0, [r7, #0]
 8000f7c:	f7ff ff8f 	bl	8000e9e <goToInput>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
    // Disable interrupts so nothing interferes with data handling
    __disable_irq();
    #endif

    /* Wait for sensor response */
    uint16_t timeout = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	84bb      	strh	r3, [r7, #36]	@ 0x24
    // Wait for falling edge
    while(getLine()) {
 8000f88:	e01a      	b.n	8000fc0 <DHT_getData+0xe4>
        timeout++;
 8000f8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (timeout > DHT_TIMEOUT) {
 8000f90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f92:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d912      	bls.n	8000fc0 <DHT_getData+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f9a:	b662      	cpsie	i
}
 8000f9c:	bf00      	nop
            #ifdef DHT_IRQ_CONTROL
            __enable_irq();
            #endif
            // If sensor did not respond, it definitely does not exist
            // Reset the last successful value to avoid phantom data
            sensor->lastHum = -128.0f;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8000fa4:	611a      	str	r2, [r3, #16]
            sensor->lastTemp = -128.0f;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8000fac:	60da      	str	r2, [r3, #12]

            return data;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fba:	e882 0003 	stmia.w	r2, {r0, r1}
 8000fbe:	e123      	b.n	8001208 <DHT_getData+0x32c>
    while(getLine()) {
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	889b      	ldrh	r3, [r3, #4]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4610      	mov	r0, r2
 8000fcc:	f000 ff06 	bl	8001ddc <HAL_GPIO_ReadPin>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d0d9      	beq.n	8000f8a <DHT_getData+0xae>
        }
    }
    timeout = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	84bb      	strh	r3, [r7, #36]	@ 0x24
    // Wait for rising edge
    while(!getLine()) {
 8000fda:	e01a      	b.n	8001012 <DHT_getData+0x136>
        timeout++;
 8000fdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000fde:	3301      	adds	r3, #1
 8000fe0:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (timeout > DHT_TIMEOUT) {
 8000fe2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000fe4:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d912      	bls.n	8001012 <DHT_getData+0x136>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fec:	b662      	cpsie	i
}
 8000fee:	bf00      	nop
            #ifdef DHT_IRQ_CONTROL
            __enable_irq();
            #endif
            // If sensor did not respond, it definitely does not exist
            // Reset the last successful value to avoid phantom data
            sensor->lastHum = -128.0f;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8000ff6:	611a      	str	r2, [r3, #16]
            sensor->lastTemp = -128.0f;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8000ffe:	60da      	str	r2, [r3, #12]

            return data;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	461a      	mov	r2, r3
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	e893 0003 	ldmia.w	r3, {r0, r1}
 800100c:	e882 0003 	stmia.w	r2, {r0, r1}
 8001010:	e0fa      	b.n	8001208 <DHT_getData+0x32c>
    while(!getLine()) {
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	889b      	ldrh	r3, [r3, #4]
 800101a:	4619      	mov	r1, r3
 800101c:	4610      	mov	r0, r2
 800101e:	f000 fedd 	bl	8001ddc <HAL_GPIO_ReadPin>
 8001022:	4603      	mov	r3, r0
 8001024:	2b01      	cmp	r3, #1
 8001026:	d1d9      	bne.n	8000fdc <DHT_getData+0x100>
        }
    }
    timeout = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	84bb      	strh	r3, [r7, #36]	@ 0x24
    // Wait for falling edge
    while(getLine()) {
 800102c:	e012      	b.n	8001054 <DHT_getData+0x178>
        timeout++;
 800102e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001030:	3301      	adds	r3, #1
 8001032:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (timeout > DHT_TIMEOUT) {
 8001034:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001036:	f242 7210 	movw	r2, #10000	@ 0x2710
 800103a:	4293      	cmp	r3, r2
 800103c:	d90a      	bls.n	8001054 <DHT_getData+0x178>
  __ASM volatile ("cpsie i" : : : "memory");
 800103e:	b662      	cpsie	i
}
 8001040:	bf00      	nop
            #ifdef DHT_IRQ_CONTROL
            __enable_irq();
            #endif
            return data;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	461a      	mov	r2, r3
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800104e:	e882 0003 	stmia.w	r2, {r0, r1}
 8001052:	e0d9      	b.n	8001208 <DHT_getData+0x32c>
    while(getLine()) {
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	889b      	ldrh	r3, [r3, #4]
 800105c:	4619      	mov	r1, r3
 800105e:	4610      	mov	r0, r2
 8001060:	f000 febc 	bl	8001ddc <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b01      	cmp	r3, #1
 8001068:	d0e1      	beq.n	800102e <DHT_getData+0x152>
        }
    }

    /* Read sensor response */
    uint8_t rawData[5] = {0,0,0,0,0};
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	711a      	strb	r2, [r3, #4]
    for(uint8_t a = 0; a < 5; a++) {
 8001074:	2300      	movs	r3, #0
 8001076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800107a:	e05c      	b.n	8001136 <DHT_getData+0x25a>
        for(uint8_t b = 7; b != 255; b--) {
 800107c:	2307      	movs	r3, #7
 800107e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001082:	e04f      	b.n	8001124 <DHT_getData+0x248>
            uint16_t hT = 0, lT = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	843b      	strh	r3, [r7, #32]
 8001088:	2300      	movs	r3, #0
 800108a:	83fb      	strh	r3, [r7, #30]
            // While the line is low, increment lT
            while(!getLine() && lT != 65535) lT++;
 800108c:	e002      	b.n	8001094 <DHT_getData+0x1b8>
 800108e:	8bfb      	ldrh	r3, [r7, #30]
 8001090:	3301      	adds	r3, #1
 8001092:	83fb      	strh	r3, [r7, #30]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	889b      	ldrh	r3, [r3, #4]
 800109c:	4619      	mov	r1, r3
 800109e:	4610      	mov	r0, r2
 80010a0:	f000 fe9c 	bl	8001ddc <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d004      	beq.n	80010b4 <DHT_getData+0x1d8>
 80010aa:	8bfb      	ldrh	r3, [r7, #30]
 80010ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d1ec      	bne.n	800108e <DHT_getData+0x1b2>
            // While the line is high, increment hT
            timeout = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            while(getLine() && hT != 65535) hT++;
 80010b8:	e005      	b.n	80010c6 <DHT_getData+0x1ea>
 80010ba:	bf00      	nop
 80010bc:	08005c60 	.word	0x08005c60
 80010c0:	8c3b      	ldrh	r3, [r7, #32]
 80010c2:	3301      	adds	r3, #1
 80010c4:	843b      	strh	r3, [r7, #32]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	889b      	ldrh	r3, [r3, #4]
 80010ce:	4619      	mov	r1, r3
 80010d0:	4610      	mov	r0, r2
 80010d2:	f000 fe83 	bl	8001ddc <HAL_GPIO_ReadPin>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d104      	bne.n	80010e6 <DHT_getData+0x20a>
 80010dc:	8c3b      	ldrh	r3, [r7, #32]
 80010de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d1ec      	bne.n	80010c0 <DHT_getData+0x1e4>
            // If hT is greater than lT, then a "1" has been received
            if(hT > lT) rawData[a] |= (1<<b);
 80010e6:	8c3a      	ldrh	r2, [r7, #32]
 80010e8:	8bfb      	ldrh	r3, [r7, #30]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d915      	bls.n	800111a <DHT_getData+0x23e>
 80010ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010f2:	3328      	adds	r3, #40	@ 0x28
 80010f4:	443b      	add	r3, r7
 80010f6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80010fa:	b25a      	sxtb	r2, r3
 80010fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001100:	2101      	movs	r1, #1
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	b25b      	sxtb	r3, r3
 8001108:	4313      	orrs	r3, r2
 800110a:	b25a      	sxtb	r2, r3
 800110c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	3328      	adds	r3, #40	@ 0x28
 8001114:	443b      	add	r3, r7
 8001116:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for(uint8_t b = 7; b != 255; b--) {
 800111a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800111e:	3b01      	subs	r3, #1
 8001120:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001124:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001128:	2bff      	cmp	r3, #255	@ 0xff
 800112a:	d1ab      	bne.n	8001084 <DHT_getData+0x1a8>
    for(uint8_t a = 0; a < 5; a++) {
 800112c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001130:	3301      	adds	r3, #1
 8001132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001136:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800113a:	2b04      	cmp	r3, #4
 800113c:	d99e      	bls.n	800107c <DHT_getData+0x1a0>
  __ASM volatile ("cpsie i" : : : "memory");
 800113e:	b662      	cpsie	i
}
 8001140:	bf00      	nop
    // Re-enable interrupts after data reception
    __enable_irq();
    #endif

    /* Verify data integrity */
    if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 8001142:	7b3a      	ldrb	r2, [r7, #12]
 8001144:	7b7b      	ldrb	r3, [r7, #13]
 8001146:	4413      	add	r3, r2
 8001148:	b2da      	uxtb	r2, r3
 800114a:	7bbb      	ldrb	r3, [r7, #14]
 800114c:	4413      	add	r3, r2
 800114e:	b2da      	uxtb	r2, r3
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	4413      	add	r3, r2
 8001154:	b2da      	uxtb	r2, r3
 8001156:	7c3b      	ldrb	r3, [r7, #16]
 8001158:	429a      	cmp	r2, r3
 800115a:	d147      	bne.n	80011ec <DHT_getData+0x310>
        // If checksum matches, convert and return received values
        if (sensor->type == DHT22) {
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	799b      	ldrb	r3, [r3, #6]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d133      	bne.n	80011cc <DHT_getData+0x2f0>
            data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8001164:	7b3b      	ldrb	r3, [r7, #12]
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	7b7a      	ldrb	r2, [r7, #13]
 800116a:	4313      	orrs	r3, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fdf9 	bl	8000d64 <__aeabi_i2f>
 8001172:	4603      	mov	r3, r0
 8001174:	4926      	ldr	r1, [pc, #152]	@ (8001210 <DHT_getData+0x334>)
 8001176:	4618      	mov	r0, r3
 8001178:	f7fe fff2 	bl	8000160 <__aeabi_fmul>
 800117c:	4603      	mov	r3, r0
 800117e:	617b      	str	r3, [r7, #20]
            // Check if temperature is negative
            if(!(rawData[2] & (1<<7))) {
 8001180:	7bbb      	ldrb	r3, [r7, #14]
 8001182:	b25b      	sxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	db0e      	blt.n	80011a6 <DHT_getData+0x2ca>
                data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8001188:	7bbb      	ldrb	r3, [r7, #14]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	4313      	orrs	r3, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fde7 	bl	8000d64 <__aeabi_i2f>
 8001196:	4603      	mov	r3, r0
 8001198:	491d      	ldr	r1, [pc, #116]	@ (8001210 <DHT_getData+0x334>)
 800119a:	4618      	mov	r0, r3
 800119c:	f7fe ffe0 	bl	8000160 <__aeabi_fmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	61bb      	str	r3, [r7, #24]
 80011a4:	e012      	b.n	80011cc <DHT_getData+0x2f0>
            } else {
                rawData[2] &= ~(1<<7);
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	73bb      	strb	r3, [r7, #14]
                data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fdd3 	bl	8000d64 <__aeabi_i2f>
 80011be:	4603      	mov	r3, r0
 80011c0:	4914      	ldr	r1, [pc, #80]	@ (8001214 <DHT_getData+0x338>)
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7fe ffcc 	bl	8000160 <__aeabi_fmul>
 80011c8:	4603      	mov	r3, r0
 80011ca:	61bb      	str	r3, [r7, #24]
            }
        }
        if (sensor->type == DHT11) {
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	799b      	ldrb	r3, [r3, #6]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10b      	bne.n	80011ec <DHT_getData+0x310>
            data.hum = (float)rawData[0];
 80011d4:	7b3b      	ldrb	r3, [r7, #12]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fdc0 	bl	8000d5c <__aeabi_ui2f>
 80011dc:	4603      	mov	r3, r0
 80011de:	617b      	str	r3, [r7, #20]
            data.temp = (float)rawData[2];
 80011e0:	7bbb      	ldrb	r3, [r7, #14]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fdba 	bl	8000d5c <__aeabi_ui2f>
 80011e8:	4603      	mov	r3, r0
 80011ea:	61bb      	str	r3, [r7, #24]
        }
    }

    #if DHT_POLLING_CONTROL == 1
    sensor->lastHum = data.hum;
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	611a      	str	r2, [r3, #16]
    sensor->lastTemp = data.temp;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	60da      	str	r2, [r3, #12]
    #endif

    return data;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	461a      	mov	r2, r3
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001204:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	3728      	adds	r7, #40	@ 0x28
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	3dcccccd 	.word	0x3dcccccd
 8001214:	bdcccccd 	.word	0xbdcccccd

08001218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b08d      	sub	sp, #52	@ 0x34
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121e:	f000 faef 	bl	8001800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001222:	f000 f835 	bl	8001290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001226:	f000 f8f1 	bl	800140c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800122a:	f000 f8c5 	bl	80013b8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800122e:	f000 f875 	bl	800131c <MX_TIM4_Init>
  while (1)
  {
	 // Buffer for printing text
	  char msg[40];
	  // Get data from the sensor
	  DHT_data d = DHT_getData(&test);
 8001232:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001236:	4913      	ldr	r1, [pc, #76]	@ (8001284 <main+0x6c>)
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fe4f 	bl	8000edc <DHT_getData>
	  // Write data into the buffer
	  sprintf(msg, "test: Temp %d C, Hum %d %%\r\n", (uint8_t)d.temp, (uint8_t)d.hum);
 800123e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fde3 	bl	8000e0c <__aeabi_f2uiz>
 8001246:	4603      	mov	r3, r0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461c      	mov	r4, r3
 800124c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fddc 	bl	8000e0c <__aeabi_f2uiz>
 8001254:	4603      	mov	r3, r0
 8001256:	b2db      	uxtb	r3, r3
 8001258:	4638      	mov	r0, r7
 800125a:	4622      	mov	r2, r4
 800125c:	490a      	ldr	r1, [pc, #40]	@ (8001288 <main+0x70>)
 800125e:	f002 fbb5 	bl	80039cc <siprintf>
	  // Send the data via UART
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 0xFF);
 8001262:	463b      	mov	r3, r7
 8001264:	4618      	mov	r0, r3
 8001266:	f7fe ff73 	bl	8000150 <strlen>
 800126a:	4603      	mov	r3, r0
 800126c:	b29a      	uxth	r2, r3
 800126e:	4639      	mov	r1, r7
 8001270:	23ff      	movs	r3, #255	@ 0xff
 8001272:	4806      	ldr	r0, [pc, #24]	@ (800128c <main+0x74>)
 8001274:	f001 fcba 	bl	8002bec <HAL_UART_Transmit>
//	  // Received the data via UART
//	  HAL_UART_Receive(&huart1, receivedData, 1, 100);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(2000);
 8001278:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800127c:	f000 fb22 	bl	80018c4 <HAL_Delay>
  {
 8001280:	bf00      	nop
 8001282:	e7d6      	b.n	8001232 <main+0x1a>
 8001284:	20000000 	.word	0x20000000
 8001288:	08005c68 	.word	0x08005c68
 800128c:	2000024c 	.word	0x2000024c

08001290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b090      	sub	sp, #64	@ 0x40
 8001294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001296:	f107 0318 	add.w	r3, r7, #24
 800129a:	2228      	movs	r2, #40	@ 0x28
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 fbf9 	bl	8003a96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c0:	2301      	movs	r3, #1
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c4:	2302      	movs	r3, #2
 80012c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012ce:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80012d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d4:	f107 0318 	add.w	r3, r7, #24
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fdaf 	bl	8001e3c <HAL_RCC_OscConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012e4:	f000 f8d0 	bl	8001488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e8:	230f      	movs	r3, #15
 80012ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ec:	2302      	movs	r3, #2
 80012ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2102      	movs	r1, #2
 8001302:	4618      	mov	r0, r3
 8001304:	f001 f81c 	bl	8002340 <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800130e:	f000 f8bb 	bl	8001488 <Error_Handler>
  }
}
 8001312:	bf00      	nop
 8001314:	3740      	adds	r7, #64	@ 0x40
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001338:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <MX_TIM4_Init+0x94>)
 800133a:	4a1e      	ldr	r2, [pc, #120]	@ (80013b4 <MX_TIM4_Init+0x98>)
 800133c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 800133e:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <MX_TIM4_Init+0x94>)
 8001340:	2247      	movs	r2, #71	@ 0x47
 8001342:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001344:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <MX_TIM4_Init+0x94>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 800134a:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <MX_TIM4_Init+0x94>)
 800134c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001350:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001352:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <MX_TIM4_Init+0x94>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001358:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <MX_TIM4_Init+0x94>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800135e:	4814      	ldr	r0, [pc, #80]	@ (80013b0 <MX_TIM4_Init+0x94>)
 8001360:	f001 f97c 	bl	800265c <HAL_TIM_Base_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800136a:	f000 f88d 	bl	8001488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001372:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	4619      	mov	r1, r3
 800137a:	480d      	ldr	r0, [pc, #52]	@ (80013b0 <MX_TIM4_Init+0x94>)
 800137c:	f001 f9bd 	bl	80026fa <HAL_TIM_ConfigClockSource>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001386:	f000 f87f 	bl	8001488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	4619      	mov	r1, r3
 8001396:	4806      	ldr	r0, [pc, #24]	@ (80013b0 <MX_TIM4_Init+0x94>)
 8001398:	f001 fb7a 	bl	8002a90 <HAL_TIMEx_MasterConfigSynchronization>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80013a2:	f000 f871 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000204 	.word	0x20000204
 80013b4:	40000800 	.word	0x40000800

080013b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <MX_USART1_UART_Init+0x4c>)
 80013be:	4a12      	ldr	r2, [pc, #72]	@ (8001408 <MX_USART1_UART_Init+0x50>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013c2:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <MX_USART1_UART_Init+0x4c>)
 80013c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80013c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <MX_USART1_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <MX_USART1_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <MX_USART1_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <MX_USART1_UART_Init+0x4c>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <MX_USART1_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <MX_USART1_UART_Init+0x4c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	@ (8001404 <MX_USART1_UART_Init+0x4c>)
 80013f0:	f001 fbac 	bl	8002b4c <HAL_UART_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013fa:	f000 f845 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000024c 	.word	0x2000024c
 8001408:	40013800 	.word	0x40013800

0800140c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001420:	4b17      	ldr	r3, [pc, #92]	@ (8001480 <MX_GPIO_Init+0x74>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a16      	ldr	r2, [pc, #88]	@ (8001480 <MX_GPIO_Init+0x74>)
 8001426:	f043 0320 	orr.w	r3, r3, #32
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <MX_GPIO_Init+0x74>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0320 	and.w	r3, r3, #32
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <MX_GPIO_Init+0x74>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a10      	ldr	r2, [pc, #64]	@ (8001480 <MX_GPIO_Init+0x74>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <MX_GPIO_Init+0x74>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	2104      	movs	r1, #4
 8001454:	480b      	ldr	r0, [pc, #44]	@ (8001484 <MX_GPIO_Init+0x78>)
 8001456:	f000 fcd8 	bl	8001e0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800145a:	2304      	movs	r3, #4
 800145c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2302      	movs	r3, #2
 8001468:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	4619      	mov	r1, r3
 8001470:	4804      	ldr	r0, [pc, #16]	@ (8001484 <MX_GPIO_Init+0x78>)
 8001472:	f000 fb2f 	bl	8001ad4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	40010800 	.word	0x40010800

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <Error_Handler+0x8>

08001494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <HAL_MspInit+0x5c>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	4a14      	ldr	r2, [pc, #80]	@ (80014f0 <HAL_MspInit+0x5c>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6193      	str	r3, [r2, #24]
 80014a6:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <HAL_MspInit+0x5c>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <HAL_MspInit+0x5c>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	4a0e      	ldr	r2, [pc, #56]	@ (80014f0 <HAL_MspInit+0x5c>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014bc:	61d3      	str	r3, [r2, #28]
 80014be:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <HAL_MspInit+0x5c>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014ca:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <HAL_MspInit+0x60>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <HAL_MspInit+0x60>)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010000 	.word	0x40010000

080014f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a09      	ldr	r2, [pc, #36]	@ (800152c <HAL_TIM_Base_MspInit+0x34>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d10b      	bne.n	8001522 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800150a:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <HAL_TIM_Base_MspInit+0x38>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	4a08      	ldr	r2, [pc, #32]	@ (8001530 <HAL_TIM_Base_MspInit+0x38>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	61d3      	str	r3, [r2, #28]
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_TIM_Base_MspInit+0x38>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	40000800 	.word	0x40000800
 8001530:	40021000 	.word	0x40021000

08001534 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a1c      	ldr	r2, [pc, #112]	@ (80015c0 <HAL_UART_MspInit+0x8c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d131      	bne.n	80015b8 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001554:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <HAL_UART_MspInit+0x90>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a1a      	ldr	r2, [pc, #104]	@ (80015c4 <HAL_UART_MspInit+0x90>)
 800155a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b18      	ldr	r3, [pc, #96]	@ (80015c4 <HAL_UART_MspInit+0x90>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <HAL_UART_MspInit+0x90>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a14      	ldr	r2, [pc, #80]	@ (80015c4 <HAL_UART_MspInit+0x90>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <HAL_UART_MspInit+0x90>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001584:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001588:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	4619      	mov	r1, r3
 8001598:	480b      	ldr	r0, [pc, #44]	@ (80015c8 <HAL_UART_MspInit+0x94>)
 800159a:	f000 fa9b 	bl	8001ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800159e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	4619      	mov	r1, r3
 80015b2:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <HAL_UART_MspInit+0x94>)
 80015b4:	f000 fa8e 	bl	8001ad4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80015b8:	bf00      	nop
 80015ba:	3720      	adds	r7, #32
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40013800 	.word	0x40013800
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40010800 	.word	0x40010800

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <NMI_Handler+0x4>

080015d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <MemManage_Handler+0x4>

080015e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161c:	f000 f936 	bl	800188c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return 1;
 8001628:	2301      	movs	r3, #1
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <_kill>:

int _kill(int pid, int sig)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800163c:	f002 fa7e 	bl	8003b3c <__errno>
 8001640:	4603      	mov	r3, r0
 8001642:	2216      	movs	r2, #22
 8001644:	601a      	str	r2, [r3, #0]
  return -1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <_exit>:

void _exit (int status)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800165a:	f04f 31ff 	mov.w	r1, #4294967295
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ffe7 	bl	8001632 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <_exit+0x12>

08001668 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	e00a      	b.n	8001690 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800167a:	f3af 8000 	nop.w
 800167e:	4601      	mov	r1, r0
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	60ba      	str	r2, [r7, #8]
 8001686:	b2ca      	uxtb	r2, r1
 8001688:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3301      	adds	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	429a      	cmp	r2, r3
 8001696:	dbf0      	blt.n	800167a <_read+0x12>
  }

  return len;
 8001698:	687b      	ldr	r3, [r7, #4]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	e009      	b.n	80016c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	60ba      	str	r2, [r7, #8]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3301      	adds	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	dbf1      	blt.n	80016b4 <_write+0x12>
  }
  return len;
 80016d0:	687b      	ldr	r3, [r7, #4]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <_close>:

int _close(int file)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001700:	605a      	str	r2, [r3, #4]
  return 0;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <_isatty>:

int _isatty(int file)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001716:	2301      	movs	r3, #1
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001722:	b480      	push	{r7}
 8001724:	b085      	sub	sp, #20
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
	...

0800173c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001744:	4a14      	ldr	r2, [pc, #80]	@ (8001798 <_sbrk+0x5c>)
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <_sbrk+0x60>)
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001750:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001758:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <_sbrk+0x64>)
 800175a:	4a12      	ldr	r2, [pc, #72]	@ (80017a4 <_sbrk+0x68>)
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175e:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d207      	bcs.n	800177c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800176c:	f002 f9e6 	bl	8003b3c <__errno>
 8001770:	4603      	mov	r3, r0
 8001772:	220c      	movs	r2, #12
 8001774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	e009      	b.n	8001790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800177c:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001782:	4b07      	ldr	r3, [pc, #28]	@ (80017a0 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	4a05      	ldr	r2, [pc, #20]	@ (80017a0 <_sbrk+0x64>)
 800178c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20005000 	.word	0x20005000
 800179c:	00000400 	.word	0x00000400
 80017a0:	20000294 	.word	0x20000294
 80017a4:	200003e8 	.word	0x200003e8

080017a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017b4:	f7ff fff8 	bl	80017a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b8:	480b      	ldr	r0, [pc, #44]	@ (80017e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017ba:	490c      	ldr	r1, [pc, #48]	@ (80017ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017bc:	4a0c      	ldr	r2, [pc, #48]	@ (80017f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c0:	e002      	b.n	80017c8 <LoopCopyDataInit>

080017c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c6:	3304      	adds	r3, #4

080017c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017cc:	d3f9      	bcc.n	80017c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ce:	4a09      	ldr	r2, [pc, #36]	@ (80017f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017d0:	4c09      	ldr	r4, [pc, #36]	@ (80017f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d4:	e001      	b.n	80017da <LoopFillZerobss>

080017d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d8:	3204      	adds	r2, #4

080017da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017dc:	d3fb      	bcc.n	80017d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017de:	f002 f9b3 	bl	8003b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017e2:	f7ff fd19 	bl	8001218 <main>
  bx lr
 80017e6:	4770      	bx	lr
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80017f0:	08006034 	.word	0x08006034
  ldr r2, =_sbss
 80017f4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80017f8:	200003e8 	.word	0x200003e8

080017fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC1_2_IRQHandler>
	...

08001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <HAL_Init+0x28>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a07      	ldr	r2, [pc, #28]	@ (8001828 <HAL_Init+0x28>)
 800180a:	f043 0310 	orr.w	r3, r3, #16
 800180e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001810:	2003      	movs	r0, #3
 8001812:	f000 f92b 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001816:	200f      	movs	r0, #15
 8001818:	f000 f808 	bl	800182c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800181c:	f7ff fe3a 	bl	8001494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40022000 	.word	0x40022000

0800182c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001834:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <HAL_InitTick+0x54>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <HAL_InitTick+0x58>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4619      	mov	r1, r3
 800183e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001842:	fbb3 f3f1 	udiv	r3, r3, r1
 8001846:	fbb2 f3f3 	udiv	r3, r2, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f935 	bl	8001aba <HAL_SYSTICK_Config>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e00e      	b.n	8001878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b0f      	cmp	r3, #15
 800185e:	d80a      	bhi.n	8001876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001860:	2200      	movs	r2, #0
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	f04f 30ff 	mov.w	r0, #4294967295
 8001868:	f000 f90b 	bl	8001a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800186c:	4a06      	ldr	r2, [pc, #24]	@ (8001888 <HAL_InitTick+0x5c>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000014 	.word	0x20000014
 8001884:	2000001c 	.word	0x2000001c
 8001888:	20000018 	.word	0x20000018

0800188c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001890:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <HAL_IncTick+0x1c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <HAL_IncTick+0x20>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4413      	add	r3, r2
 800189c:	4a03      	ldr	r2, [pc, #12]	@ (80018ac <HAL_IncTick+0x20>)
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	2000001c 	.word	0x2000001c
 80018ac:	20000298 	.word	0x20000298

080018b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b02      	ldr	r3, [pc, #8]	@ (80018c0 <HAL_GetTick+0x10>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	20000298 	.word	0x20000298

080018c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018cc:	f7ff fff0 	bl	80018b0 <HAL_GetTick>
 80018d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018dc:	d005      	beq.n	80018ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018de:	4b0a      	ldr	r3, [pc, #40]	@ (8001908 <HAL_Delay+0x44>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4413      	add	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ea:	bf00      	nop
 80018ec:	f7ff ffe0 	bl	80018b0 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d8f7      	bhi.n	80018ec <HAL_Delay+0x28>
  {
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000001c 	.word	0x2000001c

0800190c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800191c:	4b0c      	ldr	r3, [pc, #48]	@ (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001928:	4013      	ands	r3, r2
 800192a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001934:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800193c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193e:	4a04      	ldr	r2, [pc, #16]	@ (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	60d3      	str	r3, [r2, #12]
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001958:	4b04      	ldr	r3, [pc, #16]	@ (800196c <__NVIC_GetPriorityGrouping+0x18>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	0a1b      	lsrs	r3, r3, #8
 800195e:	f003 0307 	and.w	r3, r3, #7
}
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	db0a      	blt.n	800199a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	490c      	ldr	r1, [pc, #48]	@ (80019bc <__NVIC_SetPriority+0x4c>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	440b      	add	r3, r1
 8001994:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001998:	e00a      	b.n	80019b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4908      	ldr	r1, [pc, #32]	@ (80019c0 <__NVIC_SetPriority+0x50>)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	3b04      	subs	r3, #4
 80019a8:	0112      	lsls	r2, r2, #4
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	440b      	add	r3, r1
 80019ae:	761a      	strb	r2, [r3, #24]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000e100 	.word	0xe000e100
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	@ 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f1c3 0307 	rsb	r3, r3, #7
 80019de:	2b04      	cmp	r3, #4
 80019e0:	bf28      	it	cs
 80019e2:	2304      	movcs	r3, #4
 80019e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3304      	adds	r3, #4
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d902      	bls.n	80019f4 <NVIC_EncodePriority+0x30>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3b03      	subs	r3, #3
 80019f2:	e000      	b.n	80019f6 <NVIC_EncodePriority+0x32>
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	401a      	ands	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43d9      	mvns	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	4313      	orrs	r3, r2
         );
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3724      	adds	r7, #36	@ 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a38:	d301      	bcc.n	8001a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00f      	b.n	8001a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a68 <SysTick_Config+0x40>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a46:	210f      	movs	r1, #15
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f7ff ff90 	bl	8001970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <SysTick_Config+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	4b04      	ldr	r3, [pc, #16]	@ (8001a68 <SysTick_Config+0x40>)
 8001a58:	2207      	movs	r2, #7
 8001a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	e000e010 	.word	0xe000e010

08001a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff49 	bl	800190c <__NVIC_SetPriorityGrouping>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a94:	f7ff ff5e 	bl	8001954 <__NVIC_GetPriorityGrouping>
 8001a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	f7ff ff90 	bl	80019c4 <NVIC_EncodePriority>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff5f 	bl	8001970 <__NVIC_SetPriority>
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ffb0 	bl	8001a28 <SysTick_Config>
 8001ac8:	4603      	mov	r3, r0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b08b      	sub	sp, #44	@ 0x2c
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae6:	e169      	b.n	8001dbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	f040 8158 	bne.w	8001db6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4a9a      	ldr	r2, [pc, #616]	@ (8001d74 <HAL_GPIO_Init+0x2a0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d05e      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b10:	4a98      	ldr	r2, [pc, #608]	@ (8001d74 <HAL_GPIO_Init+0x2a0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d875      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b16:	4a98      	ldr	r2, [pc, #608]	@ (8001d78 <HAL_GPIO_Init+0x2a4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d058      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b1c:	4a96      	ldr	r2, [pc, #600]	@ (8001d78 <HAL_GPIO_Init+0x2a4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d86f      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b22:	4a96      	ldr	r2, [pc, #600]	@ (8001d7c <HAL_GPIO_Init+0x2a8>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d052      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b28:	4a94      	ldr	r2, [pc, #592]	@ (8001d7c <HAL_GPIO_Init+0x2a8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d869      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b2e:	4a94      	ldr	r2, [pc, #592]	@ (8001d80 <HAL_GPIO_Init+0x2ac>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d04c      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b34:	4a92      	ldr	r2, [pc, #584]	@ (8001d80 <HAL_GPIO_Init+0x2ac>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d863      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b3a:	4a92      	ldr	r2, [pc, #584]	@ (8001d84 <HAL_GPIO_Init+0x2b0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d046      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b40:	4a90      	ldr	r2, [pc, #576]	@ (8001d84 <HAL_GPIO_Init+0x2b0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d85d      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b46:	2b12      	cmp	r3, #18
 8001b48:	d82a      	bhi.n	8001ba0 <HAL_GPIO_Init+0xcc>
 8001b4a:	2b12      	cmp	r3, #18
 8001b4c:	d859      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b54 <HAL_GPIO_Init+0x80>)
 8001b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b54:	08001bcf 	.word	0x08001bcf
 8001b58:	08001ba9 	.word	0x08001ba9
 8001b5c:	08001bbb 	.word	0x08001bbb
 8001b60:	08001bfd 	.word	0x08001bfd
 8001b64:	08001c03 	.word	0x08001c03
 8001b68:	08001c03 	.word	0x08001c03
 8001b6c:	08001c03 	.word	0x08001c03
 8001b70:	08001c03 	.word	0x08001c03
 8001b74:	08001c03 	.word	0x08001c03
 8001b78:	08001c03 	.word	0x08001c03
 8001b7c:	08001c03 	.word	0x08001c03
 8001b80:	08001c03 	.word	0x08001c03
 8001b84:	08001c03 	.word	0x08001c03
 8001b88:	08001c03 	.word	0x08001c03
 8001b8c:	08001c03 	.word	0x08001c03
 8001b90:	08001c03 	.word	0x08001c03
 8001b94:	08001c03 	.word	0x08001c03
 8001b98:	08001bb1 	.word	0x08001bb1
 8001b9c:	08001bc5 	.word	0x08001bc5
 8001ba0:	4a79      	ldr	r2, [pc, #484]	@ (8001d88 <HAL_GPIO_Init+0x2b4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ba6:	e02c      	b.n	8001c02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	623b      	str	r3, [r7, #32]
          break;
 8001bae:	e029      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	623b      	str	r3, [r7, #32]
          break;
 8001bb8:	e024      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	3308      	adds	r3, #8
 8001bc0:	623b      	str	r3, [r7, #32]
          break;
 8001bc2:	e01f      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	330c      	adds	r3, #12
 8001bca:	623b      	str	r3, [r7, #32]
          break;
 8001bcc:	e01a      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d102      	bne.n	8001bdc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e013      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d105      	bne.n	8001bf0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be4:	2308      	movs	r3, #8
 8001be6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	611a      	str	r2, [r3, #16]
          break;
 8001bee:	e009      	b.n	8001c04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf0:	2308      	movs	r3, #8
 8001bf2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	615a      	str	r2, [r3, #20]
          break;
 8001bfa:	e003      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
          break;
 8001c00:	e000      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          break;
 8001c02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	2bff      	cmp	r3, #255	@ 0xff
 8001c08:	d801      	bhi.n	8001c0e <HAL_GPIO_Init+0x13a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	e001      	b.n	8001c12 <HAL_GPIO_Init+0x13e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3304      	adds	r3, #4
 8001c12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2bff      	cmp	r3, #255	@ 0xff
 8001c18:	d802      	bhi.n	8001c20 <HAL_GPIO_Init+0x14c>
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	e002      	b.n	8001c26 <HAL_GPIO_Init+0x152>
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	3b08      	subs	r3, #8
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	210f      	movs	r1, #15
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	401a      	ands	r2, r3
 8001c38:	6a39      	ldr	r1, [r7, #32]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c40:	431a      	orrs	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80b1 	beq.w	8001db6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c54:	4b4d      	ldr	r3, [pc, #308]	@ (8001d8c <HAL_GPIO_Init+0x2b8>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a4c      	ldr	r2, [pc, #304]	@ (8001d8c <HAL_GPIO_Init+0x2b8>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b4a      	ldr	r3, [pc, #296]	@ (8001d8c <HAL_GPIO_Init+0x2b8>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c6c:	4a48      	ldr	r2, [pc, #288]	@ (8001d90 <HAL_GPIO_Init+0x2bc>)
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	220f      	movs	r2, #15
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a40      	ldr	r2, [pc, #256]	@ (8001d94 <HAL_GPIO_Init+0x2c0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d013      	beq.n	8001cc0 <HAL_GPIO_Init+0x1ec>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a3f      	ldr	r2, [pc, #252]	@ (8001d98 <HAL_GPIO_Init+0x2c4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00d      	beq.n	8001cbc <HAL_GPIO_Init+0x1e8>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a3e      	ldr	r2, [pc, #248]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d007      	beq.n	8001cb8 <HAL_GPIO_Init+0x1e4>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a3d      	ldr	r2, [pc, #244]	@ (8001da0 <HAL_GPIO_Init+0x2cc>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d101      	bne.n	8001cb4 <HAL_GPIO_Init+0x1e0>
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e006      	b.n	8001cc2 <HAL_GPIO_Init+0x1ee>
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	e004      	b.n	8001cc2 <HAL_GPIO_Init+0x1ee>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e002      	b.n	8001cc2 <HAL_GPIO_Init+0x1ee>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <HAL_GPIO_Init+0x1ee>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cc4:	f002 0203 	and.w	r2, r2, #3
 8001cc8:	0092      	lsls	r2, r2, #2
 8001cca:	4093      	lsls	r3, r2
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cd2:	492f      	ldr	r1, [pc, #188]	@ (8001d90 <HAL_GPIO_Init+0x2bc>)
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	3302      	adds	r3, #2
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d006      	beq.n	8001cfa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cec:	4b2d      	ldr	r3, [pc, #180]	@ (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	492c      	ldr	r1, [pc, #176]	@ (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]
 8001cf8:	e006      	b.n	8001d08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	4928      	ldr	r1, [pc, #160]	@ (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d006      	beq.n	8001d22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d14:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	4922      	ldr	r1, [pc, #136]	@ (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60cb      	str	r3, [r1, #12]
 8001d20:	e006      	b.n	8001d30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d22:	4b20      	ldr	r3, [pc, #128]	@ (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	491e      	ldr	r1, [pc, #120]	@ (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d3c:	4b19      	ldr	r3, [pc, #100]	@ (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	4918      	ldr	r1, [pc, #96]	@ (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d4a:	4b16      	ldr	r3, [pc, #88]	@ (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	4914      	ldr	r1, [pc, #80]	@ (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d021      	beq.n	8001da8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d64:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	490e      	ldr	r1, [pc, #56]	@ (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
 8001d70:	e021      	b.n	8001db6 <HAL_GPIO_Init+0x2e2>
 8001d72:	bf00      	nop
 8001d74:	10320000 	.word	0x10320000
 8001d78:	10310000 	.word	0x10310000
 8001d7c:	10220000 	.word	0x10220000
 8001d80:	10210000 	.word	0x10210000
 8001d84:	10120000 	.word	0x10120000
 8001d88:	10110000 	.word	0x10110000
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40010000 	.word	0x40010000
 8001d94:	40010800 	.word	0x40010800
 8001d98:	40010c00 	.word	0x40010c00
 8001d9c:	40011000 	.word	0x40011000
 8001da0:	40011400 	.word	0x40011400
 8001da4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001da8:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <HAL_GPIO_Init+0x304>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	4909      	ldr	r1, [pc, #36]	@ (8001dd8 <HAL_GPIO_Init+0x304>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db8:	3301      	adds	r3, #1
 8001dba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f47f ae8e 	bne.w	8001ae8 <HAL_GPIO_Init+0x14>
  }
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	372c      	adds	r7, #44	@ 0x2c
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	40010400 	.word	0x40010400

08001ddc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	e001      	b.n	8001dfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	460b      	mov	r3, r1
 8001e14:	807b      	strh	r3, [r7, #2]
 8001e16:	4613      	mov	r3, r2
 8001e18:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e1a:	787b      	ldrb	r3, [r7, #1]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e20:	887a      	ldrh	r2, [r7, #2]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e26:	e003      	b.n	8001e30 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	041a      	lsls	r2, r3, #16
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	611a      	str	r2, [r3, #16]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
	...

08001e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e272      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 8087 	beq.w	8001f6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e5c:	4b92      	ldr	r3, [pc, #584]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 030c 	and.w	r3, r3, #12
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d00c      	beq.n	8001e82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e68:	4b8f      	ldr	r3, [pc, #572]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d112      	bne.n	8001e9a <HAL_RCC_OscConfig+0x5e>
 8001e74:	4b8c      	ldr	r3, [pc, #560]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e80:	d10b      	bne.n	8001e9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e82:	4b89      	ldr	r3, [pc, #548]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d06c      	beq.n	8001f68 <HAL_RCC_OscConfig+0x12c>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d168      	bne.n	8001f68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e24c      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x76>
 8001ea4:	4b80      	ldr	r3, [pc, #512]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a7f      	ldr	r2, [pc, #508]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	e02e      	b.n	8001f10 <HAL_RCC_OscConfig+0xd4>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x98>
 8001eba:	4b7b      	ldr	r3, [pc, #492]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a7a      	ldr	r2, [pc, #488]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	4b78      	ldr	r3, [pc, #480]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a77      	ldr	r2, [pc, #476]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e01d      	b.n	8001f10 <HAL_RCC_OscConfig+0xd4>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xbc>
 8001ede:	4b72      	ldr	r3, [pc, #456]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a71      	ldr	r2, [pc, #452]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4b6f      	ldr	r3, [pc, #444]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a6e      	ldr	r2, [pc, #440]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e00b      	b.n	8001f10 <HAL_RCC_OscConfig+0xd4>
 8001ef8:	4b6b      	ldr	r3, [pc, #428]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a6a      	ldr	r2, [pc, #424]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	4b68      	ldr	r3, [pc, #416]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a67      	ldr	r2, [pc, #412]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d013      	beq.n	8001f40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff fcca 	bl	80018b0 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f20:	f7ff fcc6 	bl	80018b0 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	@ 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e200      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	4b5d      	ldr	r3, [pc, #372]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0xe4>
 8001f3e:	e014      	b.n	8001f6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7ff fcb6 	bl	80018b0 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f48:	f7ff fcb2 	bl	80018b0 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	@ 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e1ec      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	4b53      	ldr	r3, [pc, #332]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x10c>
 8001f66:	e000      	b.n	8001f6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d063      	beq.n	800203e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f76:	4b4c      	ldr	r3, [pc, #304]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00b      	beq.n	8001f9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f82:	4b49      	ldr	r3, [pc, #292]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d11c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x18c>
 8001f8e:	4b46      	ldr	r3, [pc, #280]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d116      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9a:	4b43      	ldr	r3, [pc, #268]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x176>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d001      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e1c0      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4939      	ldr	r1, [pc, #228]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc6:	e03a      	b.n	800203e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d020      	beq.n	8002012 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd0:	4b36      	ldr	r3, [pc, #216]	@ (80020ac <HAL_RCC_OscConfig+0x270>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fc6b 	bl	80018b0 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fde:	f7ff fc67 	bl	80018b0 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e1a1      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4927      	ldr	r1, [pc, #156]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]
 8002010:	e015      	b.n	800203e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002012:	4b26      	ldr	r3, [pc, #152]	@ (80020ac <HAL_RCC_OscConfig+0x270>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7ff fc4a 	bl	80018b0 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002020:	f7ff fc46 	bl	80018b0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e180      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002032:	4b1d      	ldr	r3, [pc, #116]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d03a      	beq.n	80020c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d019      	beq.n	8002086 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002052:	4b17      	ldr	r3, [pc, #92]	@ (80020b0 <HAL_RCC_OscConfig+0x274>)
 8002054:	2201      	movs	r2, #1
 8002056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002058:	f7ff fc2a 	bl	80018b0 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002060:	f7ff fc26 	bl	80018b0 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e160      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002072:	4b0d      	ldr	r3, [pc, #52]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800207e:	2001      	movs	r0, #1
 8002080:	f000 face 	bl	8002620 <RCC_Delay>
 8002084:	e01c      	b.n	80020c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002086:	4b0a      	ldr	r3, [pc, #40]	@ (80020b0 <HAL_RCC_OscConfig+0x274>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208c:	f7ff fc10 	bl	80018b0 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002092:	e00f      	b.n	80020b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002094:	f7ff fc0c 	bl	80018b0 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d908      	bls.n	80020b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e146      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	42420000 	.word	0x42420000
 80020b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b4:	4b92      	ldr	r3, [pc, #584]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1e9      	bne.n	8002094 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80a6 	beq.w	800221a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10d      	bne.n	80020fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	4b88      	ldr	r3, [pc, #544]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	4a87      	ldr	r2, [pc, #540]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e8:	61d3      	str	r3, [r2, #28]
 80020ea:	4b85      	ldr	r3, [pc, #532]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f6:	2301      	movs	r3, #1
 80020f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fa:	4b82      	ldr	r3, [pc, #520]	@ (8002304 <HAL_RCC_OscConfig+0x4c8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d118      	bne.n	8002138 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002106:	4b7f      	ldr	r3, [pc, #508]	@ (8002304 <HAL_RCC_OscConfig+0x4c8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a7e      	ldr	r2, [pc, #504]	@ (8002304 <HAL_RCC_OscConfig+0x4c8>)
 800210c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002112:	f7ff fbcd 	bl	80018b0 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211a:	f7ff fbc9 	bl	80018b0 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b64      	cmp	r3, #100	@ 0x64
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e103      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	4b75      	ldr	r3, [pc, #468]	@ (8002304 <HAL_RCC_OscConfig+0x4c8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d106      	bne.n	800214e <HAL_RCC_OscConfig+0x312>
 8002140:	4b6f      	ldr	r3, [pc, #444]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4a6e      	ldr	r2, [pc, #440]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6213      	str	r3, [r2, #32]
 800214c:	e02d      	b.n	80021aa <HAL_RCC_OscConfig+0x36e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x334>
 8002156:	4b6a      	ldr	r3, [pc, #424]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	4a69      	ldr	r2, [pc, #420]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	6213      	str	r3, [r2, #32]
 8002162:	4b67      	ldr	r3, [pc, #412]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	4a66      	ldr	r2, [pc, #408]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	f023 0304 	bic.w	r3, r3, #4
 800216c:	6213      	str	r3, [r2, #32]
 800216e:	e01c      	b.n	80021aa <HAL_RCC_OscConfig+0x36e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b05      	cmp	r3, #5
 8002176:	d10c      	bne.n	8002192 <HAL_RCC_OscConfig+0x356>
 8002178:	4b61      	ldr	r3, [pc, #388]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4a60      	ldr	r2, [pc, #384]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	6213      	str	r3, [r2, #32]
 8002184:	4b5e      	ldr	r3, [pc, #376]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4a5d      	ldr	r2, [pc, #372]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6213      	str	r3, [r2, #32]
 8002190:	e00b      	b.n	80021aa <HAL_RCC_OscConfig+0x36e>
 8002192:	4b5b      	ldr	r3, [pc, #364]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	4a5a      	ldr	r2, [pc, #360]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	6213      	str	r3, [r2, #32]
 800219e:	4b58      	ldr	r3, [pc, #352]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4a57      	ldr	r2, [pc, #348]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	f023 0304 	bic.w	r3, r3, #4
 80021a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d015      	beq.n	80021de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b2:	f7ff fb7d 	bl	80018b0 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b8:	e00a      	b.n	80021d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ba:	f7ff fb79 	bl	80018b0 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e0b1      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ee      	beq.n	80021ba <HAL_RCC_OscConfig+0x37e>
 80021dc:	e014      	b.n	8002208 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021de:	f7ff fb67 	bl	80018b0 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e4:	e00a      	b.n	80021fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e6:	f7ff fb63 	bl	80018b0 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e09b      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fc:	4b40      	ldr	r3, [pc, #256]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1ee      	bne.n	80021e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002208:	7dfb      	ldrb	r3, [r7, #23]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d105      	bne.n	800221a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220e:	4b3c      	ldr	r3, [pc, #240]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	4a3b      	ldr	r2, [pc, #236]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002218:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8087 	beq.w	8002332 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002224:	4b36      	ldr	r3, [pc, #216]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b08      	cmp	r3, #8
 800222e:	d061      	beq.n	80022f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d146      	bne.n	80022c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002238:	4b33      	ldr	r3, [pc, #204]	@ (8002308 <HAL_RCC_OscConfig+0x4cc>)
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7ff fb37 	bl	80018b0 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002246:	f7ff fb33 	bl	80018b0 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e06d      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002258:	4b29      	ldr	r3, [pc, #164]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f0      	bne.n	8002246 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800226c:	d108      	bne.n	8002280 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800226e:	4b24      	ldr	r3, [pc, #144]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	4921      	ldr	r1, [pc, #132]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002280:	4b1f      	ldr	r3, [pc, #124]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a19      	ldr	r1, [r3, #32]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002290:	430b      	orrs	r3, r1
 8002292:	491b      	ldr	r1, [pc, #108]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002298:	4b1b      	ldr	r3, [pc, #108]	@ (8002308 <HAL_RCC_OscConfig+0x4cc>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229e:	f7ff fb07 	bl	80018b0 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a6:	f7ff fb03 	bl	80018b0 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e03d      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b8:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x46a>
 80022c4:	e035      	b.n	8002332 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c6:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <HAL_RCC_OscConfig+0x4cc>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff faf0 	bl	80018b0 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d4:	f7ff faec 	bl	80018b0 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e026      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e6:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x498>
 80022f2:	e01e      	b.n	8002332 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d107      	bne.n	800230c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e019      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
 8002300:	40021000 	.word	0x40021000
 8002304:	40007000 	.word	0x40007000
 8002308:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800230c:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <HAL_RCC_OscConfig+0x500>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	429a      	cmp	r2, r3
 800231e:	d106      	bne.n	800232e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000

08002340 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0d0      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002354:	4b6a      	ldr	r3, [pc, #424]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d910      	bls.n	8002384 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	4b67      	ldr	r3, [pc, #412]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 0207 	bic.w	r2, r3, #7
 800236a:	4965      	ldr	r1, [pc, #404]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	4313      	orrs	r3, r2
 8002370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b63      	ldr	r3, [pc, #396]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0b8      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800239c:	4b59      	ldr	r3, [pc, #356]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	4a58      	ldr	r2, [pc, #352]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b4:	4b53      	ldr	r3, [pc, #332]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4a52      	ldr	r2, [pc, #328]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c0:	4b50      	ldr	r3, [pc, #320]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	494d      	ldr	r1, [pc, #308]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d040      	beq.n	8002460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	4b47      	ldr	r3, [pc, #284]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d115      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e07f      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fe:	4b41      	ldr	r3, [pc, #260]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e073      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240e:	4b3d      	ldr	r3, [pc, #244]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e06b      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800241e:	4b39      	ldr	r3, [pc, #228]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f023 0203 	bic.w	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4936      	ldr	r1, [pc, #216]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002430:	f7ff fa3e 	bl	80018b0 <HAL_GetTick>
 8002434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	e00a      	b.n	800244e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002438:	f7ff fa3a 	bl	80018b0 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e053      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	4b2d      	ldr	r3, [pc, #180]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 020c 	and.w	r2, r3, #12
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	429a      	cmp	r2, r3
 800245e:	d1eb      	bne.n	8002438 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002460:	4b27      	ldr	r3, [pc, #156]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d210      	bcs.n	8002490 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b24      	ldr	r3, [pc, #144]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 0207 	bic.w	r2, r3, #7
 8002476:	4922      	ldr	r1, [pc, #136]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b20      	ldr	r3, [pc, #128]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e032      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800249c:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4916      	ldr	r1, [pc, #88]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ba:	4b12      	ldr	r3, [pc, #72]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	490e      	ldr	r1, [pc, #56]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ce:	f000 f821 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 80024d2:	4602      	mov	r2, r0
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	490a      	ldr	r1, [pc, #40]	@ (8002508 <HAL_RCC_ClockConfig+0x1c8>)
 80024e0:	5ccb      	ldrb	r3, [r1, r3]
 80024e2:	fa22 f303 	lsr.w	r3, r2, r3
 80024e6:	4a09      	ldr	r2, [pc, #36]	@ (800250c <HAL_RCC_ClockConfig+0x1cc>)
 80024e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ea:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <HAL_RCC_ClockConfig+0x1d0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff f99c 	bl	800182c <HAL_InitTick>

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40022000 	.word	0x40022000
 8002504:	40021000 	.word	0x40021000
 8002508:	08005c88 	.word	0x08005c88
 800250c:	20000014 	.word	0x20000014
 8002510:	20000018 	.word	0x20000018

08002514 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800252e:	4b1e      	ldr	r3, [pc, #120]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b04      	cmp	r3, #4
 800253c:	d002      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0x30>
 800253e:	2b08      	cmp	r3, #8
 8002540:	d003      	beq.n	800254a <HAL_RCC_GetSysClockFreq+0x36>
 8002542:	e027      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002544:	4b19      	ldr	r3, [pc, #100]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002546:	613b      	str	r3, [r7, #16]
      break;
 8002548:	e027      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	0c9b      	lsrs	r3, r3, #18
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	4a17      	ldr	r2, [pc, #92]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002554:	5cd3      	ldrb	r3, [r2, r3]
 8002556:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d010      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002562:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	0c5b      	lsrs	r3, r3, #17
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	4a11      	ldr	r2, [pc, #68]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800256e:	5cd3      	ldrb	r3, [r2, r3]
 8002570:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a0d      	ldr	r2, [pc, #52]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002576:	fb03 f202 	mul.w	r2, r3, r2
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e004      	b.n	800258e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a0c      	ldr	r2, [pc, #48]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002588:	fb02 f303 	mul.w	r3, r2, r3
 800258c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	613b      	str	r3, [r7, #16]
      break;
 8002592:	e002      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002594:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002596:	613b      	str	r3, [r7, #16]
      break;
 8002598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800259a:	693b      	ldr	r3, [r7, #16]
}
 800259c:	4618      	mov	r0, r3
 800259e:	371c      	adds	r7, #28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
 80025ac:	007a1200 	.word	0x007a1200
 80025b0:	08005ca0 	.word	0x08005ca0
 80025b4:	08005cb0 	.word	0x08005cb0
 80025b8:	003d0900 	.word	0x003d0900

080025bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c0:	4b02      	ldr	r3, [pc, #8]	@ (80025cc <HAL_RCC_GetHCLKFreq+0x10>)
 80025c2:	681b      	ldr	r3, [r3, #0]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	20000014 	.word	0x20000014

080025d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025d4:	f7ff fff2 	bl	80025bc <HAL_RCC_GetHCLKFreq>
 80025d8:	4602      	mov	r2, r0
 80025da:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	4903      	ldr	r1, [pc, #12]	@ (80025f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e6:	5ccb      	ldrb	r3, [r1, r3]
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08005c98 	.word	0x08005c98

080025f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025fc:	f7ff ffde 	bl	80025bc <HAL_RCC_GetHCLKFreq>
 8002600:	4602      	mov	r2, r0
 8002602:	4b05      	ldr	r3, [pc, #20]	@ (8002618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	0adb      	lsrs	r3, r3, #11
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	4903      	ldr	r1, [pc, #12]	@ (800261c <HAL_RCC_GetPCLK2Freq+0x24>)
 800260e:	5ccb      	ldrb	r3, [r1, r3]
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021000 	.word	0x40021000
 800261c:	08005c98 	.word	0x08005c98

08002620 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002628:	4b0a      	ldr	r3, [pc, #40]	@ (8002654 <RCC_Delay+0x34>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a0a      	ldr	r2, [pc, #40]	@ (8002658 <RCC_Delay+0x38>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	0a5b      	lsrs	r3, r3, #9
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800263c:	bf00      	nop
  }
  while (Delay --);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1e5a      	subs	r2, r3, #1
 8002642:	60fa      	str	r2, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f9      	bne.n	800263c <RCC_Delay+0x1c>
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	20000014 	.word	0x20000014
 8002658:	10624dd3 	.word	0x10624dd3

0800265c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e041      	b.n	80026f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fe ff38 	bl	80014f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3304      	adds	r3, #4
 8002698:	4619      	mov	r1, r3
 800269a:	4610      	mov	r0, r2
 800269c:	f000 f8f4 	bl	8002888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_TIM_ConfigClockSource+0x1c>
 8002712:	2302      	movs	r3, #2
 8002714:	e0b4      	b.n	8002880 <HAL_TIM_ConfigClockSource+0x186>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2202      	movs	r2, #2
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002734:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800273c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800274e:	d03e      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0xd4>
 8002750:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002754:	f200 8087 	bhi.w	8002866 <HAL_TIM_ConfigClockSource+0x16c>
 8002758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800275c:	f000 8086 	beq.w	800286c <HAL_TIM_ConfigClockSource+0x172>
 8002760:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002764:	d87f      	bhi.n	8002866 <HAL_TIM_ConfigClockSource+0x16c>
 8002766:	2b70      	cmp	r3, #112	@ 0x70
 8002768:	d01a      	beq.n	80027a0 <HAL_TIM_ConfigClockSource+0xa6>
 800276a:	2b70      	cmp	r3, #112	@ 0x70
 800276c:	d87b      	bhi.n	8002866 <HAL_TIM_ConfigClockSource+0x16c>
 800276e:	2b60      	cmp	r3, #96	@ 0x60
 8002770:	d050      	beq.n	8002814 <HAL_TIM_ConfigClockSource+0x11a>
 8002772:	2b60      	cmp	r3, #96	@ 0x60
 8002774:	d877      	bhi.n	8002866 <HAL_TIM_ConfigClockSource+0x16c>
 8002776:	2b50      	cmp	r3, #80	@ 0x50
 8002778:	d03c      	beq.n	80027f4 <HAL_TIM_ConfigClockSource+0xfa>
 800277a:	2b50      	cmp	r3, #80	@ 0x50
 800277c:	d873      	bhi.n	8002866 <HAL_TIM_ConfigClockSource+0x16c>
 800277e:	2b40      	cmp	r3, #64	@ 0x40
 8002780:	d058      	beq.n	8002834 <HAL_TIM_ConfigClockSource+0x13a>
 8002782:	2b40      	cmp	r3, #64	@ 0x40
 8002784:	d86f      	bhi.n	8002866 <HAL_TIM_ConfigClockSource+0x16c>
 8002786:	2b30      	cmp	r3, #48	@ 0x30
 8002788:	d064      	beq.n	8002854 <HAL_TIM_ConfigClockSource+0x15a>
 800278a:	2b30      	cmp	r3, #48	@ 0x30
 800278c:	d86b      	bhi.n	8002866 <HAL_TIM_ConfigClockSource+0x16c>
 800278e:	2b20      	cmp	r3, #32
 8002790:	d060      	beq.n	8002854 <HAL_TIM_ConfigClockSource+0x15a>
 8002792:	2b20      	cmp	r3, #32
 8002794:	d867      	bhi.n	8002866 <HAL_TIM_ConfigClockSource+0x16c>
 8002796:	2b00      	cmp	r3, #0
 8002798:	d05c      	beq.n	8002854 <HAL_TIM_ConfigClockSource+0x15a>
 800279a:	2b10      	cmp	r3, #16
 800279c:	d05a      	beq.n	8002854 <HAL_TIM_ConfigClockSource+0x15a>
 800279e:	e062      	b.n	8002866 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027b0:	f000 f94f 	bl	8002a52 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	609a      	str	r2, [r3, #8]
      break;
 80027cc:	e04f      	b.n	800286e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027de:	f000 f938 	bl	8002a52 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027f0:	609a      	str	r2, [r3, #8]
      break;
 80027f2:	e03c      	b.n	800286e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002800:	461a      	mov	r2, r3
 8002802:	f000 f8af 	bl	8002964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2150      	movs	r1, #80	@ 0x50
 800280c:	4618      	mov	r0, r3
 800280e:	f000 f906 	bl	8002a1e <TIM_ITRx_SetConfig>
      break;
 8002812:	e02c      	b.n	800286e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002820:	461a      	mov	r2, r3
 8002822:	f000 f8cd 	bl	80029c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2160      	movs	r1, #96	@ 0x60
 800282c:	4618      	mov	r0, r3
 800282e:	f000 f8f6 	bl	8002a1e <TIM_ITRx_SetConfig>
      break;
 8002832:	e01c      	b.n	800286e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002840:	461a      	mov	r2, r3
 8002842:	f000 f88f 	bl	8002964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2140      	movs	r1, #64	@ 0x40
 800284c:	4618      	mov	r0, r3
 800284e:	f000 f8e6 	bl	8002a1e <TIM_ITRx_SetConfig>
      break;
 8002852:	e00c      	b.n	800286e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4619      	mov	r1, r3
 800285e:	4610      	mov	r0, r2
 8002860:	f000 f8dd 	bl	8002a1e <TIM_ITRx_SetConfig>
      break;
 8002864:	e003      	b.n	800286e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
      break;
 800286a:	e000      	b.n	800286e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800286c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800287e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a2f      	ldr	r2, [pc, #188]	@ (8002958 <TIM_Base_SetConfig+0xd0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00b      	beq.n	80028b8 <TIM_Base_SetConfig+0x30>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a6:	d007      	beq.n	80028b8 <TIM_Base_SetConfig+0x30>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a2c      	ldr	r2, [pc, #176]	@ (800295c <TIM_Base_SetConfig+0xd4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d003      	beq.n	80028b8 <TIM_Base_SetConfig+0x30>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a2b      	ldr	r2, [pc, #172]	@ (8002960 <TIM_Base_SetConfig+0xd8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d108      	bne.n	80028ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a22      	ldr	r2, [pc, #136]	@ (8002958 <TIM_Base_SetConfig+0xd0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d00b      	beq.n	80028ea <TIM_Base_SetConfig+0x62>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d8:	d007      	beq.n	80028ea <TIM_Base_SetConfig+0x62>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a1f      	ldr	r2, [pc, #124]	@ (800295c <TIM_Base_SetConfig+0xd4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d003      	beq.n	80028ea <TIM_Base_SetConfig+0x62>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002960 <TIM_Base_SetConfig+0xd8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d108      	bne.n	80028fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a0d      	ldr	r2, [pc, #52]	@ (8002958 <TIM_Base_SetConfig+0xd0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d103      	bne.n	8002930 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f023 0201 	bic.w	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	611a      	str	r2, [r3, #16]
  }
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	40012c00 	.word	0x40012c00
 800295c:	40000400 	.word	0x40000400
 8002960:	40000800 	.word	0x40000800

08002964 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	f023 0201 	bic.w	r2, r3, #1
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800298e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f023 030a 	bic.w	r3, r3, #10
 80029a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	621a      	str	r2, [r3, #32]
}
 80029b6:	bf00      	nop
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	f023 0210 	bic.w	r2, r3, #16
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80029ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	031b      	lsls	r3, r3, #12
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80029fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	621a      	str	r2, [r3, #32]
}
 8002a14:	bf00      	nop
 8002a16:	371c      	adds	r7, #28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f043 0307 	orr.w	r3, r3, #7
 8002a40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	609a      	str	r2, [r3, #8]
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b087      	sub	sp, #28
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	021a      	lsls	r2, r3, #8
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	609a      	str	r2, [r3, #8]
}
 8002a86:	bf00      	nop
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e046      	b.n	8002b36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a16      	ldr	r2, [pc, #88]	@ (8002b40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00e      	beq.n	8002b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af4:	d009      	beq.n	8002b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a12      	ldr	r2, [pc, #72]	@ (8002b44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d004      	beq.n	8002b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a10      	ldr	r2, [pc, #64]	@ (8002b48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d10c      	bne.n	8002b24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40000800 	.word	0x40000800

08002b4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e042      	b.n	8002be4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7fe fcde 	bl	8001534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2224      	movs	r2, #36	@ 0x24
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f971 	bl	8002e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	@ 0x28
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d175      	bne.n	8002cf8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_UART_Transmit+0x2c>
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e06e      	b.n	8002cfa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2221      	movs	r2, #33	@ 0x21
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c2a:	f7fe fe41 	bl	80018b0 <HAL_GetTick>
 8002c2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	88fa      	ldrh	r2, [r7, #6]
 8002c34:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	88fa      	ldrh	r2, [r7, #6]
 8002c3a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c44:	d108      	bne.n	8002c58 <HAL_UART_Transmit+0x6c>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d104      	bne.n	8002c58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	61bb      	str	r3, [r7, #24]
 8002c56:	e003      	b.n	8002c60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c60:	e02e      	b.n	8002cc0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2180      	movs	r1, #128	@ 0x80
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f848 	bl	8002d02 <UART_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e03a      	b.n	8002cfa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10b      	bne.n	8002ca2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	3302      	adds	r3, #2
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	e007      	b.n	8002cb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1cb      	bne.n	8002c62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2140      	movs	r1, #64	@ 0x40
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f814 	bl	8002d02 <UART_WaitOnFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e006      	b.n	8002cfa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e000      	b.n	8002cfa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002cf8:	2302      	movs	r3, #2
  }
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3720      	adds	r7, #32
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b086      	sub	sp, #24
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d12:	e03b      	b.n	8002d8c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1a:	d037      	beq.n	8002d8c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1c:	f7fe fdc8 	bl	80018b0 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	6a3a      	ldr	r2, [r7, #32]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d302      	bcc.n	8002d32 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e03a      	b.n	8002dac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d023      	beq.n	8002d8c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b80      	cmp	r3, #128	@ 0x80
 8002d48:	d020      	beq.n	8002d8c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b40      	cmp	r3, #64	@ 0x40
 8002d4e:	d01d      	beq.n	8002d8c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d116      	bne.n	8002d8c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f81d 	bl	8002db4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e00f      	b.n	8002dac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4013      	ands	r3, r2
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	bf0c      	ite	eq
 8002d9c:	2301      	moveq	r3, #1
 8002d9e:	2300      	movne	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d0b4      	beq.n	8002d14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b095      	sub	sp, #84	@ 0x54
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	330c      	adds	r3, #12
 8002dc2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc6:	e853 3f00 	ldrex	r3, [r3]
 8002dca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	330c      	adds	r3, #12
 8002dda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ddc:	643a      	str	r2, [r7, #64]	@ 0x40
 8002dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002de2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002de4:	e841 2300 	strex	r3, r2, [r1]
 8002de8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e5      	bne.n	8002dbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3314      	adds	r3, #20
 8002df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	e853 3f00 	ldrex	r3, [r3]
 8002dfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f023 0301 	bic.w	r3, r3, #1
 8002e06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3314      	adds	r3, #20
 8002e0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e18:	e841 2300 	strex	r3, r2, [r1]
 8002e1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1e5      	bne.n	8002df0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d119      	bne.n	8002e60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	330c      	adds	r3, #12
 8002e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	e853 3f00 	ldrex	r3, [r3]
 8002e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f023 0310 	bic.w	r3, r3, #16
 8002e42:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	330c      	adds	r3, #12
 8002e4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e4c:	61ba      	str	r2, [r7, #24]
 8002e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e50:	6979      	ldr	r1, [r7, #20]
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	e841 2300 	strex	r3, r2, [r1]
 8002e58:	613b      	str	r3, [r7, #16]
   return(result);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1e5      	bne.n	8002e2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e6e:	bf00      	nop
 8002e70:	3754      	adds	r7, #84	@ 0x54
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002eb2:	f023 030c 	bic.w	r3, r3, #12
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699a      	ldr	r2, [r3, #24]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a2c      	ldr	r2, [pc, #176]	@ (8002f8c <UART_SetConfig+0x114>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d103      	bne.n	8002ee8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ee0:	f7ff fb8a 	bl	80025f8 <HAL_RCC_GetPCLK2Freq>
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	e002      	b.n	8002eee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ee8:	f7ff fb72 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 8002eec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009a      	lsls	r2, r3, #2
 8002ef8:	441a      	add	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f04:	4a22      	ldr	r2, [pc, #136]	@ (8002f90 <UART_SetConfig+0x118>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	0119      	lsls	r1, r3, #4
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	009a      	lsls	r2, r3, #2
 8002f18:	441a      	add	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f24:	4b1a      	ldr	r3, [pc, #104]	@ (8002f90 <UART_SetConfig+0x118>)
 8002f26:	fba3 0302 	umull	r0, r3, r3, r2
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2064      	movs	r0, #100	@ 0x64
 8002f2e:	fb00 f303 	mul.w	r3, r0, r3
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	3332      	adds	r3, #50	@ 0x32
 8002f38:	4a15      	ldr	r2, [pc, #84]	@ (8002f90 <UART_SetConfig+0x118>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f44:	4419      	add	r1, r3
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009a      	lsls	r2, r3, #2
 8002f50:	441a      	add	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f90 <UART_SetConfig+0x118>)
 8002f5e:	fba3 0302 	umull	r0, r3, r3, r2
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2064      	movs	r0, #100	@ 0x64
 8002f66:	fb00 f303 	mul.w	r3, r0, r3
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	3332      	adds	r3, #50	@ 0x32
 8002f70:	4a07      	ldr	r2, [pc, #28]	@ (8002f90 <UART_SetConfig+0x118>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	f003 020f 	and.w	r2, r3, #15
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	440a      	add	r2, r1
 8002f82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f84:	bf00      	nop
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40013800 	.word	0x40013800
 8002f90:	51eb851f 	.word	0x51eb851f

08002f94 <__cvt>:
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f9a:	461d      	mov	r5, r3
 8002f9c:	bfbb      	ittet	lt
 8002f9e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002fa2:	461d      	movlt	r5, r3
 8002fa4:	2300      	movge	r3, #0
 8002fa6:	232d      	movlt	r3, #45	@ 0x2d
 8002fa8:	b088      	sub	sp, #32
 8002faa:	4614      	mov	r4, r2
 8002fac:	bfb8      	it	lt
 8002fae:	4614      	movlt	r4, r2
 8002fb0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002fb2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002fb4:	7013      	strb	r3, [r2, #0]
 8002fb6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002fb8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002fbc:	f023 0820 	bic.w	r8, r3, #32
 8002fc0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002fc4:	d005      	beq.n	8002fd2 <__cvt+0x3e>
 8002fc6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002fca:	d100      	bne.n	8002fce <__cvt+0x3a>
 8002fcc:	3601      	adds	r6, #1
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e000      	b.n	8002fd4 <__cvt+0x40>
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	aa07      	add	r2, sp, #28
 8002fd6:	9204      	str	r2, [sp, #16]
 8002fd8:	aa06      	add	r2, sp, #24
 8002fda:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002fde:	e9cd 3600 	strd	r3, r6, [sp]
 8002fe2:	4622      	mov	r2, r4
 8002fe4:	462b      	mov	r3, r5
 8002fe6:	f000 fe6f 	bl	8003cc8 <_dtoa_r>
 8002fea:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002fee:	4607      	mov	r7, r0
 8002ff0:	d119      	bne.n	8003026 <__cvt+0x92>
 8002ff2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002ff4:	07db      	lsls	r3, r3, #31
 8002ff6:	d50e      	bpl.n	8003016 <__cvt+0x82>
 8002ff8:	eb00 0906 	add.w	r9, r0, r6
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2300      	movs	r3, #0
 8003000:	4620      	mov	r0, r4
 8003002:	4629      	mov	r1, r5
 8003004:	f7fd fd84 	bl	8000b10 <__aeabi_dcmpeq>
 8003008:	b108      	cbz	r0, 800300e <__cvt+0x7a>
 800300a:	f8cd 901c 	str.w	r9, [sp, #28]
 800300e:	2230      	movs	r2, #48	@ 0x30
 8003010:	9b07      	ldr	r3, [sp, #28]
 8003012:	454b      	cmp	r3, r9
 8003014:	d31e      	bcc.n	8003054 <__cvt+0xc0>
 8003016:	4638      	mov	r0, r7
 8003018:	9b07      	ldr	r3, [sp, #28]
 800301a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800301c:	1bdb      	subs	r3, r3, r7
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	b008      	add	sp, #32
 8003022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003026:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800302a:	eb00 0906 	add.w	r9, r0, r6
 800302e:	d1e5      	bne.n	8002ffc <__cvt+0x68>
 8003030:	7803      	ldrb	r3, [r0, #0]
 8003032:	2b30      	cmp	r3, #48	@ 0x30
 8003034:	d10a      	bne.n	800304c <__cvt+0xb8>
 8003036:	2200      	movs	r2, #0
 8003038:	2300      	movs	r3, #0
 800303a:	4620      	mov	r0, r4
 800303c:	4629      	mov	r1, r5
 800303e:	f7fd fd67 	bl	8000b10 <__aeabi_dcmpeq>
 8003042:	b918      	cbnz	r0, 800304c <__cvt+0xb8>
 8003044:	f1c6 0601 	rsb	r6, r6, #1
 8003048:	f8ca 6000 	str.w	r6, [sl]
 800304c:	f8da 3000 	ldr.w	r3, [sl]
 8003050:	4499      	add	r9, r3
 8003052:	e7d3      	b.n	8002ffc <__cvt+0x68>
 8003054:	1c59      	adds	r1, r3, #1
 8003056:	9107      	str	r1, [sp, #28]
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	e7d9      	b.n	8003010 <__cvt+0x7c>

0800305c <__exponent>:
 800305c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800305e:	2900      	cmp	r1, #0
 8003060:	bfb6      	itet	lt
 8003062:	232d      	movlt	r3, #45	@ 0x2d
 8003064:	232b      	movge	r3, #43	@ 0x2b
 8003066:	4249      	neglt	r1, r1
 8003068:	2909      	cmp	r1, #9
 800306a:	7002      	strb	r2, [r0, #0]
 800306c:	7043      	strb	r3, [r0, #1]
 800306e:	dd29      	ble.n	80030c4 <__exponent+0x68>
 8003070:	f10d 0307 	add.w	r3, sp, #7
 8003074:	461d      	mov	r5, r3
 8003076:	270a      	movs	r7, #10
 8003078:	fbb1 f6f7 	udiv	r6, r1, r7
 800307c:	461a      	mov	r2, r3
 800307e:	fb07 1416 	mls	r4, r7, r6, r1
 8003082:	3430      	adds	r4, #48	@ 0x30
 8003084:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003088:	460c      	mov	r4, r1
 800308a:	2c63      	cmp	r4, #99	@ 0x63
 800308c:	4631      	mov	r1, r6
 800308e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003092:	dcf1      	bgt.n	8003078 <__exponent+0x1c>
 8003094:	3130      	adds	r1, #48	@ 0x30
 8003096:	1e94      	subs	r4, r2, #2
 8003098:	f803 1c01 	strb.w	r1, [r3, #-1]
 800309c:	4623      	mov	r3, r4
 800309e:	1c41      	adds	r1, r0, #1
 80030a0:	42ab      	cmp	r3, r5
 80030a2:	d30a      	bcc.n	80030ba <__exponent+0x5e>
 80030a4:	f10d 0309 	add.w	r3, sp, #9
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	42ac      	cmp	r4, r5
 80030ac:	bf88      	it	hi
 80030ae:	2300      	movhi	r3, #0
 80030b0:	3302      	adds	r3, #2
 80030b2:	4403      	add	r3, r0
 80030b4:	1a18      	subs	r0, r3, r0
 80030b6:	b003      	add	sp, #12
 80030b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ba:	f813 6b01 	ldrb.w	r6, [r3], #1
 80030be:	f801 6f01 	strb.w	r6, [r1, #1]!
 80030c2:	e7ed      	b.n	80030a0 <__exponent+0x44>
 80030c4:	2330      	movs	r3, #48	@ 0x30
 80030c6:	3130      	adds	r1, #48	@ 0x30
 80030c8:	7083      	strb	r3, [r0, #2]
 80030ca:	70c1      	strb	r1, [r0, #3]
 80030cc:	1d03      	adds	r3, r0, #4
 80030ce:	e7f1      	b.n	80030b4 <__exponent+0x58>

080030d0 <_printf_float>:
 80030d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d4:	b091      	sub	sp, #68	@ 0x44
 80030d6:	460c      	mov	r4, r1
 80030d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80030dc:	4616      	mov	r6, r2
 80030de:	461f      	mov	r7, r3
 80030e0:	4605      	mov	r5, r0
 80030e2:	f000 fce1 	bl	8003aa8 <_localeconv_r>
 80030e6:	6803      	ldr	r3, [r0, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	9308      	str	r3, [sp, #32]
 80030ec:	f7fd f830 	bl	8000150 <strlen>
 80030f0:	2300      	movs	r3, #0
 80030f2:	930e      	str	r3, [sp, #56]	@ 0x38
 80030f4:	f8d8 3000 	ldr.w	r3, [r8]
 80030f8:	9009      	str	r0, [sp, #36]	@ 0x24
 80030fa:	3307      	adds	r3, #7
 80030fc:	f023 0307 	bic.w	r3, r3, #7
 8003100:	f103 0208 	add.w	r2, r3, #8
 8003104:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003108:	f8d4 b000 	ldr.w	fp, [r4]
 800310c:	f8c8 2000 	str.w	r2, [r8]
 8003110:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003114:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003118:	930b      	str	r3, [sp, #44]	@ 0x2c
 800311a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800311e:	f04f 32ff 	mov.w	r2, #4294967295
 8003122:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003126:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800312a:	4b9c      	ldr	r3, [pc, #624]	@ (800339c <_printf_float+0x2cc>)
 800312c:	f7fd fd22 	bl	8000b74 <__aeabi_dcmpun>
 8003130:	bb70      	cbnz	r0, 8003190 <_printf_float+0xc0>
 8003132:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003136:	f04f 32ff 	mov.w	r2, #4294967295
 800313a:	4b98      	ldr	r3, [pc, #608]	@ (800339c <_printf_float+0x2cc>)
 800313c:	f7fd fcfc 	bl	8000b38 <__aeabi_dcmple>
 8003140:	bb30      	cbnz	r0, 8003190 <_printf_float+0xc0>
 8003142:	2200      	movs	r2, #0
 8003144:	2300      	movs	r3, #0
 8003146:	4640      	mov	r0, r8
 8003148:	4649      	mov	r1, r9
 800314a:	f7fd fceb 	bl	8000b24 <__aeabi_dcmplt>
 800314e:	b110      	cbz	r0, 8003156 <_printf_float+0x86>
 8003150:	232d      	movs	r3, #45	@ 0x2d
 8003152:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003156:	4a92      	ldr	r2, [pc, #584]	@ (80033a0 <_printf_float+0x2d0>)
 8003158:	4b92      	ldr	r3, [pc, #584]	@ (80033a4 <_printf_float+0x2d4>)
 800315a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800315e:	bf8c      	ite	hi
 8003160:	4690      	movhi	r8, r2
 8003162:	4698      	movls	r8, r3
 8003164:	2303      	movs	r3, #3
 8003166:	f04f 0900 	mov.w	r9, #0
 800316a:	6123      	str	r3, [r4, #16]
 800316c:	f02b 0304 	bic.w	r3, fp, #4
 8003170:	6023      	str	r3, [r4, #0]
 8003172:	4633      	mov	r3, r6
 8003174:	4621      	mov	r1, r4
 8003176:	4628      	mov	r0, r5
 8003178:	9700      	str	r7, [sp, #0]
 800317a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800317c:	f000 f9d4 	bl	8003528 <_printf_common>
 8003180:	3001      	adds	r0, #1
 8003182:	f040 8090 	bne.w	80032a6 <_printf_float+0x1d6>
 8003186:	f04f 30ff 	mov.w	r0, #4294967295
 800318a:	b011      	add	sp, #68	@ 0x44
 800318c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003190:	4642      	mov	r2, r8
 8003192:	464b      	mov	r3, r9
 8003194:	4640      	mov	r0, r8
 8003196:	4649      	mov	r1, r9
 8003198:	f7fd fcec 	bl	8000b74 <__aeabi_dcmpun>
 800319c:	b148      	cbz	r0, 80031b2 <_printf_float+0xe2>
 800319e:	464b      	mov	r3, r9
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bfb8      	it	lt
 80031a4:	232d      	movlt	r3, #45	@ 0x2d
 80031a6:	4a80      	ldr	r2, [pc, #512]	@ (80033a8 <_printf_float+0x2d8>)
 80031a8:	bfb8      	it	lt
 80031aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80031ae:	4b7f      	ldr	r3, [pc, #508]	@ (80033ac <_printf_float+0x2dc>)
 80031b0:	e7d3      	b.n	800315a <_printf_float+0x8a>
 80031b2:	6863      	ldr	r3, [r4, #4]
 80031b4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	d13f      	bne.n	800323c <_printf_float+0x16c>
 80031bc:	2306      	movs	r3, #6
 80031be:	6063      	str	r3, [r4, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80031c6:	6023      	str	r3, [r4, #0]
 80031c8:	9206      	str	r2, [sp, #24]
 80031ca:	aa0e      	add	r2, sp, #56	@ 0x38
 80031cc:	e9cd a204 	strd	sl, r2, [sp, #16]
 80031d0:	aa0d      	add	r2, sp, #52	@ 0x34
 80031d2:	9203      	str	r2, [sp, #12]
 80031d4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80031d8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80031dc:	6863      	ldr	r3, [r4, #4]
 80031de:	4642      	mov	r2, r8
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	4628      	mov	r0, r5
 80031e4:	464b      	mov	r3, r9
 80031e6:	910a      	str	r1, [sp, #40]	@ 0x28
 80031e8:	f7ff fed4 	bl	8002f94 <__cvt>
 80031ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80031ee:	4680      	mov	r8, r0
 80031f0:	2947      	cmp	r1, #71	@ 0x47
 80031f2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80031f4:	d128      	bne.n	8003248 <_printf_float+0x178>
 80031f6:	1cc8      	adds	r0, r1, #3
 80031f8:	db02      	blt.n	8003200 <_printf_float+0x130>
 80031fa:	6863      	ldr	r3, [r4, #4]
 80031fc:	4299      	cmp	r1, r3
 80031fe:	dd40      	ble.n	8003282 <_printf_float+0x1b2>
 8003200:	f1aa 0a02 	sub.w	sl, sl, #2
 8003204:	fa5f fa8a 	uxtb.w	sl, sl
 8003208:	4652      	mov	r2, sl
 800320a:	3901      	subs	r1, #1
 800320c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003210:	910d      	str	r1, [sp, #52]	@ 0x34
 8003212:	f7ff ff23 	bl	800305c <__exponent>
 8003216:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003218:	4681      	mov	r9, r0
 800321a:	1813      	adds	r3, r2, r0
 800321c:	2a01      	cmp	r2, #1
 800321e:	6123      	str	r3, [r4, #16]
 8003220:	dc02      	bgt.n	8003228 <_printf_float+0x158>
 8003222:	6822      	ldr	r2, [r4, #0]
 8003224:	07d2      	lsls	r2, r2, #31
 8003226:	d501      	bpl.n	800322c <_printf_float+0x15c>
 8003228:	3301      	adds	r3, #1
 800322a:	6123      	str	r3, [r4, #16]
 800322c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003230:	2b00      	cmp	r3, #0
 8003232:	d09e      	beq.n	8003172 <_printf_float+0xa2>
 8003234:	232d      	movs	r3, #45	@ 0x2d
 8003236:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800323a:	e79a      	b.n	8003172 <_printf_float+0xa2>
 800323c:	2947      	cmp	r1, #71	@ 0x47
 800323e:	d1bf      	bne.n	80031c0 <_printf_float+0xf0>
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1bd      	bne.n	80031c0 <_printf_float+0xf0>
 8003244:	2301      	movs	r3, #1
 8003246:	e7ba      	b.n	80031be <_printf_float+0xee>
 8003248:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800324c:	d9dc      	bls.n	8003208 <_printf_float+0x138>
 800324e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003252:	d118      	bne.n	8003286 <_printf_float+0x1b6>
 8003254:	2900      	cmp	r1, #0
 8003256:	6863      	ldr	r3, [r4, #4]
 8003258:	dd0b      	ble.n	8003272 <_printf_float+0x1a2>
 800325a:	6121      	str	r1, [r4, #16]
 800325c:	b913      	cbnz	r3, 8003264 <_printf_float+0x194>
 800325e:	6822      	ldr	r2, [r4, #0]
 8003260:	07d0      	lsls	r0, r2, #31
 8003262:	d502      	bpl.n	800326a <_printf_float+0x19a>
 8003264:	3301      	adds	r3, #1
 8003266:	440b      	add	r3, r1
 8003268:	6123      	str	r3, [r4, #16]
 800326a:	f04f 0900 	mov.w	r9, #0
 800326e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003270:	e7dc      	b.n	800322c <_printf_float+0x15c>
 8003272:	b913      	cbnz	r3, 800327a <_printf_float+0x1aa>
 8003274:	6822      	ldr	r2, [r4, #0]
 8003276:	07d2      	lsls	r2, r2, #31
 8003278:	d501      	bpl.n	800327e <_printf_float+0x1ae>
 800327a:	3302      	adds	r3, #2
 800327c:	e7f4      	b.n	8003268 <_printf_float+0x198>
 800327e:	2301      	movs	r3, #1
 8003280:	e7f2      	b.n	8003268 <_printf_float+0x198>
 8003282:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003286:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003288:	4299      	cmp	r1, r3
 800328a:	db05      	blt.n	8003298 <_printf_float+0x1c8>
 800328c:	6823      	ldr	r3, [r4, #0]
 800328e:	6121      	str	r1, [r4, #16]
 8003290:	07d8      	lsls	r0, r3, #31
 8003292:	d5ea      	bpl.n	800326a <_printf_float+0x19a>
 8003294:	1c4b      	adds	r3, r1, #1
 8003296:	e7e7      	b.n	8003268 <_printf_float+0x198>
 8003298:	2900      	cmp	r1, #0
 800329a:	bfcc      	ite	gt
 800329c:	2201      	movgt	r2, #1
 800329e:	f1c1 0202 	rsble	r2, r1, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	e7e0      	b.n	8003268 <_printf_float+0x198>
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	055a      	lsls	r2, r3, #21
 80032aa:	d407      	bmi.n	80032bc <_printf_float+0x1ec>
 80032ac:	6923      	ldr	r3, [r4, #16]
 80032ae:	4642      	mov	r2, r8
 80032b0:	4631      	mov	r1, r6
 80032b2:	4628      	mov	r0, r5
 80032b4:	47b8      	blx	r7
 80032b6:	3001      	adds	r0, #1
 80032b8:	d12b      	bne.n	8003312 <_printf_float+0x242>
 80032ba:	e764      	b.n	8003186 <_printf_float+0xb6>
 80032bc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80032c0:	f240 80dc 	bls.w	800347c <_printf_float+0x3ac>
 80032c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80032c8:	2200      	movs	r2, #0
 80032ca:	2300      	movs	r3, #0
 80032cc:	f7fd fc20 	bl	8000b10 <__aeabi_dcmpeq>
 80032d0:	2800      	cmp	r0, #0
 80032d2:	d033      	beq.n	800333c <_printf_float+0x26c>
 80032d4:	2301      	movs	r3, #1
 80032d6:	4631      	mov	r1, r6
 80032d8:	4628      	mov	r0, r5
 80032da:	4a35      	ldr	r2, [pc, #212]	@ (80033b0 <_printf_float+0x2e0>)
 80032dc:	47b8      	blx	r7
 80032de:	3001      	adds	r0, #1
 80032e0:	f43f af51 	beq.w	8003186 <_printf_float+0xb6>
 80032e4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80032e8:	4543      	cmp	r3, r8
 80032ea:	db02      	blt.n	80032f2 <_printf_float+0x222>
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	07d8      	lsls	r0, r3, #31
 80032f0:	d50f      	bpl.n	8003312 <_printf_float+0x242>
 80032f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80032f6:	4631      	mov	r1, r6
 80032f8:	4628      	mov	r0, r5
 80032fa:	47b8      	blx	r7
 80032fc:	3001      	adds	r0, #1
 80032fe:	f43f af42 	beq.w	8003186 <_printf_float+0xb6>
 8003302:	f04f 0900 	mov.w	r9, #0
 8003306:	f108 38ff 	add.w	r8, r8, #4294967295
 800330a:	f104 0a1a 	add.w	sl, r4, #26
 800330e:	45c8      	cmp	r8, r9
 8003310:	dc09      	bgt.n	8003326 <_printf_float+0x256>
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	079b      	lsls	r3, r3, #30
 8003316:	f100 8102 	bmi.w	800351e <_printf_float+0x44e>
 800331a:	68e0      	ldr	r0, [r4, #12]
 800331c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800331e:	4298      	cmp	r0, r3
 8003320:	bfb8      	it	lt
 8003322:	4618      	movlt	r0, r3
 8003324:	e731      	b.n	800318a <_printf_float+0xba>
 8003326:	2301      	movs	r3, #1
 8003328:	4652      	mov	r2, sl
 800332a:	4631      	mov	r1, r6
 800332c:	4628      	mov	r0, r5
 800332e:	47b8      	blx	r7
 8003330:	3001      	adds	r0, #1
 8003332:	f43f af28 	beq.w	8003186 <_printf_float+0xb6>
 8003336:	f109 0901 	add.w	r9, r9, #1
 800333a:	e7e8      	b.n	800330e <_printf_float+0x23e>
 800333c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800333e:	2b00      	cmp	r3, #0
 8003340:	dc38      	bgt.n	80033b4 <_printf_float+0x2e4>
 8003342:	2301      	movs	r3, #1
 8003344:	4631      	mov	r1, r6
 8003346:	4628      	mov	r0, r5
 8003348:	4a19      	ldr	r2, [pc, #100]	@ (80033b0 <_printf_float+0x2e0>)
 800334a:	47b8      	blx	r7
 800334c:	3001      	adds	r0, #1
 800334e:	f43f af1a 	beq.w	8003186 <_printf_float+0xb6>
 8003352:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003356:	ea59 0303 	orrs.w	r3, r9, r3
 800335a:	d102      	bne.n	8003362 <_printf_float+0x292>
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	07d9      	lsls	r1, r3, #31
 8003360:	d5d7      	bpl.n	8003312 <_printf_float+0x242>
 8003362:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003366:	4631      	mov	r1, r6
 8003368:	4628      	mov	r0, r5
 800336a:	47b8      	blx	r7
 800336c:	3001      	adds	r0, #1
 800336e:	f43f af0a 	beq.w	8003186 <_printf_float+0xb6>
 8003372:	f04f 0a00 	mov.w	sl, #0
 8003376:	f104 0b1a 	add.w	fp, r4, #26
 800337a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800337c:	425b      	negs	r3, r3
 800337e:	4553      	cmp	r3, sl
 8003380:	dc01      	bgt.n	8003386 <_printf_float+0x2b6>
 8003382:	464b      	mov	r3, r9
 8003384:	e793      	b.n	80032ae <_printf_float+0x1de>
 8003386:	2301      	movs	r3, #1
 8003388:	465a      	mov	r2, fp
 800338a:	4631      	mov	r1, r6
 800338c:	4628      	mov	r0, r5
 800338e:	47b8      	blx	r7
 8003390:	3001      	adds	r0, #1
 8003392:	f43f aef8 	beq.w	8003186 <_printf_float+0xb6>
 8003396:	f10a 0a01 	add.w	sl, sl, #1
 800339a:	e7ee      	b.n	800337a <_printf_float+0x2aa>
 800339c:	7fefffff 	.word	0x7fefffff
 80033a0:	08005cb6 	.word	0x08005cb6
 80033a4:	08005cb2 	.word	0x08005cb2
 80033a8:	08005cbe 	.word	0x08005cbe
 80033ac:	08005cba 	.word	0x08005cba
 80033b0:	08005cc2 	.word	0x08005cc2
 80033b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033b6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80033ba:	4553      	cmp	r3, sl
 80033bc:	bfa8      	it	ge
 80033be:	4653      	movge	r3, sl
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	4699      	mov	r9, r3
 80033c4:	dc36      	bgt.n	8003434 <_printf_float+0x364>
 80033c6:	f04f 0b00 	mov.w	fp, #0
 80033ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80033ce:	f104 021a 	add.w	r2, r4, #26
 80033d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80033d6:	eba3 0309 	sub.w	r3, r3, r9
 80033da:	455b      	cmp	r3, fp
 80033dc:	dc31      	bgt.n	8003442 <_printf_float+0x372>
 80033de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80033e0:	459a      	cmp	sl, r3
 80033e2:	dc3a      	bgt.n	800345a <_printf_float+0x38a>
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	07da      	lsls	r2, r3, #31
 80033e8:	d437      	bmi.n	800345a <_printf_float+0x38a>
 80033ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80033ec:	ebaa 0903 	sub.w	r9, sl, r3
 80033f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80033f2:	ebaa 0303 	sub.w	r3, sl, r3
 80033f6:	4599      	cmp	r9, r3
 80033f8:	bfa8      	it	ge
 80033fa:	4699      	movge	r9, r3
 80033fc:	f1b9 0f00 	cmp.w	r9, #0
 8003400:	dc33      	bgt.n	800346a <_printf_float+0x39a>
 8003402:	f04f 0800 	mov.w	r8, #0
 8003406:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800340a:	f104 0b1a 	add.w	fp, r4, #26
 800340e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003410:	ebaa 0303 	sub.w	r3, sl, r3
 8003414:	eba3 0309 	sub.w	r3, r3, r9
 8003418:	4543      	cmp	r3, r8
 800341a:	f77f af7a 	ble.w	8003312 <_printf_float+0x242>
 800341e:	2301      	movs	r3, #1
 8003420:	465a      	mov	r2, fp
 8003422:	4631      	mov	r1, r6
 8003424:	4628      	mov	r0, r5
 8003426:	47b8      	blx	r7
 8003428:	3001      	adds	r0, #1
 800342a:	f43f aeac 	beq.w	8003186 <_printf_float+0xb6>
 800342e:	f108 0801 	add.w	r8, r8, #1
 8003432:	e7ec      	b.n	800340e <_printf_float+0x33e>
 8003434:	4642      	mov	r2, r8
 8003436:	4631      	mov	r1, r6
 8003438:	4628      	mov	r0, r5
 800343a:	47b8      	blx	r7
 800343c:	3001      	adds	r0, #1
 800343e:	d1c2      	bne.n	80033c6 <_printf_float+0x2f6>
 8003440:	e6a1      	b.n	8003186 <_printf_float+0xb6>
 8003442:	2301      	movs	r3, #1
 8003444:	4631      	mov	r1, r6
 8003446:	4628      	mov	r0, r5
 8003448:	920a      	str	r2, [sp, #40]	@ 0x28
 800344a:	47b8      	blx	r7
 800344c:	3001      	adds	r0, #1
 800344e:	f43f ae9a 	beq.w	8003186 <_printf_float+0xb6>
 8003452:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003454:	f10b 0b01 	add.w	fp, fp, #1
 8003458:	e7bb      	b.n	80033d2 <_printf_float+0x302>
 800345a:	4631      	mov	r1, r6
 800345c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003460:	4628      	mov	r0, r5
 8003462:	47b8      	blx	r7
 8003464:	3001      	adds	r0, #1
 8003466:	d1c0      	bne.n	80033ea <_printf_float+0x31a>
 8003468:	e68d      	b.n	8003186 <_printf_float+0xb6>
 800346a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800346c:	464b      	mov	r3, r9
 800346e:	4631      	mov	r1, r6
 8003470:	4628      	mov	r0, r5
 8003472:	4442      	add	r2, r8
 8003474:	47b8      	blx	r7
 8003476:	3001      	adds	r0, #1
 8003478:	d1c3      	bne.n	8003402 <_printf_float+0x332>
 800347a:	e684      	b.n	8003186 <_printf_float+0xb6>
 800347c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003480:	f1ba 0f01 	cmp.w	sl, #1
 8003484:	dc01      	bgt.n	800348a <_printf_float+0x3ba>
 8003486:	07db      	lsls	r3, r3, #31
 8003488:	d536      	bpl.n	80034f8 <_printf_float+0x428>
 800348a:	2301      	movs	r3, #1
 800348c:	4642      	mov	r2, r8
 800348e:	4631      	mov	r1, r6
 8003490:	4628      	mov	r0, r5
 8003492:	47b8      	blx	r7
 8003494:	3001      	adds	r0, #1
 8003496:	f43f ae76 	beq.w	8003186 <_printf_float+0xb6>
 800349a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800349e:	4631      	mov	r1, r6
 80034a0:	4628      	mov	r0, r5
 80034a2:	47b8      	blx	r7
 80034a4:	3001      	adds	r0, #1
 80034a6:	f43f ae6e 	beq.w	8003186 <_printf_float+0xb6>
 80034aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80034ae:	2200      	movs	r2, #0
 80034b0:	2300      	movs	r3, #0
 80034b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80034b6:	f7fd fb2b 	bl	8000b10 <__aeabi_dcmpeq>
 80034ba:	b9c0      	cbnz	r0, 80034ee <_printf_float+0x41e>
 80034bc:	4653      	mov	r3, sl
 80034be:	f108 0201 	add.w	r2, r8, #1
 80034c2:	4631      	mov	r1, r6
 80034c4:	4628      	mov	r0, r5
 80034c6:	47b8      	blx	r7
 80034c8:	3001      	adds	r0, #1
 80034ca:	d10c      	bne.n	80034e6 <_printf_float+0x416>
 80034cc:	e65b      	b.n	8003186 <_printf_float+0xb6>
 80034ce:	2301      	movs	r3, #1
 80034d0:	465a      	mov	r2, fp
 80034d2:	4631      	mov	r1, r6
 80034d4:	4628      	mov	r0, r5
 80034d6:	47b8      	blx	r7
 80034d8:	3001      	adds	r0, #1
 80034da:	f43f ae54 	beq.w	8003186 <_printf_float+0xb6>
 80034de:	f108 0801 	add.w	r8, r8, #1
 80034e2:	45d0      	cmp	r8, sl
 80034e4:	dbf3      	blt.n	80034ce <_printf_float+0x3fe>
 80034e6:	464b      	mov	r3, r9
 80034e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80034ec:	e6e0      	b.n	80032b0 <_printf_float+0x1e0>
 80034ee:	f04f 0800 	mov.w	r8, #0
 80034f2:	f104 0b1a 	add.w	fp, r4, #26
 80034f6:	e7f4      	b.n	80034e2 <_printf_float+0x412>
 80034f8:	2301      	movs	r3, #1
 80034fa:	4642      	mov	r2, r8
 80034fc:	e7e1      	b.n	80034c2 <_printf_float+0x3f2>
 80034fe:	2301      	movs	r3, #1
 8003500:	464a      	mov	r2, r9
 8003502:	4631      	mov	r1, r6
 8003504:	4628      	mov	r0, r5
 8003506:	47b8      	blx	r7
 8003508:	3001      	adds	r0, #1
 800350a:	f43f ae3c 	beq.w	8003186 <_printf_float+0xb6>
 800350e:	f108 0801 	add.w	r8, r8, #1
 8003512:	68e3      	ldr	r3, [r4, #12]
 8003514:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003516:	1a5b      	subs	r3, r3, r1
 8003518:	4543      	cmp	r3, r8
 800351a:	dcf0      	bgt.n	80034fe <_printf_float+0x42e>
 800351c:	e6fd      	b.n	800331a <_printf_float+0x24a>
 800351e:	f04f 0800 	mov.w	r8, #0
 8003522:	f104 0919 	add.w	r9, r4, #25
 8003526:	e7f4      	b.n	8003512 <_printf_float+0x442>

08003528 <_printf_common>:
 8003528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800352c:	4616      	mov	r6, r2
 800352e:	4698      	mov	r8, r3
 8003530:	688a      	ldr	r2, [r1, #8]
 8003532:	690b      	ldr	r3, [r1, #16]
 8003534:	4607      	mov	r7, r0
 8003536:	4293      	cmp	r3, r2
 8003538:	bfb8      	it	lt
 800353a:	4613      	movlt	r3, r2
 800353c:	6033      	str	r3, [r6, #0]
 800353e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003542:	460c      	mov	r4, r1
 8003544:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003548:	b10a      	cbz	r2, 800354e <_printf_common+0x26>
 800354a:	3301      	adds	r3, #1
 800354c:	6033      	str	r3, [r6, #0]
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	0699      	lsls	r1, r3, #26
 8003552:	bf42      	ittt	mi
 8003554:	6833      	ldrmi	r3, [r6, #0]
 8003556:	3302      	addmi	r3, #2
 8003558:	6033      	strmi	r3, [r6, #0]
 800355a:	6825      	ldr	r5, [r4, #0]
 800355c:	f015 0506 	ands.w	r5, r5, #6
 8003560:	d106      	bne.n	8003570 <_printf_common+0x48>
 8003562:	f104 0a19 	add.w	sl, r4, #25
 8003566:	68e3      	ldr	r3, [r4, #12]
 8003568:	6832      	ldr	r2, [r6, #0]
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	42ab      	cmp	r3, r5
 800356e:	dc2b      	bgt.n	80035c8 <_printf_common+0xa0>
 8003570:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003574:	6822      	ldr	r2, [r4, #0]
 8003576:	3b00      	subs	r3, #0
 8003578:	bf18      	it	ne
 800357a:	2301      	movne	r3, #1
 800357c:	0692      	lsls	r2, r2, #26
 800357e:	d430      	bmi.n	80035e2 <_printf_common+0xba>
 8003580:	4641      	mov	r1, r8
 8003582:	4638      	mov	r0, r7
 8003584:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003588:	47c8      	blx	r9
 800358a:	3001      	adds	r0, #1
 800358c:	d023      	beq.n	80035d6 <_printf_common+0xae>
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	6922      	ldr	r2, [r4, #16]
 8003592:	f003 0306 	and.w	r3, r3, #6
 8003596:	2b04      	cmp	r3, #4
 8003598:	bf14      	ite	ne
 800359a:	2500      	movne	r5, #0
 800359c:	6833      	ldreq	r3, [r6, #0]
 800359e:	f04f 0600 	mov.w	r6, #0
 80035a2:	bf08      	it	eq
 80035a4:	68e5      	ldreq	r5, [r4, #12]
 80035a6:	f104 041a 	add.w	r4, r4, #26
 80035aa:	bf08      	it	eq
 80035ac:	1aed      	subeq	r5, r5, r3
 80035ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80035b2:	bf08      	it	eq
 80035b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035b8:	4293      	cmp	r3, r2
 80035ba:	bfc4      	itt	gt
 80035bc:	1a9b      	subgt	r3, r3, r2
 80035be:	18ed      	addgt	r5, r5, r3
 80035c0:	42b5      	cmp	r5, r6
 80035c2:	d11a      	bne.n	80035fa <_printf_common+0xd2>
 80035c4:	2000      	movs	r0, #0
 80035c6:	e008      	b.n	80035da <_printf_common+0xb2>
 80035c8:	2301      	movs	r3, #1
 80035ca:	4652      	mov	r2, sl
 80035cc:	4641      	mov	r1, r8
 80035ce:	4638      	mov	r0, r7
 80035d0:	47c8      	blx	r9
 80035d2:	3001      	adds	r0, #1
 80035d4:	d103      	bne.n	80035de <_printf_common+0xb6>
 80035d6:	f04f 30ff 	mov.w	r0, #4294967295
 80035da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035de:	3501      	adds	r5, #1
 80035e0:	e7c1      	b.n	8003566 <_printf_common+0x3e>
 80035e2:	2030      	movs	r0, #48	@ 0x30
 80035e4:	18e1      	adds	r1, r4, r3
 80035e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035f0:	4422      	add	r2, r4
 80035f2:	3302      	adds	r3, #2
 80035f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035f8:	e7c2      	b.n	8003580 <_printf_common+0x58>
 80035fa:	2301      	movs	r3, #1
 80035fc:	4622      	mov	r2, r4
 80035fe:	4641      	mov	r1, r8
 8003600:	4638      	mov	r0, r7
 8003602:	47c8      	blx	r9
 8003604:	3001      	adds	r0, #1
 8003606:	d0e6      	beq.n	80035d6 <_printf_common+0xae>
 8003608:	3601      	adds	r6, #1
 800360a:	e7d9      	b.n	80035c0 <_printf_common+0x98>

0800360c <_printf_i>:
 800360c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003610:	7e0f      	ldrb	r7, [r1, #24]
 8003612:	4691      	mov	r9, r2
 8003614:	2f78      	cmp	r7, #120	@ 0x78
 8003616:	4680      	mov	r8, r0
 8003618:	460c      	mov	r4, r1
 800361a:	469a      	mov	sl, r3
 800361c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800361e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003622:	d807      	bhi.n	8003634 <_printf_i+0x28>
 8003624:	2f62      	cmp	r7, #98	@ 0x62
 8003626:	d80a      	bhi.n	800363e <_printf_i+0x32>
 8003628:	2f00      	cmp	r7, #0
 800362a:	f000 80d1 	beq.w	80037d0 <_printf_i+0x1c4>
 800362e:	2f58      	cmp	r7, #88	@ 0x58
 8003630:	f000 80b8 	beq.w	80037a4 <_printf_i+0x198>
 8003634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003638:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800363c:	e03a      	b.n	80036b4 <_printf_i+0xa8>
 800363e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003642:	2b15      	cmp	r3, #21
 8003644:	d8f6      	bhi.n	8003634 <_printf_i+0x28>
 8003646:	a101      	add	r1, pc, #4	@ (adr r1, 800364c <_printf_i+0x40>)
 8003648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800364c:	080036a5 	.word	0x080036a5
 8003650:	080036b9 	.word	0x080036b9
 8003654:	08003635 	.word	0x08003635
 8003658:	08003635 	.word	0x08003635
 800365c:	08003635 	.word	0x08003635
 8003660:	08003635 	.word	0x08003635
 8003664:	080036b9 	.word	0x080036b9
 8003668:	08003635 	.word	0x08003635
 800366c:	08003635 	.word	0x08003635
 8003670:	08003635 	.word	0x08003635
 8003674:	08003635 	.word	0x08003635
 8003678:	080037b7 	.word	0x080037b7
 800367c:	080036e3 	.word	0x080036e3
 8003680:	08003771 	.word	0x08003771
 8003684:	08003635 	.word	0x08003635
 8003688:	08003635 	.word	0x08003635
 800368c:	080037d9 	.word	0x080037d9
 8003690:	08003635 	.word	0x08003635
 8003694:	080036e3 	.word	0x080036e3
 8003698:	08003635 	.word	0x08003635
 800369c:	08003635 	.word	0x08003635
 80036a0:	08003779 	.word	0x08003779
 80036a4:	6833      	ldr	r3, [r6, #0]
 80036a6:	1d1a      	adds	r2, r3, #4
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6032      	str	r2, [r6, #0]
 80036ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036b4:	2301      	movs	r3, #1
 80036b6:	e09c      	b.n	80037f2 <_printf_i+0x1e6>
 80036b8:	6833      	ldr	r3, [r6, #0]
 80036ba:	6820      	ldr	r0, [r4, #0]
 80036bc:	1d19      	adds	r1, r3, #4
 80036be:	6031      	str	r1, [r6, #0]
 80036c0:	0606      	lsls	r6, r0, #24
 80036c2:	d501      	bpl.n	80036c8 <_printf_i+0xbc>
 80036c4:	681d      	ldr	r5, [r3, #0]
 80036c6:	e003      	b.n	80036d0 <_printf_i+0xc4>
 80036c8:	0645      	lsls	r5, r0, #25
 80036ca:	d5fb      	bpl.n	80036c4 <_printf_i+0xb8>
 80036cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036d0:	2d00      	cmp	r5, #0
 80036d2:	da03      	bge.n	80036dc <_printf_i+0xd0>
 80036d4:	232d      	movs	r3, #45	@ 0x2d
 80036d6:	426d      	negs	r5, r5
 80036d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036dc:	230a      	movs	r3, #10
 80036de:	4858      	ldr	r0, [pc, #352]	@ (8003840 <_printf_i+0x234>)
 80036e0:	e011      	b.n	8003706 <_printf_i+0xfa>
 80036e2:	6821      	ldr	r1, [r4, #0]
 80036e4:	6833      	ldr	r3, [r6, #0]
 80036e6:	0608      	lsls	r0, r1, #24
 80036e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80036ec:	d402      	bmi.n	80036f4 <_printf_i+0xe8>
 80036ee:	0649      	lsls	r1, r1, #25
 80036f0:	bf48      	it	mi
 80036f2:	b2ad      	uxthmi	r5, r5
 80036f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80036f6:	6033      	str	r3, [r6, #0]
 80036f8:	bf14      	ite	ne
 80036fa:	230a      	movne	r3, #10
 80036fc:	2308      	moveq	r3, #8
 80036fe:	4850      	ldr	r0, [pc, #320]	@ (8003840 <_printf_i+0x234>)
 8003700:	2100      	movs	r1, #0
 8003702:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003706:	6866      	ldr	r6, [r4, #4]
 8003708:	2e00      	cmp	r6, #0
 800370a:	60a6      	str	r6, [r4, #8]
 800370c:	db05      	blt.n	800371a <_printf_i+0x10e>
 800370e:	6821      	ldr	r1, [r4, #0]
 8003710:	432e      	orrs	r6, r5
 8003712:	f021 0104 	bic.w	r1, r1, #4
 8003716:	6021      	str	r1, [r4, #0]
 8003718:	d04b      	beq.n	80037b2 <_printf_i+0x1a6>
 800371a:	4616      	mov	r6, r2
 800371c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003720:	fb03 5711 	mls	r7, r3, r1, r5
 8003724:	5dc7      	ldrb	r7, [r0, r7]
 8003726:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800372a:	462f      	mov	r7, r5
 800372c:	42bb      	cmp	r3, r7
 800372e:	460d      	mov	r5, r1
 8003730:	d9f4      	bls.n	800371c <_printf_i+0x110>
 8003732:	2b08      	cmp	r3, #8
 8003734:	d10b      	bne.n	800374e <_printf_i+0x142>
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	07df      	lsls	r7, r3, #31
 800373a:	d508      	bpl.n	800374e <_printf_i+0x142>
 800373c:	6923      	ldr	r3, [r4, #16]
 800373e:	6861      	ldr	r1, [r4, #4]
 8003740:	4299      	cmp	r1, r3
 8003742:	bfde      	ittt	le
 8003744:	2330      	movle	r3, #48	@ 0x30
 8003746:	f806 3c01 	strble.w	r3, [r6, #-1]
 800374a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800374e:	1b92      	subs	r2, r2, r6
 8003750:	6122      	str	r2, [r4, #16]
 8003752:	464b      	mov	r3, r9
 8003754:	4621      	mov	r1, r4
 8003756:	4640      	mov	r0, r8
 8003758:	f8cd a000 	str.w	sl, [sp]
 800375c:	aa03      	add	r2, sp, #12
 800375e:	f7ff fee3 	bl	8003528 <_printf_common>
 8003762:	3001      	adds	r0, #1
 8003764:	d14a      	bne.n	80037fc <_printf_i+0x1f0>
 8003766:	f04f 30ff 	mov.w	r0, #4294967295
 800376a:	b004      	add	sp, #16
 800376c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	f043 0320 	orr.w	r3, r3, #32
 8003776:	6023      	str	r3, [r4, #0]
 8003778:	2778      	movs	r7, #120	@ 0x78
 800377a:	4832      	ldr	r0, [pc, #200]	@ (8003844 <_printf_i+0x238>)
 800377c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003780:	6823      	ldr	r3, [r4, #0]
 8003782:	6831      	ldr	r1, [r6, #0]
 8003784:	061f      	lsls	r7, r3, #24
 8003786:	f851 5b04 	ldr.w	r5, [r1], #4
 800378a:	d402      	bmi.n	8003792 <_printf_i+0x186>
 800378c:	065f      	lsls	r7, r3, #25
 800378e:	bf48      	it	mi
 8003790:	b2ad      	uxthmi	r5, r5
 8003792:	6031      	str	r1, [r6, #0]
 8003794:	07d9      	lsls	r1, r3, #31
 8003796:	bf44      	itt	mi
 8003798:	f043 0320 	orrmi.w	r3, r3, #32
 800379c:	6023      	strmi	r3, [r4, #0]
 800379e:	b11d      	cbz	r5, 80037a8 <_printf_i+0x19c>
 80037a0:	2310      	movs	r3, #16
 80037a2:	e7ad      	b.n	8003700 <_printf_i+0xf4>
 80037a4:	4826      	ldr	r0, [pc, #152]	@ (8003840 <_printf_i+0x234>)
 80037a6:	e7e9      	b.n	800377c <_printf_i+0x170>
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	f023 0320 	bic.w	r3, r3, #32
 80037ae:	6023      	str	r3, [r4, #0]
 80037b0:	e7f6      	b.n	80037a0 <_printf_i+0x194>
 80037b2:	4616      	mov	r6, r2
 80037b4:	e7bd      	b.n	8003732 <_printf_i+0x126>
 80037b6:	6833      	ldr	r3, [r6, #0]
 80037b8:	6825      	ldr	r5, [r4, #0]
 80037ba:	1d18      	adds	r0, r3, #4
 80037bc:	6961      	ldr	r1, [r4, #20]
 80037be:	6030      	str	r0, [r6, #0]
 80037c0:	062e      	lsls	r6, r5, #24
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	d501      	bpl.n	80037ca <_printf_i+0x1be>
 80037c6:	6019      	str	r1, [r3, #0]
 80037c8:	e002      	b.n	80037d0 <_printf_i+0x1c4>
 80037ca:	0668      	lsls	r0, r5, #25
 80037cc:	d5fb      	bpl.n	80037c6 <_printf_i+0x1ba>
 80037ce:	8019      	strh	r1, [r3, #0]
 80037d0:	2300      	movs	r3, #0
 80037d2:	4616      	mov	r6, r2
 80037d4:	6123      	str	r3, [r4, #16]
 80037d6:	e7bc      	b.n	8003752 <_printf_i+0x146>
 80037d8:	6833      	ldr	r3, [r6, #0]
 80037da:	2100      	movs	r1, #0
 80037dc:	1d1a      	adds	r2, r3, #4
 80037de:	6032      	str	r2, [r6, #0]
 80037e0:	681e      	ldr	r6, [r3, #0]
 80037e2:	6862      	ldr	r2, [r4, #4]
 80037e4:	4630      	mov	r0, r6
 80037e6:	f000 f9d6 	bl	8003b96 <memchr>
 80037ea:	b108      	cbz	r0, 80037f0 <_printf_i+0x1e4>
 80037ec:	1b80      	subs	r0, r0, r6
 80037ee:	6060      	str	r0, [r4, #4]
 80037f0:	6863      	ldr	r3, [r4, #4]
 80037f2:	6123      	str	r3, [r4, #16]
 80037f4:	2300      	movs	r3, #0
 80037f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037fa:	e7aa      	b.n	8003752 <_printf_i+0x146>
 80037fc:	4632      	mov	r2, r6
 80037fe:	4649      	mov	r1, r9
 8003800:	4640      	mov	r0, r8
 8003802:	6923      	ldr	r3, [r4, #16]
 8003804:	47d0      	blx	sl
 8003806:	3001      	adds	r0, #1
 8003808:	d0ad      	beq.n	8003766 <_printf_i+0x15a>
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	079b      	lsls	r3, r3, #30
 800380e:	d413      	bmi.n	8003838 <_printf_i+0x22c>
 8003810:	68e0      	ldr	r0, [r4, #12]
 8003812:	9b03      	ldr	r3, [sp, #12]
 8003814:	4298      	cmp	r0, r3
 8003816:	bfb8      	it	lt
 8003818:	4618      	movlt	r0, r3
 800381a:	e7a6      	b.n	800376a <_printf_i+0x15e>
 800381c:	2301      	movs	r3, #1
 800381e:	4632      	mov	r2, r6
 8003820:	4649      	mov	r1, r9
 8003822:	4640      	mov	r0, r8
 8003824:	47d0      	blx	sl
 8003826:	3001      	adds	r0, #1
 8003828:	d09d      	beq.n	8003766 <_printf_i+0x15a>
 800382a:	3501      	adds	r5, #1
 800382c:	68e3      	ldr	r3, [r4, #12]
 800382e:	9903      	ldr	r1, [sp, #12]
 8003830:	1a5b      	subs	r3, r3, r1
 8003832:	42ab      	cmp	r3, r5
 8003834:	dcf2      	bgt.n	800381c <_printf_i+0x210>
 8003836:	e7eb      	b.n	8003810 <_printf_i+0x204>
 8003838:	2500      	movs	r5, #0
 800383a:	f104 0619 	add.w	r6, r4, #25
 800383e:	e7f5      	b.n	800382c <_printf_i+0x220>
 8003840:	08005cc4 	.word	0x08005cc4
 8003844:	08005cd5 	.word	0x08005cd5

08003848 <std>:
 8003848:	2300      	movs	r3, #0
 800384a:	b510      	push	{r4, lr}
 800384c:	4604      	mov	r4, r0
 800384e:	e9c0 3300 	strd	r3, r3, [r0]
 8003852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003856:	6083      	str	r3, [r0, #8]
 8003858:	8181      	strh	r1, [r0, #12]
 800385a:	6643      	str	r3, [r0, #100]	@ 0x64
 800385c:	81c2      	strh	r2, [r0, #14]
 800385e:	6183      	str	r3, [r0, #24]
 8003860:	4619      	mov	r1, r3
 8003862:	2208      	movs	r2, #8
 8003864:	305c      	adds	r0, #92	@ 0x5c
 8003866:	f000 f916 	bl	8003a96 <memset>
 800386a:	4b0d      	ldr	r3, [pc, #52]	@ (80038a0 <std+0x58>)
 800386c:	6224      	str	r4, [r4, #32]
 800386e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003870:	4b0c      	ldr	r3, [pc, #48]	@ (80038a4 <std+0x5c>)
 8003872:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003874:	4b0c      	ldr	r3, [pc, #48]	@ (80038a8 <std+0x60>)
 8003876:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003878:	4b0c      	ldr	r3, [pc, #48]	@ (80038ac <std+0x64>)
 800387a:	6323      	str	r3, [r4, #48]	@ 0x30
 800387c:	4b0c      	ldr	r3, [pc, #48]	@ (80038b0 <std+0x68>)
 800387e:	429c      	cmp	r4, r3
 8003880:	d006      	beq.n	8003890 <std+0x48>
 8003882:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003886:	4294      	cmp	r4, r2
 8003888:	d002      	beq.n	8003890 <std+0x48>
 800388a:	33d0      	adds	r3, #208	@ 0xd0
 800388c:	429c      	cmp	r4, r3
 800388e:	d105      	bne.n	800389c <std+0x54>
 8003890:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003898:	f000 b97a 	b.w	8003b90 <__retarget_lock_init_recursive>
 800389c:	bd10      	pop	{r4, pc}
 800389e:	bf00      	nop
 80038a0:	08003a11 	.word	0x08003a11
 80038a4:	08003a33 	.word	0x08003a33
 80038a8:	08003a6b 	.word	0x08003a6b
 80038ac:	08003a8f 	.word	0x08003a8f
 80038b0:	2000029c 	.word	0x2000029c

080038b4 <stdio_exit_handler>:
 80038b4:	4a02      	ldr	r2, [pc, #8]	@ (80038c0 <stdio_exit_handler+0xc>)
 80038b6:	4903      	ldr	r1, [pc, #12]	@ (80038c4 <stdio_exit_handler+0x10>)
 80038b8:	4803      	ldr	r0, [pc, #12]	@ (80038c8 <stdio_exit_handler+0x14>)
 80038ba:	f000 b869 	b.w	8003990 <_fwalk_sglue>
 80038be:	bf00      	nop
 80038c0:	20000020 	.word	0x20000020
 80038c4:	08005511 	.word	0x08005511
 80038c8:	20000030 	.word	0x20000030

080038cc <cleanup_stdio>:
 80038cc:	6841      	ldr	r1, [r0, #4]
 80038ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003900 <cleanup_stdio+0x34>)
 80038d0:	b510      	push	{r4, lr}
 80038d2:	4299      	cmp	r1, r3
 80038d4:	4604      	mov	r4, r0
 80038d6:	d001      	beq.n	80038dc <cleanup_stdio+0x10>
 80038d8:	f001 fe1a 	bl	8005510 <_fflush_r>
 80038dc:	68a1      	ldr	r1, [r4, #8]
 80038de:	4b09      	ldr	r3, [pc, #36]	@ (8003904 <cleanup_stdio+0x38>)
 80038e0:	4299      	cmp	r1, r3
 80038e2:	d002      	beq.n	80038ea <cleanup_stdio+0x1e>
 80038e4:	4620      	mov	r0, r4
 80038e6:	f001 fe13 	bl	8005510 <_fflush_r>
 80038ea:	68e1      	ldr	r1, [r4, #12]
 80038ec:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <cleanup_stdio+0x3c>)
 80038ee:	4299      	cmp	r1, r3
 80038f0:	d004      	beq.n	80038fc <cleanup_stdio+0x30>
 80038f2:	4620      	mov	r0, r4
 80038f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038f8:	f001 be0a 	b.w	8005510 <_fflush_r>
 80038fc:	bd10      	pop	{r4, pc}
 80038fe:	bf00      	nop
 8003900:	2000029c 	.word	0x2000029c
 8003904:	20000304 	.word	0x20000304
 8003908:	2000036c 	.word	0x2000036c

0800390c <global_stdio_init.part.0>:
 800390c:	b510      	push	{r4, lr}
 800390e:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <global_stdio_init.part.0+0x30>)
 8003910:	4c0b      	ldr	r4, [pc, #44]	@ (8003940 <global_stdio_init.part.0+0x34>)
 8003912:	4a0c      	ldr	r2, [pc, #48]	@ (8003944 <global_stdio_init.part.0+0x38>)
 8003914:	4620      	mov	r0, r4
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	2104      	movs	r1, #4
 800391a:	2200      	movs	r2, #0
 800391c:	f7ff ff94 	bl	8003848 <std>
 8003920:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003924:	2201      	movs	r2, #1
 8003926:	2109      	movs	r1, #9
 8003928:	f7ff ff8e 	bl	8003848 <std>
 800392c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003930:	2202      	movs	r2, #2
 8003932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003936:	2112      	movs	r1, #18
 8003938:	f7ff bf86 	b.w	8003848 <std>
 800393c:	200003d4 	.word	0x200003d4
 8003940:	2000029c 	.word	0x2000029c
 8003944:	080038b5 	.word	0x080038b5

08003948 <__sfp_lock_acquire>:
 8003948:	4801      	ldr	r0, [pc, #4]	@ (8003950 <__sfp_lock_acquire+0x8>)
 800394a:	f000 b922 	b.w	8003b92 <__retarget_lock_acquire_recursive>
 800394e:	bf00      	nop
 8003950:	200003dd 	.word	0x200003dd

08003954 <__sfp_lock_release>:
 8003954:	4801      	ldr	r0, [pc, #4]	@ (800395c <__sfp_lock_release+0x8>)
 8003956:	f000 b91d 	b.w	8003b94 <__retarget_lock_release_recursive>
 800395a:	bf00      	nop
 800395c:	200003dd 	.word	0x200003dd

08003960 <__sinit>:
 8003960:	b510      	push	{r4, lr}
 8003962:	4604      	mov	r4, r0
 8003964:	f7ff fff0 	bl	8003948 <__sfp_lock_acquire>
 8003968:	6a23      	ldr	r3, [r4, #32]
 800396a:	b11b      	cbz	r3, 8003974 <__sinit+0x14>
 800396c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003970:	f7ff bff0 	b.w	8003954 <__sfp_lock_release>
 8003974:	4b04      	ldr	r3, [pc, #16]	@ (8003988 <__sinit+0x28>)
 8003976:	6223      	str	r3, [r4, #32]
 8003978:	4b04      	ldr	r3, [pc, #16]	@ (800398c <__sinit+0x2c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f5      	bne.n	800396c <__sinit+0xc>
 8003980:	f7ff ffc4 	bl	800390c <global_stdio_init.part.0>
 8003984:	e7f2      	b.n	800396c <__sinit+0xc>
 8003986:	bf00      	nop
 8003988:	080038cd 	.word	0x080038cd
 800398c:	200003d4 	.word	0x200003d4

08003990 <_fwalk_sglue>:
 8003990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003994:	4607      	mov	r7, r0
 8003996:	4688      	mov	r8, r1
 8003998:	4614      	mov	r4, r2
 800399a:	2600      	movs	r6, #0
 800399c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039a0:	f1b9 0901 	subs.w	r9, r9, #1
 80039a4:	d505      	bpl.n	80039b2 <_fwalk_sglue+0x22>
 80039a6:	6824      	ldr	r4, [r4, #0]
 80039a8:	2c00      	cmp	r4, #0
 80039aa:	d1f7      	bne.n	800399c <_fwalk_sglue+0xc>
 80039ac:	4630      	mov	r0, r6
 80039ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039b2:	89ab      	ldrh	r3, [r5, #12]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d907      	bls.n	80039c8 <_fwalk_sglue+0x38>
 80039b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039bc:	3301      	adds	r3, #1
 80039be:	d003      	beq.n	80039c8 <_fwalk_sglue+0x38>
 80039c0:	4629      	mov	r1, r5
 80039c2:	4638      	mov	r0, r7
 80039c4:	47c0      	blx	r8
 80039c6:	4306      	orrs	r6, r0
 80039c8:	3568      	adds	r5, #104	@ 0x68
 80039ca:	e7e9      	b.n	80039a0 <_fwalk_sglue+0x10>

080039cc <siprintf>:
 80039cc:	b40e      	push	{r1, r2, r3}
 80039ce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80039d2:	b510      	push	{r4, lr}
 80039d4:	2400      	movs	r4, #0
 80039d6:	b09d      	sub	sp, #116	@ 0x74
 80039d8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80039da:	9002      	str	r0, [sp, #8]
 80039dc:	9006      	str	r0, [sp, #24]
 80039de:	9107      	str	r1, [sp, #28]
 80039e0:	9104      	str	r1, [sp, #16]
 80039e2:	4809      	ldr	r0, [pc, #36]	@ (8003a08 <siprintf+0x3c>)
 80039e4:	4909      	ldr	r1, [pc, #36]	@ (8003a0c <siprintf+0x40>)
 80039e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80039ea:	9105      	str	r1, [sp, #20]
 80039ec:	6800      	ldr	r0, [r0, #0]
 80039ee:	a902      	add	r1, sp, #8
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80039f4:	f001 fc10 	bl	8005218 <_svfiprintf_r>
 80039f8:	9b02      	ldr	r3, [sp, #8]
 80039fa:	701c      	strb	r4, [r3, #0]
 80039fc:	b01d      	add	sp, #116	@ 0x74
 80039fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a02:	b003      	add	sp, #12
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	2000002c 	.word	0x2000002c
 8003a0c:	ffff0208 	.word	0xffff0208

08003a10 <__sread>:
 8003a10:	b510      	push	{r4, lr}
 8003a12:	460c      	mov	r4, r1
 8003a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a18:	f000 f86c 	bl	8003af4 <_read_r>
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	bfab      	itete	ge
 8003a20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003a22:	89a3      	ldrhlt	r3, [r4, #12]
 8003a24:	181b      	addge	r3, r3, r0
 8003a26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003a2a:	bfac      	ite	ge
 8003a2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003a2e:	81a3      	strhlt	r3, [r4, #12]
 8003a30:	bd10      	pop	{r4, pc}

08003a32 <__swrite>:
 8003a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a36:	461f      	mov	r7, r3
 8003a38:	898b      	ldrh	r3, [r1, #12]
 8003a3a:	4605      	mov	r5, r0
 8003a3c:	05db      	lsls	r3, r3, #23
 8003a3e:	460c      	mov	r4, r1
 8003a40:	4616      	mov	r6, r2
 8003a42:	d505      	bpl.n	8003a50 <__swrite+0x1e>
 8003a44:	2302      	movs	r3, #2
 8003a46:	2200      	movs	r2, #0
 8003a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a4c:	f000 f840 	bl	8003ad0 <_lseek_r>
 8003a50:	89a3      	ldrh	r3, [r4, #12]
 8003a52:	4632      	mov	r2, r6
 8003a54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a58:	81a3      	strh	r3, [r4, #12]
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	463b      	mov	r3, r7
 8003a5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a66:	f000 b857 	b.w	8003b18 <_write_r>

08003a6a <__sseek>:
 8003a6a:	b510      	push	{r4, lr}
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a72:	f000 f82d 	bl	8003ad0 <_lseek_r>
 8003a76:	1c43      	adds	r3, r0, #1
 8003a78:	89a3      	ldrh	r3, [r4, #12]
 8003a7a:	bf15      	itete	ne
 8003a7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003a7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003a82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003a86:	81a3      	strheq	r3, [r4, #12]
 8003a88:	bf18      	it	ne
 8003a8a:	81a3      	strhne	r3, [r4, #12]
 8003a8c:	bd10      	pop	{r4, pc}

08003a8e <__sclose>:
 8003a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a92:	f000 b80d 	b.w	8003ab0 <_close_r>

08003a96 <memset>:
 8003a96:	4603      	mov	r3, r0
 8003a98:	4402      	add	r2, r0
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d100      	bne.n	8003aa0 <memset+0xa>
 8003a9e:	4770      	bx	lr
 8003aa0:	f803 1b01 	strb.w	r1, [r3], #1
 8003aa4:	e7f9      	b.n	8003a9a <memset+0x4>
	...

08003aa8 <_localeconv_r>:
 8003aa8:	4800      	ldr	r0, [pc, #0]	@ (8003aac <_localeconv_r+0x4>)
 8003aaa:	4770      	bx	lr
 8003aac:	2000016c 	.word	0x2000016c

08003ab0 <_close_r>:
 8003ab0:	b538      	push	{r3, r4, r5, lr}
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	4d05      	ldr	r5, [pc, #20]	@ (8003acc <_close_r+0x1c>)
 8003ab6:	4604      	mov	r4, r0
 8003ab8:	4608      	mov	r0, r1
 8003aba:	602b      	str	r3, [r5, #0]
 8003abc:	f7fd fe0d 	bl	80016da <_close>
 8003ac0:	1c43      	adds	r3, r0, #1
 8003ac2:	d102      	bne.n	8003aca <_close_r+0x1a>
 8003ac4:	682b      	ldr	r3, [r5, #0]
 8003ac6:	b103      	cbz	r3, 8003aca <_close_r+0x1a>
 8003ac8:	6023      	str	r3, [r4, #0]
 8003aca:	bd38      	pop	{r3, r4, r5, pc}
 8003acc:	200003d8 	.word	0x200003d8

08003ad0 <_lseek_r>:
 8003ad0:	b538      	push	{r3, r4, r5, lr}
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	2200      	movs	r2, #0
 8003ada:	4d05      	ldr	r5, [pc, #20]	@ (8003af0 <_lseek_r+0x20>)
 8003adc:	602a      	str	r2, [r5, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f7fd fe1f 	bl	8001722 <_lseek>
 8003ae4:	1c43      	adds	r3, r0, #1
 8003ae6:	d102      	bne.n	8003aee <_lseek_r+0x1e>
 8003ae8:	682b      	ldr	r3, [r5, #0]
 8003aea:	b103      	cbz	r3, 8003aee <_lseek_r+0x1e>
 8003aec:	6023      	str	r3, [r4, #0]
 8003aee:	bd38      	pop	{r3, r4, r5, pc}
 8003af0:	200003d8 	.word	0x200003d8

08003af4 <_read_r>:
 8003af4:	b538      	push	{r3, r4, r5, lr}
 8003af6:	4604      	mov	r4, r0
 8003af8:	4608      	mov	r0, r1
 8003afa:	4611      	mov	r1, r2
 8003afc:	2200      	movs	r2, #0
 8003afe:	4d05      	ldr	r5, [pc, #20]	@ (8003b14 <_read_r+0x20>)
 8003b00:	602a      	str	r2, [r5, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	f7fd fdb0 	bl	8001668 <_read>
 8003b08:	1c43      	adds	r3, r0, #1
 8003b0a:	d102      	bne.n	8003b12 <_read_r+0x1e>
 8003b0c:	682b      	ldr	r3, [r5, #0]
 8003b0e:	b103      	cbz	r3, 8003b12 <_read_r+0x1e>
 8003b10:	6023      	str	r3, [r4, #0]
 8003b12:	bd38      	pop	{r3, r4, r5, pc}
 8003b14:	200003d8 	.word	0x200003d8

08003b18 <_write_r>:
 8003b18:	b538      	push	{r3, r4, r5, lr}
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	4608      	mov	r0, r1
 8003b1e:	4611      	mov	r1, r2
 8003b20:	2200      	movs	r2, #0
 8003b22:	4d05      	ldr	r5, [pc, #20]	@ (8003b38 <_write_r+0x20>)
 8003b24:	602a      	str	r2, [r5, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	f7fd fdbb 	bl	80016a2 <_write>
 8003b2c:	1c43      	adds	r3, r0, #1
 8003b2e:	d102      	bne.n	8003b36 <_write_r+0x1e>
 8003b30:	682b      	ldr	r3, [r5, #0]
 8003b32:	b103      	cbz	r3, 8003b36 <_write_r+0x1e>
 8003b34:	6023      	str	r3, [r4, #0]
 8003b36:	bd38      	pop	{r3, r4, r5, pc}
 8003b38:	200003d8 	.word	0x200003d8

08003b3c <__errno>:
 8003b3c:	4b01      	ldr	r3, [pc, #4]	@ (8003b44 <__errno+0x8>)
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	2000002c 	.word	0x2000002c

08003b48 <__libc_init_array>:
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	2600      	movs	r6, #0
 8003b4c:	4d0c      	ldr	r5, [pc, #48]	@ (8003b80 <__libc_init_array+0x38>)
 8003b4e:	4c0d      	ldr	r4, [pc, #52]	@ (8003b84 <__libc_init_array+0x3c>)
 8003b50:	1b64      	subs	r4, r4, r5
 8003b52:	10a4      	asrs	r4, r4, #2
 8003b54:	42a6      	cmp	r6, r4
 8003b56:	d109      	bne.n	8003b6c <__libc_init_array+0x24>
 8003b58:	f002 f876 	bl	8005c48 <_init>
 8003b5c:	2600      	movs	r6, #0
 8003b5e:	4d0a      	ldr	r5, [pc, #40]	@ (8003b88 <__libc_init_array+0x40>)
 8003b60:	4c0a      	ldr	r4, [pc, #40]	@ (8003b8c <__libc_init_array+0x44>)
 8003b62:	1b64      	subs	r4, r4, r5
 8003b64:	10a4      	asrs	r4, r4, #2
 8003b66:	42a6      	cmp	r6, r4
 8003b68:	d105      	bne.n	8003b76 <__libc_init_array+0x2e>
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}
 8003b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b70:	4798      	blx	r3
 8003b72:	3601      	adds	r6, #1
 8003b74:	e7ee      	b.n	8003b54 <__libc_init_array+0xc>
 8003b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b7a:	4798      	blx	r3
 8003b7c:	3601      	adds	r6, #1
 8003b7e:	e7f2      	b.n	8003b66 <__libc_init_array+0x1e>
 8003b80:	0800602c 	.word	0x0800602c
 8003b84:	0800602c 	.word	0x0800602c
 8003b88:	0800602c 	.word	0x0800602c
 8003b8c:	08006030 	.word	0x08006030

08003b90 <__retarget_lock_init_recursive>:
 8003b90:	4770      	bx	lr

08003b92 <__retarget_lock_acquire_recursive>:
 8003b92:	4770      	bx	lr

08003b94 <__retarget_lock_release_recursive>:
 8003b94:	4770      	bx	lr

08003b96 <memchr>:
 8003b96:	4603      	mov	r3, r0
 8003b98:	b510      	push	{r4, lr}
 8003b9a:	b2c9      	uxtb	r1, r1
 8003b9c:	4402      	add	r2, r0
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	d101      	bne.n	8003ba8 <memchr+0x12>
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	e003      	b.n	8003bb0 <memchr+0x1a>
 8003ba8:	7804      	ldrb	r4, [r0, #0]
 8003baa:	3301      	adds	r3, #1
 8003bac:	428c      	cmp	r4, r1
 8003bae:	d1f6      	bne.n	8003b9e <memchr+0x8>
 8003bb0:	bd10      	pop	{r4, pc}

08003bb2 <quorem>:
 8003bb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb6:	6903      	ldr	r3, [r0, #16]
 8003bb8:	690c      	ldr	r4, [r1, #16]
 8003bba:	4607      	mov	r7, r0
 8003bbc:	42a3      	cmp	r3, r4
 8003bbe:	db7e      	blt.n	8003cbe <quorem+0x10c>
 8003bc0:	3c01      	subs	r4, #1
 8003bc2:	00a3      	lsls	r3, r4, #2
 8003bc4:	f100 0514 	add.w	r5, r0, #20
 8003bc8:	f101 0814 	add.w	r8, r1, #20
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003bd2:	9301      	str	r3, [sp, #4]
 8003bd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003bd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	429a      	cmp	r2, r3
 8003be0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003be4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003be8:	d32e      	bcc.n	8003c48 <quorem+0x96>
 8003bea:	f04f 0a00 	mov.w	sl, #0
 8003bee:	46c4      	mov	ip, r8
 8003bf0:	46ae      	mov	lr, r5
 8003bf2:	46d3      	mov	fp, sl
 8003bf4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003bf8:	b298      	uxth	r0, r3
 8003bfa:	fb06 a000 	mla	r0, r6, r0, sl
 8003bfe:	0c1b      	lsrs	r3, r3, #16
 8003c00:	0c02      	lsrs	r2, r0, #16
 8003c02:	fb06 2303 	mla	r3, r6, r3, r2
 8003c06:	f8de 2000 	ldr.w	r2, [lr]
 8003c0a:	b280      	uxth	r0, r0
 8003c0c:	b292      	uxth	r2, r2
 8003c0e:	1a12      	subs	r2, r2, r0
 8003c10:	445a      	add	r2, fp
 8003c12:	f8de 0000 	ldr.w	r0, [lr]
 8003c16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003c20:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003c24:	b292      	uxth	r2, r2
 8003c26:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003c2a:	45e1      	cmp	r9, ip
 8003c2c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003c30:	f84e 2b04 	str.w	r2, [lr], #4
 8003c34:	d2de      	bcs.n	8003bf4 <quorem+0x42>
 8003c36:	9b00      	ldr	r3, [sp, #0]
 8003c38:	58eb      	ldr	r3, [r5, r3]
 8003c3a:	b92b      	cbnz	r3, 8003c48 <quorem+0x96>
 8003c3c:	9b01      	ldr	r3, [sp, #4]
 8003c3e:	3b04      	subs	r3, #4
 8003c40:	429d      	cmp	r5, r3
 8003c42:	461a      	mov	r2, r3
 8003c44:	d32f      	bcc.n	8003ca6 <quorem+0xf4>
 8003c46:	613c      	str	r4, [r7, #16]
 8003c48:	4638      	mov	r0, r7
 8003c4a:	f001 f981 	bl	8004f50 <__mcmp>
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	db25      	blt.n	8003c9e <quorem+0xec>
 8003c52:	4629      	mov	r1, r5
 8003c54:	2000      	movs	r0, #0
 8003c56:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c5a:	f8d1 c000 	ldr.w	ip, [r1]
 8003c5e:	fa1f fe82 	uxth.w	lr, r2
 8003c62:	fa1f f38c 	uxth.w	r3, ip
 8003c66:	eba3 030e 	sub.w	r3, r3, lr
 8003c6a:	4403      	add	r3, r0
 8003c6c:	0c12      	lsrs	r2, r2, #16
 8003c6e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003c72:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c7c:	45c1      	cmp	r9, r8
 8003c7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003c82:	f841 3b04 	str.w	r3, [r1], #4
 8003c86:	d2e6      	bcs.n	8003c56 <quorem+0xa4>
 8003c88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c90:	b922      	cbnz	r2, 8003c9c <quorem+0xea>
 8003c92:	3b04      	subs	r3, #4
 8003c94:	429d      	cmp	r5, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	d30b      	bcc.n	8003cb2 <quorem+0x100>
 8003c9a:	613c      	str	r4, [r7, #16]
 8003c9c:	3601      	adds	r6, #1
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	b003      	add	sp, #12
 8003ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	3b04      	subs	r3, #4
 8003caa:	2a00      	cmp	r2, #0
 8003cac:	d1cb      	bne.n	8003c46 <quorem+0x94>
 8003cae:	3c01      	subs	r4, #1
 8003cb0:	e7c6      	b.n	8003c40 <quorem+0x8e>
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	3b04      	subs	r3, #4
 8003cb6:	2a00      	cmp	r2, #0
 8003cb8:	d1ef      	bne.n	8003c9a <quorem+0xe8>
 8003cba:	3c01      	subs	r4, #1
 8003cbc:	e7ea      	b.n	8003c94 <quorem+0xe2>
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	e7ee      	b.n	8003ca0 <quorem+0xee>
 8003cc2:	0000      	movs	r0, r0
 8003cc4:	0000      	movs	r0, r0
	...

08003cc8 <_dtoa_r>:
 8003cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ccc:	4614      	mov	r4, r2
 8003cce:	461d      	mov	r5, r3
 8003cd0:	69c7      	ldr	r7, [r0, #28]
 8003cd2:	b097      	sub	sp, #92	@ 0x5c
 8003cd4:	4681      	mov	r9, r0
 8003cd6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003cda:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003cdc:	b97f      	cbnz	r7, 8003cfe <_dtoa_r+0x36>
 8003cde:	2010      	movs	r0, #16
 8003ce0:	f000 fe0e 	bl	8004900 <malloc>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	f8c9 001c 	str.w	r0, [r9, #28]
 8003cea:	b920      	cbnz	r0, 8003cf6 <_dtoa_r+0x2e>
 8003cec:	21ef      	movs	r1, #239	@ 0xef
 8003cee:	4bac      	ldr	r3, [pc, #688]	@ (8003fa0 <_dtoa_r+0x2d8>)
 8003cf0:	48ac      	ldr	r0, [pc, #688]	@ (8003fa4 <_dtoa_r+0x2dc>)
 8003cf2:	f001 fc6d 	bl	80055d0 <__assert_func>
 8003cf6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003cfa:	6007      	str	r7, [r0, #0]
 8003cfc:	60c7      	str	r7, [r0, #12]
 8003cfe:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003d02:	6819      	ldr	r1, [r3, #0]
 8003d04:	b159      	cbz	r1, 8003d1e <_dtoa_r+0x56>
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	2301      	movs	r3, #1
 8003d0a:	4093      	lsls	r3, r2
 8003d0c:	604a      	str	r2, [r1, #4]
 8003d0e:	608b      	str	r3, [r1, #8]
 8003d10:	4648      	mov	r0, r9
 8003d12:	f000 feeb 	bl	8004aec <_Bfree>
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	1e2b      	subs	r3, r5, #0
 8003d20:	bfaf      	iteee	ge
 8003d22:	2300      	movge	r3, #0
 8003d24:	2201      	movlt	r2, #1
 8003d26:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003d2a:	9307      	strlt	r3, [sp, #28]
 8003d2c:	bfa8      	it	ge
 8003d2e:	6033      	strge	r3, [r6, #0]
 8003d30:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8003d34:	4b9c      	ldr	r3, [pc, #624]	@ (8003fa8 <_dtoa_r+0x2e0>)
 8003d36:	bfb8      	it	lt
 8003d38:	6032      	strlt	r2, [r6, #0]
 8003d3a:	ea33 0308 	bics.w	r3, r3, r8
 8003d3e:	d112      	bne.n	8003d66 <_dtoa_r+0x9e>
 8003d40:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003d44:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003d4c:	4323      	orrs	r3, r4
 8003d4e:	f000 855e 	beq.w	800480e <_dtoa_r+0xb46>
 8003d52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003d54:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003fac <_dtoa_r+0x2e4>
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8560 	beq.w	800481e <_dtoa_r+0xb56>
 8003d5e:	f10a 0303 	add.w	r3, sl, #3
 8003d62:	f000 bd5a 	b.w	800481a <_dtoa_r+0xb52>
 8003d66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d6a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003d6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d72:	2200      	movs	r2, #0
 8003d74:	2300      	movs	r3, #0
 8003d76:	f7fc fecb 	bl	8000b10 <__aeabi_dcmpeq>
 8003d7a:	4607      	mov	r7, r0
 8003d7c:	b158      	cbz	r0, 8003d96 <_dtoa_r+0xce>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003d86:	b113      	cbz	r3, 8003d8e <_dtoa_r+0xc6>
 8003d88:	4b89      	ldr	r3, [pc, #548]	@ (8003fb0 <_dtoa_r+0x2e8>)
 8003d8a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8003fb4 <_dtoa_r+0x2ec>
 8003d92:	f000 bd44 	b.w	800481e <_dtoa_r+0xb56>
 8003d96:	ab14      	add	r3, sp, #80	@ 0x50
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	ab15      	add	r3, sp, #84	@ 0x54
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	4648      	mov	r0, r9
 8003da0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003da4:	f001 f984 	bl	80050b0 <__d2b>
 8003da8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003dac:	9003      	str	r0, [sp, #12]
 8003dae:	2e00      	cmp	r6, #0
 8003db0:	d078      	beq.n	8003ea4 <_dtoa_r+0x1dc>
 8003db2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003db6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003db8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003dbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dc0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003dc4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003dc8:	9712      	str	r7, [sp, #72]	@ 0x48
 8003dca:	4619      	mov	r1, r3
 8003dcc:	2200      	movs	r2, #0
 8003dce:	4b7a      	ldr	r3, [pc, #488]	@ (8003fb8 <_dtoa_r+0x2f0>)
 8003dd0:	f7fc fa7e 	bl	80002d0 <__aeabi_dsub>
 8003dd4:	a36c      	add	r3, pc, #432	@ (adr r3, 8003f88 <_dtoa_r+0x2c0>)
 8003dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dda:	f7fc fc31 	bl	8000640 <__aeabi_dmul>
 8003dde:	a36c      	add	r3, pc, #432	@ (adr r3, 8003f90 <_dtoa_r+0x2c8>)
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f7fc fa76 	bl	80002d4 <__adddf3>
 8003de8:	4604      	mov	r4, r0
 8003dea:	4630      	mov	r0, r6
 8003dec:	460d      	mov	r5, r1
 8003dee:	f7fc fbbd 	bl	800056c <__aeabi_i2d>
 8003df2:	a369      	add	r3, pc, #420	@ (adr r3, 8003f98 <_dtoa_r+0x2d0>)
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f7fc fc22 	bl	8000640 <__aeabi_dmul>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4620      	mov	r0, r4
 8003e02:	4629      	mov	r1, r5
 8003e04:	f7fc fa66 	bl	80002d4 <__adddf3>
 8003e08:	4604      	mov	r4, r0
 8003e0a:	460d      	mov	r5, r1
 8003e0c:	f7fc fec8 	bl	8000ba0 <__aeabi_d2iz>
 8003e10:	2200      	movs	r2, #0
 8003e12:	4607      	mov	r7, r0
 8003e14:	2300      	movs	r3, #0
 8003e16:	4620      	mov	r0, r4
 8003e18:	4629      	mov	r1, r5
 8003e1a:	f7fc fe83 	bl	8000b24 <__aeabi_dcmplt>
 8003e1e:	b140      	cbz	r0, 8003e32 <_dtoa_r+0x16a>
 8003e20:	4638      	mov	r0, r7
 8003e22:	f7fc fba3 	bl	800056c <__aeabi_i2d>
 8003e26:	4622      	mov	r2, r4
 8003e28:	462b      	mov	r3, r5
 8003e2a:	f7fc fe71 	bl	8000b10 <__aeabi_dcmpeq>
 8003e2e:	b900      	cbnz	r0, 8003e32 <_dtoa_r+0x16a>
 8003e30:	3f01      	subs	r7, #1
 8003e32:	2f16      	cmp	r7, #22
 8003e34:	d854      	bhi.n	8003ee0 <_dtoa_r+0x218>
 8003e36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e3a:	4b60      	ldr	r3, [pc, #384]	@ (8003fbc <_dtoa_r+0x2f4>)
 8003e3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	f7fc fe6e 	bl	8000b24 <__aeabi_dcmplt>
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	d04b      	beq.n	8003ee4 <_dtoa_r+0x21c>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	3f01      	subs	r7, #1
 8003e50:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003e52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003e54:	1b9b      	subs	r3, r3, r6
 8003e56:	1e5a      	subs	r2, r3, #1
 8003e58:	bf49      	itett	mi
 8003e5a:	f1c3 0301 	rsbmi	r3, r3, #1
 8003e5e:	2300      	movpl	r3, #0
 8003e60:	9304      	strmi	r3, [sp, #16]
 8003e62:	2300      	movmi	r3, #0
 8003e64:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e66:	bf54      	ite	pl
 8003e68:	9304      	strpl	r3, [sp, #16]
 8003e6a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003e6c:	2f00      	cmp	r7, #0
 8003e6e:	db3b      	blt.n	8003ee8 <_dtoa_r+0x220>
 8003e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e72:	970e      	str	r7, [sp, #56]	@ 0x38
 8003e74:	443b      	add	r3, r7
 8003e76:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e78:	2300      	movs	r3, #0
 8003e7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8003e7c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003e7e:	2b09      	cmp	r3, #9
 8003e80:	d865      	bhi.n	8003f4e <_dtoa_r+0x286>
 8003e82:	2b05      	cmp	r3, #5
 8003e84:	bfc4      	itt	gt
 8003e86:	3b04      	subgt	r3, #4
 8003e88:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003e8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003e8c:	bfc8      	it	gt
 8003e8e:	2400      	movgt	r4, #0
 8003e90:	f1a3 0302 	sub.w	r3, r3, #2
 8003e94:	bfd8      	it	le
 8003e96:	2401      	movle	r4, #1
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d864      	bhi.n	8003f66 <_dtoa_r+0x29e>
 8003e9c:	e8df f003 	tbb	[pc, r3]
 8003ea0:	2c385553 	.word	0x2c385553
 8003ea4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003ea8:	441e      	add	r6, r3
 8003eaa:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	bfc1      	itttt	gt
 8003eb2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003eb6:	fa08 f803 	lslgt.w	r8, r8, r3
 8003eba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003ebe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003ec2:	bfd6      	itet	le
 8003ec4:	f1c3 0320 	rsble	r3, r3, #32
 8003ec8:	ea48 0003 	orrgt.w	r0, r8, r3
 8003ecc:	fa04 f003 	lslle.w	r0, r4, r3
 8003ed0:	f7fc fb3c 	bl	800054c <__aeabi_ui2d>
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003eda:	3e01      	subs	r6, #1
 8003edc:	9212      	str	r2, [sp, #72]	@ 0x48
 8003ede:	e774      	b.n	8003dca <_dtoa_r+0x102>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e7b5      	b.n	8003e50 <_dtoa_r+0x188>
 8003ee4:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003ee6:	e7b4      	b.n	8003e52 <_dtoa_r+0x18a>
 8003ee8:	9b04      	ldr	r3, [sp, #16]
 8003eea:	1bdb      	subs	r3, r3, r7
 8003eec:	9304      	str	r3, [sp, #16]
 8003eee:	427b      	negs	r3, r7
 8003ef0:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	930e      	str	r3, [sp, #56]	@ 0x38
 8003ef6:	e7c1      	b.n	8003e7c <_dtoa_r+0x1b4>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003efc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003efe:	eb07 0b03 	add.w	fp, r7, r3
 8003f02:	f10b 0301 	add.w	r3, fp, #1
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	9308      	str	r3, [sp, #32]
 8003f0a:	bfb8      	it	lt
 8003f0c:	2301      	movlt	r3, #1
 8003f0e:	e006      	b.n	8003f1e <_dtoa_r+0x256>
 8003f10:	2301      	movs	r3, #1
 8003f12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	dd28      	ble.n	8003f6c <_dtoa_r+0x2a4>
 8003f1a:	469b      	mov	fp, r3
 8003f1c:	9308      	str	r3, [sp, #32]
 8003f1e:	2100      	movs	r1, #0
 8003f20:	2204      	movs	r2, #4
 8003f22:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003f26:	f102 0514 	add.w	r5, r2, #20
 8003f2a:	429d      	cmp	r5, r3
 8003f2c:	d926      	bls.n	8003f7c <_dtoa_r+0x2b4>
 8003f2e:	6041      	str	r1, [r0, #4]
 8003f30:	4648      	mov	r0, r9
 8003f32:	f000 fd9b 	bl	8004a6c <_Balloc>
 8003f36:	4682      	mov	sl, r0
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	d143      	bne.n	8003fc4 <_dtoa_r+0x2fc>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8003f42:	4b1f      	ldr	r3, [pc, #124]	@ (8003fc0 <_dtoa_r+0x2f8>)
 8003f44:	e6d4      	b.n	8003cf0 <_dtoa_r+0x28>
 8003f46:	2300      	movs	r3, #0
 8003f48:	e7e3      	b.n	8003f12 <_dtoa_r+0x24a>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e7d5      	b.n	8003efa <_dtoa_r+0x232>
 8003f4e:	2401      	movs	r4, #1
 8003f50:	2300      	movs	r3, #0
 8003f52:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003f54:	9320      	str	r3, [sp, #128]	@ 0x80
 8003f56:	f04f 3bff 	mov.w	fp, #4294967295
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2312      	movs	r3, #18
 8003f5e:	f8cd b020 	str.w	fp, [sp, #32]
 8003f62:	9221      	str	r2, [sp, #132]	@ 0x84
 8003f64:	e7db      	b.n	8003f1e <_dtoa_r+0x256>
 8003f66:	2301      	movs	r3, #1
 8003f68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f6a:	e7f4      	b.n	8003f56 <_dtoa_r+0x28e>
 8003f6c:	f04f 0b01 	mov.w	fp, #1
 8003f70:	465b      	mov	r3, fp
 8003f72:	f8cd b020 	str.w	fp, [sp, #32]
 8003f76:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8003f7a:	e7d0      	b.n	8003f1e <_dtoa_r+0x256>
 8003f7c:	3101      	adds	r1, #1
 8003f7e:	0052      	lsls	r2, r2, #1
 8003f80:	e7d1      	b.n	8003f26 <_dtoa_r+0x25e>
 8003f82:	bf00      	nop
 8003f84:	f3af 8000 	nop.w
 8003f88:	636f4361 	.word	0x636f4361
 8003f8c:	3fd287a7 	.word	0x3fd287a7
 8003f90:	8b60c8b3 	.word	0x8b60c8b3
 8003f94:	3fc68a28 	.word	0x3fc68a28
 8003f98:	509f79fb 	.word	0x509f79fb
 8003f9c:	3fd34413 	.word	0x3fd34413
 8003fa0:	08005cf3 	.word	0x08005cf3
 8003fa4:	08005d0a 	.word	0x08005d0a
 8003fa8:	7ff00000 	.word	0x7ff00000
 8003fac:	08005cef 	.word	0x08005cef
 8003fb0:	08005cc3 	.word	0x08005cc3
 8003fb4:	08005cc2 	.word	0x08005cc2
 8003fb8:	3ff80000 	.word	0x3ff80000
 8003fbc:	08005e58 	.word	0x08005e58
 8003fc0:	08005d62 	.word	0x08005d62
 8003fc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003fc8:	6018      	str	r0, [r3, #0]
 8003fca:	9b08      	ldr	r3, [sp, #32]
 8003fcc:	2b0e      	cmp	r3, #14
 8003fce:	f200 80a1 	bhi.w	8004114 <_dtoa_r+0x44c>
 8003fd2:	2c00      	cmp	r4, #0
 8003fd4:	f000 809e 	beq.w	8004114 <_dtoa_r+0x44c>
 8003fd8:	2f00      	cmp	r7, #0
 8003fda:	dd33      	ble.n	8004044 <_dtoa_r+0x37c>
 8003fdc:	4b9c      	ldr	r3, [pc, #624]	@ (8004250 <_dtoa_r+0x588>)
 8003fde:	f007 020f 	and.w	r2, r7, #15
 8003fe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fe6:	05f8      	lsls	r0, r7, #23
 8003fe8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fec:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8003ff0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003ff4:	d516      	bpl.n	8004024 <_dtoa_r+0x35c>
 8003ff6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003ffa:	4b96      	ldr	r3, [pc, #600]	@ (8004254 <_dtoa_r+0x58c>)
 8003ffc:	2603      	movs	r6, #3
 8003ffe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004002:	f7fc fc47 	bl	8000894 <__aeabi_ddiv>
 8004006:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800400a:	f004 040f 	and.w	r4, r4, #15
 800400e:	4d91      	ldr	r5, [pc, #580]	@ (8004254 <_dtoa_r+0x58c>)
 8004010:	b954      	cbnz	r4, 8004028 <_dtoa_r+0x360>
 8004012:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004016:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800401a:	f7fc fc3b 	bl	8000894 <__aeabi_ddiv>
 800401e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004022:	e028      	b.n	8004076 <_dtoa_r+0x3ae>
 8004024:	2602      	movs	r6, #2
 8004026:	e7f2      	b.n	800400e <_dtoa_r+0x346>
 8004028:	07e1      	lsls	r1, r4, #31
 800402a:	d508      	bpl.n	800403e <_dtoa_r+0x376>
 800402c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004030:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004034:	f7fc fb04 	bl	8000640 <__aeabi_dmul>
 8004038:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800403c:	3601      	adds	r6, #1
 800403e:	1064      	asrs	r4, r4, #1
 8004040:	3508      	adds	r5, #8
 8004042:	e7e5      	b.n	8004010 <_dtoa_r+0x348>
 8004044:	f000 80af 	beq.w	80041a6 <_dtoa_r+0x4de>
 8004048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800404c:	427c      	negs	r4, r7
 800404e:	4b80      	ldr	r3, [pc, #512]	@ (8004250 <_dtoa_r+0x588>)
 8004050:	f004 020f 	and.w	r2, r4, #15
 8004054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405c:	f7fc faf0 	bl	8000640 <__aeabi_dmul>
 8004060:	2602      	movs	r6, #2
 8004062:	2300      	movs	r3, #0
 8004064:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004068:	4d7a      	ldr	r5, [pc, #488]	@ (8004254 <_dtoa_r+0x58c>)
 800406a:	1124      	asrs	r4, r4, #4
 800406c:	2c00      	cmp	r4, #0
 800406e:	f040 808f 	bne.w	8004190 <_dtoa_r+0x4c8>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1d3      	bne.n	800401e <_dtoa_r+0x356>
 8004076:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800407a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 8094 	beq.w	80041aa <_dtoa_r+0x4e2>
 8004082:	2200      	movs	r2, #0
 8004084:	4620      	mov	r0, r4
 8004086:	4629      	mov	r1, r5
 8004088:	4b73      	ldr	r3, [pc, #460]	@ (8004258 <_dtoa_r+0x590>)
 800408a:	f7fc fd4b 	bl	8000b24 <__aeabi_dcmplt>
 800408e:	2800      	cmp	r0, #0
 8004090:	f000 808b 	beq.w	80041aa <_dtoa_r+0x4e2>
 8004094:	9b08      	ldr	r3, [sp, #32]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 8087 	beq.w	80041aa <_dtoa_r+0x4e2>
 800409c:	f1bb 0f00 	cmp.w	fp, #0
 80040a0:	dd34      	ble.n	800410c <_dtoa_r+0x444>
 80040a2:	4620      	mov	r0, r4
 80040a4:	2200      	movs	r2, #0
 80040a6:	4629      	mov	r1, r5
 80040a8:	4b6c      	ldr	r3, [pc, #432]	@ (800425c <_dtoa_r+0x594>)
 80040aa:	f7fc fac9 	bl	8000640 <__aeabi_dmul>
 80040ae:	465c      	mov	r4, fp
 80040b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80040b4:	f107 38ff 	add.w	r8, r7, #4294967295
 80040b8:	3601      	adds	r6, #1
 80040ba:	4630      	mov	r0, r6
 80040bc:	f7fc fa56 	bl	800056c <__aeabi_i2d>
 80040c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80040c4:	f7fc fabc 	bl	8000640 <__aeabi_dmul>
 80040c8:	2200      	movs	r2, #0
 80040ca:	4b65      	ldr	r3, [pc, #404]	@ (8004260 <_dtoa_r+0x598>)
 80040cc:	f7fc f902 	bl	80002d4 <__adddf3>
 80040d0:	4605      	mov	r5, r0
 80040d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80040d6:	2c00      	cmp	r4, #0
 80040d8:	d16a      	bne.n	80041b0 <_dtoa_r+0x4e8>
 80040da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040de:	2200      	movs	r2, #0
 80040e0:	4b60      	ldr	r3, [pc, #384]	@ (8004264 <_dtoa_r+0x59c>)
 80040e2:	f7fc f8f5 	bl	80002d0 <__aeabi_dsub>
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80040ee:	462a      	mov	r2, r5
 80040f0:	4633      	mov	r3, r6
 80040f2:	f7fc fd35 	bl	8000b60 <__aeabi_dcmpgt>
 80040f6:	2800      	cmp	r0, #0
 80040f8:	f040 8298 	bne.w	800462c <_dtoa_r+0x964>
 80040fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004100:	462a      	mov	r2, r5
 8004102:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004106:	f7fc fd0d 	bl	8000b24 <__aeabi_dcmplt>
 800410a:	bb38      	cbnz	r0, 800415c <_dtoa_r+0x494>
 800410c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004110:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004114:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004116:	2b00      	cmp	r3, #0
 8004118:	f2c0 8157 	blt.w	80043ca <_dtoa_r+0x702>
 800411c:	2f0e      	cmp	r7, #14
 800411e:	f300 8154 	bgt.w	80043ca <_dtoa_r+0x702>
 8004122:	4b4b      	ldr	r3, [pc, #300]	@ (8004250 <_dtoa_r+0x588>)
 8004124:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004128:	e9d3 3400 	ldrd	r3, r4, [r3]
 800412c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004130:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004132:	2b00      	cmp	r3, #0
 8004134:	f280 80e5 	bge.w	8004302 <_dtoa_r+0x63a>
 8004138:	9b08      	ldr	r3, [sp, #32]
 800413a:	2b00      	cmp	r3, #0
 800413c:	f300 80e1 	bgt.w	8004302 <_dtoa_r+0x63a>
 8004140:	d10c      	bne.n	800415c <_dtoa_r+0x494>
 8004142:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004146:	2200      	movs	r2, #0
 8004148:	4b46      	ldr	r3, [pc, #280]	@ (8004264 <_dtoa_r+0x59c>)
 800414a:	f7fc fa79 	bl	8000640 <__aeabi_dmul>
 800414e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004152:	f7fc fcfb 	bl	8000b4c <__aeabi_dcmpge>
 8004156:	2800      	cmp	r0, #0
 8004158:	f000 8266 	beq.w	8004628 <_dtoa_r+0x960>
 800415c:	2400      	movs	r4, #0
 800415e:	4625      	mov	r5, r4
 8004160:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004162:	4656      	mov	r6, sl
 8004164:	ea6f 0803 	mvn.w	r8, r3
 8004168:	2700      	movs	r7, #0
 800416a:	4621      	mov	r1, r4
 800416c:	4648      	mov	r0, r9
 800416e:	f000 fcbd 	bl	8004aec <_Bfree>
 8004172:	2d00      	cmp	r5, #0
 8004174:	f000 80bd 	beq.w	80042f2 <_dtoa_r+0x62a>
 8004178:	b12f      	cbz	r7, 8004186 <_dtoa_r+0x4be>
 800417a:	42af      	cmp	r7, r5
 800417c:	d003      	beq.n	8004186 <_dtoa_r+0x4be>
 800417e:	4639      	mov	r1, r7
 8004180:	4648      	mov	r0, r9
 8004182:	f000 fcb3 	bl	8004aec <_Bfree>
 8004186:	4629      	mov	r1, r5
 8004188:	4648      	mov	r0, r9
 800418a:	f000 fcaf 	bl	8004aec <_Bfree>
 800418e:	e0b0      	b.n	80042f2 <_dtoa_r+0x62a>
 8004190:	07e2      	lsls	r2, r4, #31
 8004192:	d505      	bpl.n	80041a0 <_dtoa_r+0x4d8>
 8004194:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004198:	f7fc fa52 	bl	8000640 <__aeabi_dmul>
 800419c:	2301      	movs	r3, #1
 800419e:	3601      	adds	r6, #1
 80041a0:	1064      	asrs	r4, r4, #1
 80041a2:	3508      	adds	r5, #8
 80041a4:	e762      	b.n	800406c <_dtoa_r+0x3a4>
 80041a6:	2602      	movs	r6, #2
 80041a8:	e765      	b.n	8004076 <_dtoa_r+0x3ae>
 80041aa:	46b8      	mov	r8, r7
 80041ac:	9c08      	ldr	r4, [sp, #32]
 80041ae:	e784      	b.n	80040ba <_dtoa_r+0x3f2>
 80041b0:	4b27      	ldr	r3, [pc, #156]	@ (8004250 <_dtoa_r+0x588>)
 80041b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80041b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80041b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80041bc:	4454      	add	r4, sl
 80041be:	2900      	cmp	r1, #0
 80041c0:	d054      	beq.n	800426c <_dtoa_r+0x5a4>
 80041c2:	2000      	movs	r0, #0
 80041c4:	4928      	ldr	r1, [pc, #160]	@ (8004268 <_dtoa_r+0x5a0>)
 80041c6:	f7fc fb65 	bl	8000894 <__aeabi_ddiv>
 80041ca:	4633      	mov	r3, r6
 80041cc:	462a      	mov	r2, r5
 80041ce:	f7fc f87f 	bl	80002d0 <__aeabi_dsub>
 80041d2:	4656      	mov	r6, sl
 80041d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80041d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041dc:	f7fc fce0 	bl	8000ba0 <__aeabi_d2iz>
 80041e0:	4605      	mov	r5, r0
 80041e2:	f7fc f9c3 	bl	800056c <__aeabi_i2d>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041ee:	f7fc f86f 	bl	80002d0 <__aeabi_dsub>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	3530      	adds	r5, #48	@ 0x30
 80041f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80041fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004200:	f806 5b01 	strb.w	r5, [r6], #1
 8004204:	f7fc fc8e 	bl	8000b24 <__aeabi_dcmplt>
 8004208:	2800      	cmp	r0, #0
 800420a:	d172      	bne.n	80042f2 <_dtoa_r+0x62a>
 800420c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004210:	2000      	movs	r0, #0
 8004212:	4911      	ldr	r1, [pc, #68]	@ (8004258 <_dtoa_r+0x590>)
 8004214:	f7fc f85c 	bl	80002d0 <__aeabi_dsub>
 8004218:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800421c:	f7fc fc82 	bl	8000b24 <__aeabi_dcmplt>
 8004220:	2800      	cmp	r0, #0
 8004222:	f040 80b4 	bne.w	800438e <_dtoa_r+0x6c6>
 8004226:	42a6      	cmp	r6, r4
 8004228:	f43f af70 	beq.w	800410c <_dtoa_r+0x444>
 800422c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004230:	2200      	movs	r2, #0
 8004232:	4b0a      	ldr	r3, [pc, #40]	@ (800425c <_dtoa_r+0x594>)
 8004234:	f7fc fa04 	bl	8000640 <__aeabi_dmul>
 8004238:	2200      	movs	r2, #0
 800423a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800423e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004242:	4b06      	ldr	r3, [pc, #24]	@ (800425c <_dtoa_r+0x594>)
 8004244:	f7fc f9fc 	bl	8000640 <__aeabi_dmul>
 8004248:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800424c:	e7c4      	b.n	80041d8 <_dtoa_r+0x510>
 800424e:	bf00      	nop
 8004250:	08005e58 	.word	0x08005e58
 8004254:	08005e30 	.word	0x08005e30
 8004258:	3ff00000 	.word	0x3ff00000
 800425c:	40240000 	.word	0x40240000
 8004260:	401c0000 	.word	0x401c0000
 8004264:	40140000 	.word	0x40140000
 8004268:	3fe00000 	.word	0x3fe00000
 800426c:	4631      	mov	r1, r6
 800426e:	4628      	mov	r0, r5
 8004270:	f7fc f9e6 	bl	8000640 <__aeabi_dmul>
 8004274:	4656      	mov	r6, sl
 8004276:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800427a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800427c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004280:	f7fc fc8e 	bl	8000ba0 <__aeabi_d2iz>
 8004284:	4605      	mov	r5, r0
 8004286:	f7fc f971 	bl	800056c <__aeabi_i2d>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004292:	f7fc f81d 	bl	80002d0 <__aeabi_dsub>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	3530      	adds	r5, #48	@ 0x30
 800429c:	f806 5b01 	strb.w	r5, [r6], #1
 80042a0:	42a6      	cmp	r6, r4
 80042a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	d124      	bne.n	80042f6 <_dtoa_r+0x62e>
 80042ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80042b0:	4bae      	ldr	r3, [pc, #696]	@ (800456c <_dtoa_r+0x8a4>)
 80042b2:	f7fc f80f 	bl	80002d4 <__adddf3>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042be:	f7fc fc4f 	bl	8000b60 <__aeabi_dcmpgt>
 80042c2:	2800      	cmp	r0, #0
 80042c4:	d163      	bne.n	800438e <_dtoa_r+0x6c6>
 80042c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80042ca:	2000      	movs	r0, #0
 80042cc:	49a7      	ldr	r1, [pc, #668]	@ (800456c <_dtoa_r+0x8a4>)
 80042ce:	f7fb ffff 	bl	80002d0 <__aeabi_dsub>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042da:	f7fc fc23 	bl	8000b24 <__aeabi_dcmplt>
 80042de:	2800      	cmp	r0, #0
 80042e0:	f43f af14 	beq.w	800410c <_dtoa_r+0x444>
 80042e4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80042e6:	1e73      	subs	r3, r6, #1
 80042e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80042ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80042ee:	2b30      	cmp	r3, #48	@ 0x30
 80042f0:	d0f8      	beq.n	80042e4 <_dtoa_r+0x61c>
 80042f2:	4647      	mov	r7, r8
 80042f4:	e03b      	b.n	800436e <_dtoa_r+0x6a6>
 80042f6:	4b9e      	ldr	r3, [pc, #632]	@ (8004570 <_dtoa_r+0x8a8>)
 80042f8:	f7fc f9a2 	bl	8000640 <__aeabi_dmul>
 80042fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004300:	e7bc      	b.n	800427c <_dtoa_r+0x5b4>
 8004302:	4656      	mov	r6, sl
 8004304:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800430c:	4620      	mov	r0, r4
 800430e:	4629      	mov	r1, r5
 8004310:	f7fc fac0 	bl	8000894 <__aeabi_ddiv>
 8004314:	f7fc fc44 	bl	8000ba0 <__aeabi_d2iz>
 8004318:	4680      	mov	r8, r0
 800431a:	f7fc f927 	bl	800056c <__aeabi_i2d>
 800431e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004322:	f7fc f98d 	bl	8000640 <__aeabi_dmul>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4620      	mov	r0, r4
 800432c:	4629      	mov	r1, r5
 800432e:	f7fb ffcf 	bl	80002d0 <__aeabi_dsub>
 8004332:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004336:	9d08      	ldr	r5, [sp, #32]
 8004338:	f806 4b01 	strb.w	r4, [r6], #1
 800433c:	eba6 040a 	sub.w	r4, r6, sl
 8004340:	42a5      	cmp	r5, r4
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	d133      	bne.n	80043b0 <_dtoa_r+0x6e8>
 8004348:	f7fb ffc4 	bl	80002d4 <__adddf3>
 800434c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004350:	4604      	mov	r4, r0
 8004352:	460d      	mov	r5, r1
 8004354:	f7fc fc04 	bl	8000b60 <__aeabi_dcmpgt>
 8004358:	b9c0      	cbnz	r0, 800438c <_dtoa_r+0x6c4>
 800435a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800435e:	4620      	mov	r0, r4
 8004360:	4629      	mov	r1, r5
 8004362:	f7fc fbd5 	bl	8000b10 <__aeabi_dcmpeq>
 8004366:	b110      	cbz	r0, 800436e <_dtoa_r+0x6a6>
 8004368:	f018 0f01 	tst.w	r8, #1
 800436c:	d10e      	bne.n	800438c <_dtoa_r+0x6c4>
 800436e:	4648      	mov	r0, r9
 8004370:	9903      	ldr	r1, [sp, #12]
 8004372:	f000 fbbb 	bl	8004aec <_Bfree>
 8004376:	2300      	movs	r3, #0
 8004378:	7033      	strb	r3, [r6, #0]
 800437a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800437c:	3701      	adds	r7, #1
 800437e:	601f      	str	r7, [r3, #0]
 8004380:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 824b 	beq.w	800481e <_dtoa_r+0xb56>
 8004388:	601e      	str	r6, [r3, #0]
 800438a:	e248      	b.n	800481e <_dtoa_r+0xb56>
 800438c:	46b8      	mov	r8, r7
 800438e:	4633      	mov	r3, r6
 8004390:	461e      	mov	r6, r3
 8004392:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004396:	2a39      	cmp	r2, #57	@ 0x39
 8004398:	d106      	bne.n	80043a8 <_dtoa_r+0x6e0>
 800439a:	459a      	cmp	sl, r3
 800439c:	d1f8      	bne.n	8004390 <_dtoa_r+0x6c8>
 800439e:	2230      	movs	r2, #48	@ 0x30
 80043a0:	f108 0801 	add.w	r8, r8, #1
 80043a4:	f88a 2000 	strb.w	r2, [sl]
 80043a8:	781a      	ldrb	r2, [r3, #0]
 80043aa:	3201      	adds	r2, #1
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	e7a0      	b.n	80042f2 <_dtoa_r+0x62a>
 80043b0:	2200      	movs	r2, #0
 80043b2:	4b6f      	ldr	r3, [pc, #444]	@ (8004570 <_dtoa_r+0x8a8>)
 80043b4:	f7fc f944 	bl	8000640 <__aeabi_dmul>
 80043b8:	2200      	movs	r2, #0
 80043ba:	2300      	movs	r3, #0
 80043bc:	4604      	mov	r4, r0
 80043be:	460d      	mov	r5, r1
 80043c0:	f7fc fba6 	bl	8000b10 <__aeabi_dcmpeq>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d09f      	beq.n	8004308 <_dtoa_r+0x640>
 80043c8:	e7d1      	b.n	800436e <_dtoa_r+0x6a6>
 80043ca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80043cc:	2a00      	cmp	r2, #0
 80043ce:	f000 80ea 	beq.w	80045a6 <_dtoa_r+0x8de>
 80043d2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80043d4:	2a01      	cmp	r2, #1
 80043d6:	f300 80cd 	bgt.w	8004574 <_dtoa_r+0x8ac>
 80043da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80043dc:	2a00      	cmp	r2, #0
 80043de:	f000 80c1 	beq.w	8004564 <_dtoa_r+0x89c>
 80043e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80043e6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80043e8:	9e04      	ldr	r6, [sp, #16]
 80043ea:	9a04      	ldr	r2, [sp, #16]
 80043ec:	2101      	movs	r1, #1
 80043ee:	441a      	add	r2, r3
 80043f0:	9204      	str	r2, [sp, #16]
 80043f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043f4:	4648      	mov	r0, r9
 80043f6:	441a      	add	r2, r3
 80043f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80043fa:	f000 fc2b 	bl	8004c54 <__i2b>
 80043fe:	4605      	mov	r5, r0
 8004400:	b166      	cbz	r6, 800441c <_dtoa_r+0x754>
 8004402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004404:	2b00      	cmp	r3, #0
 8004406:	dd09      	ble.n	800441c <_dtoa_r+0x754>
 8004408:	42b3      	cmp	r3, r6
 800440a:	bfa8      	it	ge
 800440c:	4633      	movge	r3, r6
 800440e:	9a04      	ldr	r2, [sp, #16]
 8004410:	1af6      	subs	r6, r6, r3
 8004412:	1ad2      	subs	r2, r2, r3
 8004414:	9204      	str	r2, [sp, #16]
 8004416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	9309      	str	r3, [sp, #36]	@ 0x24
 800441c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800441e:	b30b      	cbz	r3, 8004464 <_dtoa_r+0x79c>
 8004420:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 80c6 	beq.w	80045b4 <_dtoa_r+0x8ec>
 8004428:	2c00      	cmp	r4, #0
 800442a:	f000 80c0 	beq.w	80045ae <_dtoa_r+0x8e6>
 800442e:	4629      	mov	r1, r5
 8004430:	4622      	mov	r2, r4
 8004432:	4648      	mov	r0, r9
 8004434:	f000 fcc6 	bl	8004dc4 <__pow5mult>
 8004438:	9a03      	ldr	r2, [sp, #12]
 800443a:	4601      	mov	r1, r0
 800443c:	4605      	mov	r5, r0
 800443e:	4648      	mov	r0, r9
 8004440:	f000 fc1e 	bl	8004c80 <__multiply>
 8004444:	9903      	ldr	r1, [sp, #12]
 8004446:	4680      	mov	r8, r0
 8004448:	4648      	mov	r0, r9
 800444a:	f000 fb4f 	bl	8004aec <_Bfree>
 800444e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004450:	1b1b      	subs	r3, r3, r4
 8004452:	930a      	str	r3, [sp, #40]	@ 0x28
 8004454:	f000 80b1 	beq.w	80045ba <_dtoa_r+0x8f2>
 8004458:	4641      	mov	r1, r8
 800445a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800445c:	4648      	mov	r0, r9
 800445e:	f000 fcb1 	bl	8004dc4 <__pow5mult>
 8004462:	9003      	str	r0, [sp, #12]
 8004464:	2101      	movs	r1, #1
 8004466:	4648      	mov	r0, r9
 8004468:	f000 fbf4 	bl	8004c54 <__i2b>
 800446c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800446e:	4604      	mov	r4, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 81d8 	beq.w	8004826 <_dtoa_r+0xb5e>
 8004476:	461a      	mov	r2, r3
 8004478:	4601      	mov	r1, r0
 800447a:	4648      	mov	r0, r9
 800447c:	f000 fca2 	bl	8004dc4 <__pow5mult>
 8004480:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004482:	4604      	mov	r4, r0
 8004484:	2b01      	cmp	r3, #1
 8004486:	f300 809f 	bgt.w	80045c8 <_dtoa_r+0x900>
 800448a:	9b06      	ldr	r3, [sp, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f040 8097 	bne.w	80045c0 <_dtoa_r+0x8f8>
 8004492:	9b07      	ldr	r3, [sp, #28]
 8004494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004498:	2b00      	cmp	r3, #0
 800449a:	f040 8093 	bne.w	80045c4 <_dtoa_r+0x8fc>
 800449e:	9b07      	ldr	r3, [sp, #28]
 80044a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044a4:	0d1b      	lsrs	r3, r3, #20
 80044a6:	051b      	lsls	r3, r3, #20
 80044a8:	b133      	cbz	r3, 80044b8 <_dtoa_r+0x7f0>
 80044aa:	9b04      	ldr	r3, [sp, #16]
 80044ac:	3301      	adds	r3, #1
 80044ae:	9304      	str	r3, [sp, #16]
 80044b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044b2:	3301      	adds	r3, #1
 80044b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80044b6:	2301      	movs	r3, #1
 80044b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80044ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 81b8 	beq.w	8004832 <_dtoa_r+0xb6a>
 80044c2:	6923      	ldr	r3, [r4, #16]
 80044c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80044c8:	6918      	ldr	r0, [r3, #16]
 80044ca:	f000 fb77 	bl	8004bbc <__hi0bits>
 80044ce:	f1c0 0020 	rsb	r0, r0, #32
 80044d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044d4:	4418      	add	r0, r3
 80044d6:	f010 001f 	ands.w	r0, r0, #31
 80044da:	f000 8082 	beq.w	80045e2 <_dtoa_r+0x91a>
 80044de:	f1c0 0320 	rsb	r3, r0, #32
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	dd73      	ble.n	80045ce <_dtoa_r+0x906>
 80044e6:	9b04      	ldr	r3, [sp, #16]
 80044e8:	f1c0 001c 	rsb	r0, r0, #28
 80044ec:	4403      	add	r3, r0
 80044ee:	9304      	str	r3, [sp, #16]
 80044f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044f2:	4406      	add	r6, r0
 80044f4:	4403      	add	r3, r0
 80044f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80044f8:	9b04      	ldr	r3, [sp, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	dd05      	ble.n	800450a <_dtoa_r+0x842>
 80044fe:	461a      	mov	r2, r3
 8004500:	4648      	mov	r0, r9
 8004502:	9903      	ldr	r1, [sp, #12]
 8004504:	f000 fcb8 	bl	8004e78 <__lshift>
 8004508:	9003      	str	r0, [sp, #12]
 800450a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800450c:	2b00      	cmp	r3, #0
 800450e:	dd05      	ble.n	800451c <_dtoa_r+0x854>
 8004510:	4621      	mov	r1, r4
 8004512:	461a      	mov	r2, r3
 8004514:	4648      	mov	r0, r9
 8004516:	f000 fcaf 	bl	8004e78 <__lshift>
 800451a:	4604      	mov	r4, r0
 800451c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800451e:	2b00      	cmp	r3, #0
 8004520:	d061      	beq.n	80045e6 <_dtoa_r+0x91e>
 8004522:	4621      	mov	r1, r4
 8004524:	9803      	ldr	r0, [sp, #12]
 8004526:	f000 fd13 	bl	8004f50 <__mcmp>
 800452a:	2800      	cmp	r0, #0
 800452c:	da5b      	bge.n	80045e6 <_dtoa_r+0x91e>
 800452e:	2300      	movs	r3, #0
 8004530:	220a      	movs	r2, #10
 8004532:	4648      	mov	r0, r9
 8004534:	9903      	ldr	r1, [sp, #12]
 8004536:	f000 fafb 	bl	8004b30 <__multadd>
 800453a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800453c:	f107 38ff 	add.w	r8, r7, #4294967295
 8004540:	9003      	str	r0, [sp, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 8177 	beq.w	8004836 <_dtoa_r+0xb6e>
 8004548:	4629      	mov	r1, r5
 800454a:	2300      	movs	r3, #0
 800454c:	220a      	movs	r2, #10
 800454e:	4648      	mov	r0, r9
 8004550:	f000 faee 	bl	8004b30 <__multadd>
 8004554:	f1bb 0f00 	cmp.w	fp, #0
 8004558:	4605      	mov	r5, r0
 800455a:	dc6f      	bgt.n	800463c <_dtoa_r+0x974>
 800455c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800455e:	2b02      	cmp	r3, #2
 8004560:	dc49      	bgt.n	80045f6 <_dtoa_r+0x92e>
 8004562:	e06b      	b.n	800463c <_dtoa_r+0x974>
 8004564:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004566:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800456a:	e73c      	b.n	80043e6 <_dtoa_r+0x71e>
 800456c:	3fe00000 	.word	0x3fe00000
 8004570:	40240000 	.word	0x40240000
 8004574:	9b08      	ldr	r3, [sp, #32]
 8004576:	1e5c      	subs	r4, r3, #1
 8004578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800457a:	42a3      	cmp	r3, r4
 800457c:	db09      	blt.n	8004592 <_dtoa_r+0x8ca>
 800457e:	1b1c      	subs	r4, r3, r4
 8004580:	9b08      	ldr	r3, [sp, #32]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f6bf af30 	bge.w	80043e8 <_dtoa_r+0x720>
 8004588:	9b04      	ldr	r3, [sp, #16]
 800458a:	9a08      	ldr	r2, [sp, #32]
 800458c:	1a9e      	subs	r6, r3, r2
 800458e:	2300      	movs	r3, #0
 8004590:	e72b      	b.n	80043ea <_dtoa_r+0x722>
 8004592:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004594:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004596:	1ae3      	subs	r3, r4, r3
 8004598:	441a      	add	r2, r3
 800459a:	940a      	str	r4, [sp, #40]	@ 0x28
 800459c:	9e04      	ldr	r6, [sp, #16]
 800459e:	2400      	movs	r4, #0
 80045a0:	9b08      	ldr	r3, [sp, #32]
 80045a2:	920e      	str	r2, [sp, #56]	@ 0x38
 80045a4:	e721      	b.n	80043ea <_dtoa_r+0x722>
 80045a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80045a8:	9e04      	ldr	r6, [sp, #16]
 80045aa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80045ac:	e728      	b.n	8004400 <_dtoa_r+0x738>
 80045ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80045b2:	e751      	b.n	8004458 <_dtoa_r+0x790>
 80045b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80045b6:	9903      	ldr	r1, [sp, #12]
 80045b8:	e750      	b.n	800445c <_dtoa_r+0x794>
 80045ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80045be:	e751      	b.n	8004464 <_dtoa_r+0x79c>
 80045c0:	2300      	movs	r3, #0
 80045c2:	e779      	b.n	80044b8 <_dtoa_r+0x7f0>
 80045c4:	9b06      	ldr	r3, [sp, #24]
 80045c6:	e777      	b.n	80044b8 <_dtoa_r+0x7f0>
 80045c8:	2300      	movs	r3, #0
 80045ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80045cc:	e779      	b.n	80044c2 <_dtoa_r+0x7fa>
 80045ce:	d093      	beq.n	80044f8 <_dtoa_r+0x830>
 80045d0:	9a04      	ldr	r2, [sp, #16]
 80045d2:	331c      	adds	r3, #28
 80045d4:	441a      	add	r2, r3
 80045d6:	9204      	str	r2, [sp, #16]
 80045d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045da:	441e      	add	r6, r3
 80045dc:	441a      	add	r2, r3
 80045de:	9209      	str	r2, [sp, #36]	@ 0x24
 80045e0:	e78a      	b.n	80044f8 <_dtoa_r+0x830>
 80045e2:	4603      	mov	r3, r0
 80045e4:	e7f4      	b.n	80045d0 <_dtoa_r+0x908>
 80045e6:	9b08      	ldr	r3, [sp, #32]
 80045e8:	46b8      	mov	r8, r7
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	dc20      	bgt.n	8004630 <_dtoa_r+0x968>
 80045ee:	469b      	mov	fp, r3
 80045f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	dd1e      	ble.n	8004634 <_dtoa_r+0x96c>
 80045f6:	f1bb 0f00 	cmp.w	fp, #0
 80045fa:	f47f adb1 	bne.w	8004160 <_dtoa_r+0x498>
 80045fe:	4621      	mov	r1, r4
 8004600:	465b      	mov	r3, fp
 8004602:	2205      	movs	r2, #5
 8004604:	4648      	mov	r0, r9
 8004606:	f000 fa93 	bl	8004b30 <__multadd>
 800460a:	4601      	mov	r1, r0
 800460c:	4604      	mov	r4, r0
 800460e:	9803      	ldr	r0, [sp, #12]
 8004610:	f000 fc9e 	bl	8004f50 <__mcmp>
 8004614:	2800      	cmp	r0, #0
 8004616:	f77f ada3 	ble.w	8004160 <_dtoa_r+0x498>
 800461a:	4656      	mov	r6, sl
 800461c:	2331      	movs	r3, #49	@ 0x31
 800461e:	f108 0801 	add.w	r8, r8, #1
 8004622:	f806 3b01 	strb.w	r3, [r6], #1
 8004626:	e59f      	b.n	8004168 <_dtoa_r+0x4a0>
 8004628:	46b8      	mov	r8, r7
 800462a:	9c08      	ldr	r4, [sp, #32]
 800462c:	4625      	mov	r5, r4
 800462e:	e7f4      	b.n	800461a <_dtoa_r+0x952>
 8004630:	f8dd b020 	ldr.w	fp, [sp, #32]
 8004634:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 8101 	beq.w	800483e <_dtoa_r+0xb76>
 800463c:	2e00      	cmp	r6, #0
 800463e:	dd05      	ble.n	800464c <_dtoa_r+0x984>
 8004640:	4629      	mov	r1, r5
 8004642:	4632      	mov	r2, r6
 8004644:	4648      	mov	r0, r9
 8004646:	f000 fc17 	bl	8004e78 <__lshift>
 800464a:	4605      	mov	r5, r0
 800464c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800464e:	2b00      	cmp	r3, #0
 8004650:	d05c      	beq.n	800470c <_dtoa_r+0xa44>
 8004652:	4648      	mov	r0, r9
 8004654:	6869      	ldr	r1, [r5, #4]
 8004656:	f000 fa09 	bl	8004a6c <_Balloc>
 800465a:	4606      	mov	r6, r0
 800465c:	b928      	cbnz	r0, 800466a <_dtoa_r+0x9a2>
 800465e:	4602      	mov	r2, r0
 8004660:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004664:	4b80      	ldr	r3, [pc, #512]	@ (8004868 <_dtoa_r+0xba0>)
 8004666:	f7ff bb43 	b.w	8003cf0 <_dtoa_r+0x28>
 800466a:	692a      	ldr	r2, [r5, #16]
 800466c:	f105 010c 	add.w	r1, r5, #12
 8004670:	3202      	adds	r2, #2
 8004672:	0092      	lsls	r2, r2, #2
 8004674:	300c      	adds	r0, #12
 8004676:	f000 ff9d 	bl	80055b4 <memcpy>
 800467a:	2201      	movs	r2, #1
 800467c:	4631      	mov	r1, r6
 800467e:	4648      	mov	r0, r9
 8004680:	f000 fbfa 	bl	8004e78 <__lshift>
 8004684:	462f      	mov	r7, r5
 8004686:	4605      	mov	r5, r0
 8004688:	f10a 0301 	add.w	r3, sl, #1
 800468c:	9304      	str	r3, [sp, #16]
 800468e:	eb0a 030b 	add.w	r3, sl, fp
 8004692:	930a      	str	r3, [sp, #40]	@ 0x28
 8004694:	9b06      	ldr	r3, [sp, #24]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	9309      	str	r3, [sp, #36]	@ 0x24
 800469c:	9b04      	ldr	r3, [sp, #16]
 800469e:	4621      	mov	r1, r4
 80046a0:	9803      	ldr	r0, [sp, #12]
 80046a2:	f103 3bff 	add.w	fp, r3, #4294967295
 80046a6:	f7ff fa84 	bl	8003bb2 <quorem>
 80046aa:	4603      	mov	r3, r0
 80046ac:	4639      	mov	r1, r7
 80046ae:	3330      	adds	r3, #48	@ 0x30
 80046b0:	9006      	str	r0, [sp, #24]
 80046b2:	9803      	ldr	r0, [sp, #12]
 80046b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80046b6:	f000 fc4b 	bl	8004f50 <__mcmp>
 80046ba:	462a      	mov	r2, r5
 80046bc:	9008      	str	r0, [sp, #32]
 80046be:	4621      	mov	r1, r4
 80046c0:	4648      	mov	r0, r9
 80046c2:	f000 fc61 	bl	8004f88 <__mdiff>
 80046c6:	68c2      	ldr	r2, [r0, #12]
 80046c8:	4606      	mov	r6, r0
 80046ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80046cc:	bb02      	cbnz	r2, 8004710 <_dtoa_r+0xa48>
 80046ce:	4601      	mov	r1, r0
 80046d0:	9803      	ldr	r0, [sp, #12]
 80046d2:	f000 fc3d 	bl	8004f50 <__mcmp>
 80046d6:	4602      	mov	r2, r0
 80046d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80046da:	4631      	mov	r1, r6
 80046dc:	4648      	mov	r0, r9
 80046de:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80046e2:	f000 fa03 	bl	8004aec <_Bfree>
 80046e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80046e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80046ea:	9e04      	ldr	r6, [sp, #16]
 80046ec:	ea42 0103 	orr.w	r1, r2, r3
 80046f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046f2:	4319      	orrs	r1, r3
 80046f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80046f6:	d10d      	bne.n	8004714 <_dtoa_r+0xa4c>
 80046f8:	2b39      	cmp	r3, #57	@ 0x39
 80046fa:	d027      	beq.n	800474c <_dtoa_r+0xa84>
 80046fc:	9a08      	ldr	r2, [sp, #32]
 80046fe:	2a00      	cmp	r2, #0
 8004700:	dd01      	ble.n	8004706 <_dtoa_r+0xa3e>
 8004702:	9b06      	ldr	r3, [sp, #24]
 8004704:	3331      	adds	r3, #49	@ 0x31
 8004706:	f88b 3000 	strb.w	r3, [fp]
 800470a:	e52e      	b.n	800416a <_dtoa_r+0x4a2>
 800470c:	4628      	mov	r0, r5
 800470e:	e7b9      	b.n	8004684 <_dtoa_r+0x9bc>
 8004710:	2201      	movs	r2, #1
 8004712:	e7e2      	b.n	80046da <_dtoa_r+0xa12>
 8004714:	9908      	ldr	r1, [sp, #32]
 8004716:	2900      	cmp	r1, #0
 8004718:	db04      	blt.n	8004724 <_dtoa_r+0xa5c>
 800471a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800471c:	4301      	orrs	r1, r0
 800471e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004720:	4301      	orrs	r1, r0
 8004722:	d120      	bne.n	8004766 <_dtoa_r+0xa9e>
 8004724:	2a00      	cmp	r2, #0
 8004726:	ddee      	ble.n	8004706 <_dtoa_r+0xa3e>
 8004728:	2201      	movs	r2, #1
 800472a:	9903      	ldr	r1, [sp, #12]
 800472c:	4648      	mov	r0, r9
 800472e:	9304      	str	r3, [sp, #16]
 8004730:	f000 fba2 	bl	8004e78 <__lshift>
 8004734:	4621      	mov	r1, r4
 8004736:	9003      	str	r0, [sp, #12]
 8004738:	f000 fc0a 	bl	8004f50 <__mcmp>
 800473c:	2800      	cmp	r0, #0
 800473e:	9b04      	ldr	r3, [sp, #16]
 8004740:	dc02      	bgt.n	8004748 <_dtoa_r+0xa80>
 8004742:	d1e0      	bne.n	8004706 <_dtoa_r+0xa3e>
 8004744:	07da      	lsls	r2, r3, #31
 8004746:	d5de      	bpl.n	8004706 <_dtoa_r+0xa3e>
 8004748:	2b39      	cmp	r3, #57	@ 0x39
 800474a:	d1da      	bne.n	8004702 <_dtoa_r+0xa3a>
 800474c:	2339      	movs	r3, #57	@ 0x39
 800474e:	f88b 3000 	strb.w	r3, [fp]
 8004752:	4633      	mov	r3, r6
 8004754:	461e      	mov	r6, r3
 8004756:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800475a:	3b01      	subs	r3, #1
 800475c:	2a39      	cmp	r2, #57	@ 0x39
 800475e:	d04e      	beq.n	80047fe <_dtoa_r+0xb36>
 8004760:	3201      	adds	r2, #1
 8004762:	701a      	strb	r2, [r3, #0]
 8004764:	e501      	b.n	800416a <_dtoa_r+0x4a2>
 8004766:	2a00      	cmp	r2, #0
 8004768:	dd03      	ble.n	8004772 <_dtoa_r+0xaaa>
 800476a:	2b39      	cmp	r3, #57	@ 0x39
 800476c:	d0ee      	beq.n	800474c <_dtoa_r+0xa84>
 800476e:	3301      	adds	r3, #1
 8004770:	e7c9      	b.n	8004706 <_dtoa_r+0xa3e>
 8004772:	9a04      	ldr	r2, [sp, #16]
 8004774:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004776:	f802 3c01 	strb.w	r3, [r2, #-1]
 800477a:	428a      	cmp	r2, r1
 800477c:	d028      	beq.n	80047d0 <_dtoa_r+0xb08>
 800477e:	2300      	movs	r3, #0
 8004780:	220a      	movs	r2, #10
 8004782:	9903      	ldr	r1, [sp, #12]
 8004784:	4648      	mov	r0, r9
 8004786:	f000 f9d3 	bl	8004b30 <__multadd>
 800478a:	42af      	cmp	r7, r5
 800478c:	9003      	str	r0, [sp, #12]
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	f04f 020a 	mov.w	r2, #10
 8004796:	4639      	mov	r1, r7
 8004798:	4648      	mov	r0, r9
 800479a:	d107      	bne.n	80047ac <_dtoa_r+0xae4>
 800479c:	f000 f9c8 	bl	8004b30 <__multadd>
 80047a0:	4607      	mov	r7, r0
 80047a2:	4605      	mov	r5, r0
 80047a4:	9b04      	ldr	r3, [sp, #16]
 80047a6:	3301      	adds	r3, #1
 80047a8:	9304      	str	r3, [sp, #16]
 80047aa:	e777      	b.n	800469c <_dtoa_r+0x9d4>
 80047ac:	f000 f9c0 	bl	8004b30 <__multadd>
 80047b0:	4629      	mov	r1, r5
 80047b2:	4607      	mov	r7, r0
 80047b4:	2300      	movs	r3, #0
 80047b6:	220a      	movs	r2, #10
 80047b8:	4648      	mov	r0, r9
 80047ba:	f000 f9b9 	bl	8004b30 <__multadd>
 80047be:	4605      	mov	r5, r0
 80047c0:	e7f0      	b.n	80047a4 <_dtoa_r+0xadc>
 80047c2:	f1bb 0f00 	cmp.w	fp, #0
 80047c6:	bfcc      	ite	gt
 80047c8:	465e      	movgt	r6, fp
 80047ca:	2601      	movle	r6, #1
 80047cc:	2700      	movs	r7, #0
 80047ce:	4456      	add	r6, sl
 80047d0:	2201      	movs	r2, #1
 80047d2:	9903      	ldr	r1, [sp, #12]
 80047d4:	4648      	mov	r0, r9
 80047d6:	9304      	str	r3, [sp, #16]
 80047d8:	f000 fb4e 	bl	8004e78 <__lshift>
 80047dc:	4621      	mov	r1, r4
 80047de:	9003      	str	r0, [sp, #12]
 80047e0:	f000 fbb6 	bl	8004f50 <__mcmp>
 80047e4:	2800      	cmp	r0, #0
 80047e6:	dcb4      	bgt.n	8004752 <_dtoa_r+0xa8a>
 80047e8:	d102      	bne.n	80047f0 <_dtoa_r+0xb28>
 80047ea:	9b04      	ldr	r3, [sp, #16]
 80047ec:	07db      	lsls	r3, r3, #31
 80047ee:	d4b0      	bmi.n	8004752 <_dtoa_r+0xa8a>
 80047f0:	4633      	mov	r3, r6
 80047f2:	461e      	mov	r6, r3
 80047f4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047f8:	2a30      	cmp	r2, #48	@ 0x30
 80047fa:	d0fa      	beq.n	80047f2 <_dtoa_r+0xb2a>
 80047fc:	e4b5      	b.n	800416a <_dtoa_r+0x4a2>
 80047fe:	459a      	cmp	sl, r3
 8004800:	d1a8      	bne.n	8004754 <_dtoa_r+0xa8c>
 8004802:	2331      	movs	r3, #49	@ 0x31
 8004804:	f108 0801 	add.w	r8, r8, #1
 8004808:	f88a 3000 	strb.w	r3, [sl]
 800480c:	e4ad      	b.n	800416a <_dtoa_r+0x4a2>
 800480e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004810:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800486c <_dtoa_r+0xba4>
 8004814:	b11b      	cbz	r3, 800481e <_dtoa_r+0xb56>
 8004816:	f10a 0308 	add.w	r3, sl, #8
 800481a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	4650      	mov	r0, sl
 8004820:	b017      	add	sp, #92	@ 0x5c
 8004822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004826:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004828:	2b01      	cmp	r3, #1
 800482a:	f77f ae2e 	ble.w	800448a <_dtoa_r+0x7c2>
 800482e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004830:	930a      	str	r3, [sp, #40]	@ 0x28
 8004832:	2001      	movs	r0, #1
 8004834:	e64d      	b.n	80044d2 <_dtoa_r+0x80a>
 8004836:	f1bb 0f00 	cmp.w	fp, #0
 800483a:	f77f aed9 	ble.w	80045f0 <_dtoa_r+0x928>
 800483e:	4656      	mov	r6, sl
 8004840:	4621      	mov	r1, r4
 8004842:	9803      	ldr	r0, [sp, #12]
 8004844:	f7ff f9b5 	bl	8003bb2 <quorem>
 8004848:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800484c:	f806 3b01 	strb.w	r3, [r6], #1
 8004850:	eba6 020a 	sub.w	r2, r6, sl
 8004854:	4593      	cmp	fp, r2
 8004856:	ddb4      	ble.n	80047c2 <_dtoa_r+0xafa>
 8004858:	2300      	movs	r3, #0
 800485a:	220a      	movs	r2, #10
 800485c:	4648      	mov	r0, r9
 800485e:	9903      	ldr	r1, [sp, #12]
 8004860:	f000 f966 	bl	8004b30 <__multadd>
 8004864:	9003      	str	r0, [sp, #12]
 8004866:	e7eb      	b.n	8004840 <_dtoa_r+0xb78>
 8004868:	08005d62 	.word	0x08005d62
 800486c:	08005ce6 	.word	0x08005ce6

08004870 <_free_r>:
 8004870:	b538      	push	{r3, r4, r5, lr}
 8004872:	4605      	mov	r5, r0
 8004874:	2900      	cmp	r1, #0
 8004876:	d040      	beq.n	80048fa <_free_r+0x8a>
 8004878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800487c:	1f0c      	subs	r4, r1, #4
 800487e:	2b00      	cmp	r3, #0
 8004880:	bfb8      	it	lt
 8004882:	18e4      	addlt	r4, r4, r3
 8004884:	f000 f8e6 	bl	8004a54 <__malloc_lock>
 8004888:	4a1c      	ldr	r2, [pc, #112]	@ (80048fc <_free_r+0x8c>)
 800488a:	6813      	ldr	r3, [r2, #0]
 800488c:	b933      	cbnz	r3, 800489c <_free_r+0x2c>
 800488e:	6063      	str	r3, [r4, #4]
 8004890:	6014      	str	r4, [r2, #0]
 8004892:	4628      	mov	r0, r5
 8004894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004898:	f000 b8e2 	b.w	8004a60 <__malloc_unlock>
 800489c:	42a3      	cmp	r3, r4
 800489e:	d908      	bls.n	80048b2 <_free_r+0x42>
 80048a0:	6820      	ldr	r0, [r4, #0]
 80048a2:	1821      	adds	r1, r4, r0
 80048a4:	428b      	cmp	r3, r1
 80048a6:	bf01      	itttt	eq
 80048a8:	6819      	ldreq	r1, [r3, #0]
 80048aa:	685b      	ldreq	r3, [r3, #4]
 80048ac:	1809      	addeq	r1, r1, r0
 80048ae:	6021      	streq	r1, [r4, #0]
 80048b0:	e7ed      	b.n	800488e <_free_r+0x1e>
 80048b2:	461a      	mov	r2, r3
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	b10b      	cbz	r3, 80048bc <_free_r+0x4c>
 80048b8:	42a3      	cmp	r3, r4
 80048ba:	d9fa      	bls.n	80048b2 <_free_r+0x42>
 80048bc:	6811      	ldr	r1, [r2, #0]
 80048be:	1850      	adds	r0, r2, r1
 80048c0:	42a0      	cmp	r0, r4
 80048c2:	d10b      	bne.n	80048dc <_free_r+0x6c>
 80048c4:	6820      	ldr	r0, [r4, #0]
 80048c6:	4401      	add	r1, r0
 80048c8:	1850      	adds	r0, r2, r1
 80048ca:	4283      	cmp	r3, r0
 80048cc:	6011      	str	r1, [r2, #0]
 80048ce:	d1e0      	bne.n	8004892 <_free_r+0x22>
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	4408      	add	r0, r1
 80048d6:	6010      	str	r0, [r2, #0]
 80048d8:	6053      	str	r3, [r2, #4]
 80048da:	e7da      	b.n	8004892 <_free_r+0x22>
 80048dc:	d902      	bls.n	80048e4 <_free_r+0x74>
 80048de:	230c      	movs	r3, #12
 80048e0:	602b      	str	r3, [r5, #0]
 80048e2:	e7d6      	b.n	8004892 <_free_r+0x22>
 80048e4:	6820      	ldr	r0, [r4, #0]
 80048e6:	1821      	adds	r1, r4, r0
 80048e8:	428b      	cmp	r3, r1
 80048ea:	bf01      	itttt	eq
 80048ec:	6819      	ldreq	r1, [r3, #0]
 80048ee:	685b      	ldreq	r3, [r3, #4]
 80048f0:	1809      	addeq	r1, r1, r0
 80048f2:	6021      	streq	r1, [r4, #0]
 80048f4:	6063      	str	r3, [r4, #4]
 80048f6:	6054      	str	r4, [r2, #4]
 80048f8:	e7cb      	b.n	8004892 <_free_r+0x22>
 80048fa:	bd38      	pop	{r3, r4, r5, pc}
 80048fc:	200003e4 	.word	0x200003e4

08004900 <malloc>:
 8004900:	4b02      	ldr	r3, [pc, #8]	@ (800490c <malloc+0xc>)
 8004902:	4601      	mov	r1, r0
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	f000 b825 	b.w	8004954 <_malloc_r>
 800490a:	bf00      	nop
 800490c:	2000002c 	.word	0x2000002c

08004910 <sbrk_aligned>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	4e0f      	ldr	r6, [pc, #60]	@ (8004950 <sbrk_aligned+0x40>)
 8004914:	460c      	mov	r4, r1
 8004916:	6831      	ldr	r1, [r6, #0]
 8004918:	4605      	mov	r5, r0
 800491a:	b911      	cbnz	r1, 8004922 <sbrk_aligned+0x12>
 800491c:	f000 fe3a 	bl	8005594 <_sbrk_r>
 8004920:	6030      	str	r0, [r6, #0]
 8004922:	4621      	mov	r1, r4
 8004924:	4628      	mov	r0, r5
 8004926:	f000 fe35 	bl	8005594 <_sbrk_r>
 800492a:	1c43      	adds	r3, r0, #1
 800492c:	d103      	bne.n	8004936 <sbrk_aligned+0x26>
 800492e:	f04f 34ff 	mov.w	r4, #4294967295
 8004932:	4620      	mov	r0, r4
 8004934:	bd70      	pop	{r4, r5, r6, pc}
 8004936:	1cc4      	adds	r4, r0, #3
 8004938:	f024 0403 	bic.w	r4, r4, #3
 800493c:	42a0      	cmp	r0, r4
 800493e:	d0f8      	beq.n	8004932 <sbrk_aligned+0x22>
 8004940:	1a21      	subs	r1, r4, r0
 8004942:	4628      	mov	r0, r5
 8004944:	f000 fe26 	bl	8005594 <_sbrk_r>
 8004948:	3001      	adds	r0, #1
 800494a:	d1f2      	bne.n	8004932 <sbrk_aligned+0x22>
 800494c:	e7ef      	b.n	800492e <sbrk_aligned+0x1e>
 800494e:	bf00      	nop
 8004950:	200003e0 	.word	0x200003e0

08004954 <_malloc_r>:
 8004954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004958:	1ccd      	adds	r5, r1, #3
 800495a:	f025 0503 	bic.w	r5, r5, #3
 800495e:	3508      	adds	r5, #8
 8004960:	2d0c      	cmp	r5, #12
 8004962:	bf38      	it	cc
 8004964:	250c      	movcc	r5, #12
 8004966:	2d00      	cmp	r5, #0
 8004968:	4606      	mov	r6, r0
 800496a:	db01      	blt.n	8004970 <_malloc_r+0x1c>
 800496c:	42a9      	cmp	r1, r5
 800496e:	d904      	bls.n	800497a <_malloc_r+0x26>
 8004970:	230c      	movs	r3, #12
 8004972:	6033      	str	r3, [r6, #0]
 8004974:	2000      	movs	r0, #0
 8004976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800497a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a50 <_malloc_r+0xfc>
 800497e:	f000 f869 	bl	8004a54 <__malloc_lock>
 8004982:	f8d8 3000 	ldr.w	r3, [r8]
 8004986:	461c      	mov	r4, r3
 8004988:	bb44      	cbnz	r4, 80049dc <_malloc_r+0x88>
 800498a:	4629      	mov	r1, r5
 800498c:	4630      	mov	r0, r6
 800498e:	f7ff ffbf 	bl	8004910 <sbrk_aligned>
 8004992:	1c43      	adds	r3, r0, #1
 8004994:	4604      	mov	r4, r0
 8004996:	d158      	bne.n	8004a4a <_malloc_r+0xf6>
 8004998:	f8d8 4000 	ldr.w	r4, [r8]
 800499c:	4627      	mov	r7, r4
 800499e:	2f00      	cmp	r7, #0
 80049a0:	d143      	bne.n	8004a2a <_malloc_r+0xd6>
 80049a2:	2c00      	cmp	r4, #0
 80049a4:	d04b      	beq.n	8004a3e <_malloc_r+0xea>
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	4639      	mov	r1, r7
 80049aa:	4630      	mov	r0, r6
 80049ac:	eb04 0903 	add.w	r9, r4, r3
 80049b0:	f000 fdf0 	bl	8005594 <_sbrk_r>
 80049b4:	4581      	cmp	r9, r0
 80049b6:	d142      	bne.n	8004a3e <_malloc_r+0xea>
 80049b8:	6821      	ldr	r1, [r4, #0]
 80049ba:	4630      	mov	r0, r6
 80049bc:	1a6d      	subs	r5, r5, r1
 80049be:	4629      	mov	r1, r5
 80049c0:	f7ff ffa6 	bl	8004910 <sbrk_aligned>
 80049c4:	3001      	adds	r0, #1
 80049c6:	d03a      	beq.n	8004a3e <_malloc_r+0xea>
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	442b      	add	r3, r5
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	f8d8 3000 	ldr.w	r3, [r8]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	bb62      	cbnz	r2, 8004a30 <_malloc_r+0xdc>
 80049d6:	f8c8 7000 	str.w	r7, [r8]
 80049da:	e00f      	b.n	80049fc <_malloc_r+0xa8>
 80049dc:	6822      	ldr	r2, [r4, #0]
 80049de:	1b52      	subs	r2, r2, r5
 80049e0:	d420      	bmi.n	8004a24 <_malloc_r+0xd0>
 80049e2:	2a0b      	cmp	r2, #11
 80049e4:	d917      	bls.n	8004a16 <_malloc_r+0xc2>
 80049e6:	1961      	adds	r1, r4, r5
 80049e8:	42a3      	cmp	r3, r4
 80049ea:	6025      	str	r5, [r4, #0]
 80049ec:	bf18      	it	ne
 80049ee:	6059      	strne	r1, [r3, #4]
 80049f0:	6863      	ldr	r3, [r4, #4]
 80049f2:	bf08      	it	eq
 80049f4:	f8c8 1000 	streq.w	r1, [r8]
 80049f8:	5162      	str	r2, [r4, r5]
 80049fa:	604b      	str	r3, [r1, #4]
 80049fc:	4630      	mov	r0, r6
 80049fe:	f000 f82f 	bl	8004a60 <__malloc_unlock>
 8004a02:	f104 000b 	add.w	r0, r4, #11
 8004a06:	1d23      	adds	r3, r4, #4
 8004a08:	f020 0007 	bic.w	r0, r0, #7
 8004a0c:	1ac2      	subs	r2, r0, r3
 8004a0e:	bf1c      	itt	ne
 8004a10:	1a1b      	subne	r3, r3, r0
 8004a12:	50a3      	strne	r3, [r4, r2]
 8004a14:	e7af      	b.n	8004976 <_malloc_r+0x22>
 8004a16:	6862      	ldr	r2, [r4, #4]
 8004a18:	42a3      	cmp	r3, r4
 8004a1a:	bf0c      	ite	eq
 8004a1c:	f8c8 2000 	streq.w	r2, [r8]
 8004a20:	605a      	strne	r2, [r3, #4]
 8004a22:	e7eb      	b.n	80049fc <_malloc_r+0xa8>
 8004a24:	4623      	mov	r3, r4
 8004a26:	6864      	ldr	r4, [r4, #4]
 8004a28:	e7ae      	b.n	8004988 <_malloc_r+0x34>
 8004a2a:	463c      	mov	r4, r7
 8004a2c:	687f      	ldr	r7, [r7, #4]
 8004a2e:	e7b6      	b.n	800499e <_malloc_r+0x4a>
 8004a30:	461a      	mov	r2, r3
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	d1fb      	bne.n	8004a30 <_malloc_r+0xdc>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	6053      	str	r3, [r2, #4]
 8004a3c:	e7de      	b.n	80049fc <_malloc_r+0xa8>
 8004a3e:	230c      	movs	r3, #12
 8004a40:	4630      	mov	r0, r6
 8004a42:	6033      	str	r3, [r6, #0]
 8004a44:	f000 f80c 	bl	8004a60 <__malloc_unlock>
 8004a48:	e794      	b.n	8004974 <_malloc_r+0x20>
 8004a4a:	6005      	str	r5, [r0, #0]
 8004a4c:	e7d6      	b.n	80049fc <_malloc_r+0xa8>
 8004a4e:	bf00      	nop
 8004a50:	200003e4 	.word	0x200003e4

08004a54 <__malloc_lock>:
 8004a54:	4801      	ldr	r0, [pc, #4]	@ (8004a5c <__malloc_lock+0x8>)
 8004a56:	f7ff b89c 	b.w	8003b92 <__retarget_lock_acquire_recursive>
 8004a5a:	bf00      	nop
 8004a5c:	200003dc 	.word	0x200003dc

08004a60 <__malloc_unlock>:
 8004a60:	4801      	ldr	r0, [pc, #4]	@ (8004a68 <__malloc_unlock+0x8>)
 8004a62:	f7ff b897 	b.w	8003b94 <__retarget_lock_release_recursive>
 8004a66:	bf00      	nop
 8004a68:	200003dc 	.word	0x200003dc

08004a6c <_Balloc>:
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	69c6      	ldr	r6, [r0, #28]
 8004a70:	4604      	mov	r4, r0
 8004a72:	460d      	mov	r5, r1
 8004a74:	b976      	cbnz	r6, 8004a94 <_Balloc+0x28>
 8004a76:	2010      	movs	r0, #16
 8004a78:	f7ff ff42 	bl	8004900 <malloc>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	61e0      	str	r0, [r4, #28]
 8004a80:	b920      	cbnz	r0, 8004a8c <_Balloc+0x20>
 8004a82:	216b      	movs	r1, #107	@ 0x6b
 8004a84:	4b17      	ldr	r3, [pc, #92]	@ (8004ae4 <_Balloc+0x78>)
 8004a86:	4818      	ldr	r0, [pc, #96]	@ (8004ae8 <_Balloc+0x7c>)
 8004a88:	f000 fda2 	bl	80055d0 <__assert_func>
 8004a8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a90:	6006      	str	r6, [r0, #0]
 8004a92:	60c6      	str	r6, [r0, #12]
 8004a94:	69e6      	ldr	r6, [r4, #28]
 8004a96:	68f3      	ldr	r3, [r6, #12]
 8004a98:	b183      	cbz	r3, 8004abc <_Balloc+0x50>
 8004a9a:	69e3      	ldr	r3, [r4, #28]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004aa2:	b9b8      	cbnz	r0, 8004ad4 <_Balloc+0x68>
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	fa01 f605 	lsl.w	r6, r1, r5
 8004aaa:	1d72      	adds	r2, r6, #5
 8004aac:	4620      	mov	r0, r4
 8004aae:	0092      	lsls	r2, r2, #2
 8004ab0:	f000 fdac 	bl	800560c <_calloc_r>
 8004ab4:	b160      	cbz	r0, 8004ad0 <_Balloc+0x64>
 8004ab6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004aba:	e00e      	b.n	8004ada <_Balloc+0x6e>
 8004abc:	2221      	movs	r2, #33	@ 0x21
 8004abe:	2104      	movs	r1, #4
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	f000 fda3 	bl	800560c <_calloc_r>
 8004ac6:	69e3      	ldr	r3, [r4, #28]
 8004ac8:	60f0      	str	r0, [r6, #12]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e4      	bne.n	8004a9a <_Balloc+0x2e>
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	bd70      	pop	{r4, r5, r6, pc}
 8004ad4:	6802      	ldr	r2, [r0, #0]
 8004ad6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004ada:	2300      	movs	r3, #0
 8004adc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ae0:	e7f7      	b.n	8004ad2 <_Balloc+0x66>
 8004ae2:	bf00      	nop
 8004ae4:	08005cf3 	.word	0x08005cf3
 8004ae8:	08005d73 	.word	0x08005d73

08004aec <_Bfree>:
 8004aec:	b570      	push	{r4, r5, r6, lr}
 8004aee:	69c6      	ldr	r6, [r0, #28]
 8004af0:	4605      	mov	r5, r0
 8004af2:	460c      	mov	r4, r1
 8004af4:	b976      	cbnz	r6, 8004b14 <_Bfree+0x28>
 8004af6:	2010      	movs	r0, #16
 8004af8:	f7ff ff02 	bl	8004900 <malloc>
 8004afc:	4602      	mov	r2, r0
 8004afe:	61e8      	str	r0, [r5, #28]
 8004b00:	b920      	cbnz	r0, 8004b0c <_Bfree+0x20>
 8004b02:	218f      	movs	r1, #143	@ 0x8f
 8004b04:	4b08      	ldr	r3, [pc, #32]	@ (8004b28 <_Bfree+0x3c>)
 8004b06:	4809      	ldr	r0, [pc, #36]	@ (8004b2c <_Bfree+0x40>)
 8004b08:	f000 fd62 	bl	80055d0 <__assert_func>
 8004b0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b10:	6006      	str	r6, [r0, #0]
 8004b12:	60c6      	str	r6, [r0, #12]
 8004b14:	b13c      	cbz	r4, 8004b26 <_Bfree+0x3a>
 8004b16:	69eb      	ldr	r3, [r5, #28]
 8004b18:	6862      	ldr	r2, [r4, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b20:	6021      	str	r1, [r4, #0]
 8004b22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
 8004b28:	08005cf3 	.word	0x08005cf3
 8004b2c:	08005d73 	.word	0x08005d73

08004b30 <__multadd>:
 8004b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b34:	4607      	mov	r7, r0
 8004b36:	460c      	mov	r4, r1
 8004b38:	461e      	mov	r6, r3
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	690d      	ldr	r5, [r1, #16]
 8004b3e:	f101 0c14 	add.w	ip, r1, #20
 8004b42:	f8dc 3000 	ldr.w	r3, [ip]
 8004b46:	3001      	adds	r0, #1
 8004b48:	b299      	uxth	r1, r3
 8004b4a:	fb02 6101 	mla	r1, r2, r1, r6
 8004b4e:	0c1e      	lsrs	r6, r3, #16
 8004b50:	0c0b      	lsrs	r3, r1, #16
 8004b52:	fb02 3306 	mla	r3, r2, r6, r3
 8004b56:	b289      	uxth	r1, r1
 8004b58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004b5c:	4285      	cmp	r5, r0
 8004b5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004b62:	f84c 1b04 	str.w	r1, [ip], #4
 8004b66:	dcec      	bgt.n	8004b42 <__multadd+0x12>
 8004b68:	b30e      	cbz	r6, 8004bae <__multadd+0x7e>
 8004b6a:	68a3      	ldr	r3, [r4, #8]
 8004b6c:	42ab      	cmp	r3, r5
 8004b6e:	dc19      	bgt.n	8004ba4 <__multadd+0x74>
 8004b70:	6861      	ldr	r1, [r4, #4]
 8004b72:	4638      	mov	r0, r7
 8004b74:	3101      	adds	r1, #1
 8004b76:	f7ff ff79 	bl	8004a6c <_Balloc>
 8004b7a:	4680      	mov	r8, r0
 8004b7c:	b928      	cbnz	r0, 8004b8a <__multadd+0x5a>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	21ba      	movs	r1, #186	@ 0xba
 8004b82:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb4 <__multadd+0x84>)
 8004b84:	480c      	ldr	r0, [pc, #48]	@ (8004bb8 <__multadd+0x88>)
 8004b86:	f000 fd23 	bl	80055d0 <__assert_func>
 8004b8a:	6922      	ldr	r2, [r4, #16]
 8004b8c:	f104 010c 	add.w	r1, r4, #12
 8004b90:	3202      	adds	r2, #2
 8004b92:	0092      	lsls	r2, r2, #2
 8004b94:	300c      	adds	r0, #12
 8004b96:	f000 fd0d 	bl	80055b4 <memcpy>
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	4638      	mov	r0, r7
 8004b9e:	f7ff ffa5 	bl	8004aec <_Bfree>
 8004ba2:	4644      	mov	r4, r8
 8004ba4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ba8:	3501      	adds	r5, #1
 8004baa:	615e      	str	r6, [r3, #20]
 8004bac:	6125      	str	r5, [r4, #16]
 8004bae:	4620      	mov	r0, r4
 8004bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bb4:	08005d62 	.word	0x08005d62
 8004bb8:	08005d73 	.word	0x08005d73

08004bbc <__hi0bits>:
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004bc2:	bf3a      	itte	cc
 8004bc4:	0403      	lslcc	r3, r0, #16
 8004bc6:	2010      	movcc	r0, #16
 8004bc8:	2000      	movcs	r0, #0
 8004bca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bce:	bf3c      	itt	cc
 8004bd0:	021b      	lslcc	r3, r3, #8
 8004bd2:	3008      	addcc	r0, #8
 8004bd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bd8:	bf3c      	itt	cc
 8004bda:	011b      	lslcc	r3, r3, #4
 8004bdc:	3004      	addcc	r0, #4
 8004bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be2:	bf3c      	itt	cc
 8004be4:	009b      	lslcc	r3, r3, #2
 8004be6:	3002      	addcc	r0, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	db05      	blt.n	8004bf8 <__hi0bits+0x3c>
 8004bec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004bf0:	f100 0001 	add.w	r0, r0, #1
 8004bf4:	bf08      	it	eq
 8004bf6:	2020      	moveq	r0, #32
 8004bf8:	4770      	bx	lr

08004bfa <__lo0bits>:
 8004bfa:	6803      	ldr	r3, [r0, #0]
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	f013 0007 	ands.w	r0, r3, #7
 8004c02:	d00b      	beq.n	8004c1c <__lo0bits+0x22>
 8004c04:	07d9      	lsls	r1, r3, #31
 8004c06:	d421      	bmi.n	8004c4c <__lo0bits+0x52>
 8004c08:	0798      	lsls	r0, r3, #30
 8004c0a:	bf49      	itett	mi
 8004c0c:	085b      	lsrmi	r3, r3, #1
 8004c0e:	089b      	lsrpl	r3, r3, #2
 8004c10:	2001      	movmi	r0, #1
 8004c12:	6013      	strmi	r3, [r2, #0]
 8004c14:	bf5c      	itt	pl
 8004c16:	2002      	movpl	r0, #2
 8004c18:	6013      	strpl	r3, [r2, #0]
 8004c1a:	4770      	bx	lr
 8004c1c:	b299      	uxth	r1, r3
 8004c1e:	b909      	cbnz	r1, 8004c24 <__lo0bits+0x2a>
 8004c20:	2010      	movs	r0, #16
 8004c22:	0c1b      	lsrs	r3, r3, #16
 8004c24:	b2d9      	uxtb	r1, r3
 8004c26:	b909      	cbnz	r1, 8004c2c <__lo0bits+0x32>
 8004c28:	3008      	adds	r0, #8
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	0719      	lsls	r1, r3, #28
 8004c2e:	bf04      	itt	eq
 8004c30:	091b      	lsreq	r3, r3, #4
 8004c32:	3004      	addeq	r0, #4
 8004c34:	0799      	lsls	r1, r3, #30
 8004c36:	bf04      	itt	eq
 8004c38:	089b      	lsreq	r3, r3, #2
 8004c3a:	3002      	addeq	r0, #2
 8004c3c:	07d9      	lsls	r1, r3, #31
 8004c3e:	d403      	bmi.n	8004c48 <__lo0bits+0x4e>
 8004c40:	085b      	lsrs	r3, r3, #1
 8004c42:	f100 0001 	add.w	r0, r0, #1
 8004c46:	d003      	beq.n	8004c50 <__lo0bits+0x56>
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	4770      	bx	lr
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	4770      	bx	lr
 8004c50:	2020      	movs	r0, #32
 8004c52:	4770      	bx	lr

08004c54 <__i2b>:
 8004c54:	b510      	push	{r4, lr}
 8004c56:	460c      	mov	r4, r1
 8004c58:	2101      	movs	r1, #1
 8004c5a:	f7ff ff07 	bl	8004a6c <_Balloc>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	b928      	cbnz	r0, 8004c6e <__i2b+0x1a>
 8004c62:	f240 1145 	movw	r1, #325	@ 0x145
 8004c66:	4b04      	ldr	r3, [pc, #16]	@ (8004c78 <__i2b+0x24>)
 8004c68:	4804      	ldr	r0, [pc, #16]	@ (8004c7c <__i2b+0x28>)
 8004c6a:	f000 fcb1 	bl	80055d0 <__assert_func>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	6144      	str	r4, [r0, #20]
 8004c72:	6103      	str	r3, [r0, #16]
 8004c74:	bd10      	pop	{r4, pc}
 8004c76:	bf00      	nop
 8004c78:	08005d62 	.word	0x08005d62
 8004c7c:	08005d73 	.word	0x08005d73

08004c80 <__multiply>:
 8004c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c84:	4617      	mov	r7, r2
 8004c86:	690a      	ldr	r2, [r1, #16]
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4689      	mov	r9, r1
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	bfa2      	ittt	ge
 8004c90:	463b      	movge	r3, r7
 8004c92:	460f      	movge	r7, r1
 8004c94:	4699      	movge	r9, r3
 8004c96:	693d      	ldr	r5, [r7, #16]
 8004c98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	eb05 060a 	add.w	r6, r5, sl
 8004ca4:	42b3      	cmp	r3, r6
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	bfb8      	it	lt
 8004caa:	3101      	addlt	r1, #1
 8004cac:	f7ff fede 	bl	8004a6c <_Balloc>
 8004cb0:	b930      	cbnz	r0, 8004cc0 <__multiply+0x40>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004cb8:	4b40      	ldr	r3, [pc, #256]	@ (8004dbc <__multiply+0x13c>)
 8004cba:	4841      	ldr	r0, [pc, #260]	@ (8004dc0 <__multiply+0x140>)
 8004cbc:	f000 fc88 	bl	80055d0 <__assert_func>
 8004cc0:	f100 0414 	add.w	r4, r0, #20
 8004cc4:	4623      	mov	r3, r4
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004ccc:	4573      	cmp	r3, lr
 8004cce:	d320      	bcc.n	8004d12 <__multiply+0x92>
 8004cd0:	f107 0814 	add.w	r8, r7, #20
 8004cd4:	f109 0114 	add.w	r1, r9, #20
 8004cd8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004cdc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004ce0:	9302      	str	r3, [sp, #8]
 8004ce2:	1beb      	subs	r3, r5, r7
 8004ce4:	3b15      	subs	r3, #21
 8004ce6:	f023 0303 	bic.w	r3, r3, #3
 8004cea:	3304      	adds	r3, #4
 8004cec:	3715      	adds	r7, #21
 8004cee:	42bd      	cmp	r5, r7
 8004cf0:	bf38      	it	cc
 8004cf2:	2304      	movcc	r3, #4
 8004cf4:	9301      	str	r3, [sp, #4]
 8004cf6:	9b02      	ldr	r3, [sp, #8]
 8004cf8:	9103      	str	r1, [sp, #12]
 8004cfa:	428b      	cmp	r3, r1
 8004cfc:	d80c      	bhi.n	8004d18 <__multiply+0x98>
 8004cfe:	2e00      	cmp	r6, #0
 8004d00:	dd03      	ble.n	8004d0a <__multiply+0x8a>
 8004d02:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d055      	beq.n	8004db6 <__multiply+0x136>
 8004d0a:	6106      	str	r6, [r0, #16]
 8004d0c:	b005      	add	sp, #20
 8004d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d12:	f843 2b04 	str.w	r2, [r3], #4
 8004d16:	e7d9      	b.n	8004ccc <__multiply+0x4c>
 8004d18:	f8b1 a000 	ldrh.w	sl, [r1]
 8004d1c:	f1ba 0f00 	cmp.w	sl, #0
 8004d20:	d01f      	beq.n	8004d62 <__multiply+0xe2>
 8004d22:	46c4      	mov	ip, r8
 8004d24:	46a1      	mov	r9, r4
 8004d26:	2700      	movs	r7, #0
 8004d28:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004d2c:	f8d9 3000 	ldr.w	r3, [r9]
 8004d30:	fa1f fb82 	uxth.w	fp, r2
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	fb0a 330b 	mla	r3, sl, fp, r3
 8004d3a:	443b      	add	r3, r7
 8004d3c:	f8d9 7000 	ldr.w	r7, [r9]
 8004d40:	0c12      	lsrs	r2, r2, #16
 8004d42:	0c3f      	lsrs	r7, r7, #16
 8004d44:	fb0a 7202 	mla	r2, sl, r2, r7
 8004d48:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d52:	4565      	cmp	r5, ip
 8004d54:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004d58:	f849 3b04 	str.w	r3, [r9], #4
 8004d5c:	d8e4      	bhi.n	8004d28 <__multiply+0xa8>
 8004d5e:	9b01      	ldr	r3, [sp, #4]
 8004d60:	50e7      	str	r7, [r4, r3]
 8004d62:	9b03      	ldr	r3, [sp, #12]
 8004d64:	3104      	adds	r1, #4
 8004d66:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004d6a:	f1b9 0f00 	cmp.w	r9, #0
 8004d6e:	d020      	beq.n	8004db2 <__multiply+0x132>
 8004d70:	4647      	mov	r7, r8
 8004d72:	46a4      	mov	ip, r4
 8004d74:	f04f 0a00 	mov.w	sl, #0
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	f8b7 b000 	ldrh.w	fp, [r7]
 8004d7e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	fb09 220b 	mla	r2, r9, fp, r2
 8004d88:	4452      	add	r2, sl
 8004d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d8e:	f84c 3b04 	str.w	r3, [ip], #4
 8004d92:	f857 3b04 	ldr.w	r3, [r7], #4
 8004d96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d9a:	f8bc 3000 	ldrh.w	r3, [ip]
 8004d9e:	42bd      	cmp	r5, r7
 8004da0:	fb09 330a 	mla	r3, r9, sl, r3
 8004da4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004da8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004dac:	d8e5      	bhi.n	8004d7a <__multiply+0xfa>
 8004dae:	9a01      	ldr	r2, [sp, #4]
 8004db0:	50a3      	str	r3, [r4, r2]
 8004db2:	3404      	adds	r4, #4
 8004db4:	e79f      	b.n	8004cf6 <__multiply+0x76>
 8004db6:	3e01      	subs	r6, #1
 8004db8:	e7a1      	b.n	8004cfe <__multiply+0x7e>
 8004dba:	bf00      	nop
 8004dbc:	08005d62 	.word	0x08005d62
 8004dc0:	08005d73 	.word	0x08005d73

08004dc4 <__pow5mult>:
 8004dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dc8:	4615      	mov	r5, r2
 8004dca:	f012 0203 	ands.w	r2, r2, #3
 8004dce:	4607      	mov	r7, r0
 8004dd0:	460e      	mov	r6, r1
 8004dd2:	d007      	beq.n	8004de4 <__pow5mult+0x20>
 8004dd4:	4c25      	ldr	r4, [pc, #148]	@ (8004e6c <__pow5mult+0xa8>)
 8004dd6:	3a01      	subs	r2, #1
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004dde:	f7ff fea7 	bl	8004b30 <__multadd>
 8004de2:	4606      	mov	r6, r0
 8004de4:	10ad      	asrs	r5, r5, #2
 8004de6:	d03d      	beq.n	8004e64 <__pow5mult+0xa0>
 8004de8:	69fc      	ldr	r4, [r7, #28]
 8004dea:	b97c      	cbnz	r4, 8004e0c <__pow5mult+0x48>
 8004dec:	2010      	movs	r0, #16
 8004dee:	f7ff fd87 	bl	8004900 <malloc>
 8004df2:	4602      	mov	r2, r0
 8004df4:	61f8      	str	r0, [r7, #28]
 8004df6:	b928      	cbnz	r0, 8004e04 <__pow5mult+0x40>
 8004df8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8004e70 <__pow5mult+0xac>)
 8004dfe:	481d      	ldr	r0, [pc, #116]	@ (8004e74 <__pow5mult+0xb0>)
 8004e00:	f000 fbe6 	bl	80055d0 <__assert_func>
 8004e04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e08:	6004      	str	r4, [r0, #0]
 8004e0a:	60c4      	str	r4, [r0, #12]
 8004e0c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004e10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e14:	b94c      	cbnz	r4, 8004e2a <__pow5mult+0x66>
 8004e16:	f240 2171 	movw	r1, #625	@ 0x271
 8004e1a:	4638      	mov	r0, r7
 8004e1c:	f7ff ff1a 	bl	8004c54 <__i2b>
 8004e20:	2300      	movs	r3, #0
 8004e22:	4604      	mov	r4, r0
 8004e24:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e28:	6003      	str	r3, [r0, #0]
 8004e2a:	f04f 0900 	mov.w	r9, #0
 8004e2e:	07eb      	lsls	r3, r5, #31
 8004e30:	d50a      	bpl.n	8004e48 <__pow5mult+0x84>
 8004e32:	4631      	mov	r1, r6
 8004e34:	4622      	mov	r2, r4
 8004e36:	4638      	mov	r0, r7
 8004e38:	f7ff ff22 	bl	8004c80 <__multiply>
 8004e3c:	4680      	mov	r8, r0
 8004e3e:	4631      	mov	r1, r6
 8004e40:	4638      	mov	r0, r7
 8004e42:	f7ff fe53 	bl	8004aec <_Bfree>
 8004e46:	4646      	mov	r6, r8
 8004e48:	106d      	asrs	r5, r5, #1
 8004e4a:	d00b      	beq.n	8004e64 <__pow5mult+0xa0>
 8004e4c:	6820      	ldr	r0, [r4, #0]
 8004e4e:	b938      	cbnz	r0, 8004e60 <__pow5mult+0x9c>
 8004e50:	4622      	mov	r2, r4
 8004e52:	4621      	mov	r1, r4
 8004e54:	4638      	mov	r0, r7
 8004e56:	f7ff ff13 	bl	8004c80 <__multiply>
 8004e5a:	6020      	str	r0, [r4, #0]
 8004e5c:	f8c0 9000 	str.w	r9, [r0]
 8004e60:	4604      	mov	r4, r0
 8004e62:	e7e4      	b.n	8004e2e <__pow5mult+0x6a>
 8004e64:	4630      	mov	r0, r6
 8004e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e6a:	bf00      	nop
 8004e6c:	08005e24 	.word	0x08005e24
 8004e70:	08005cf3 	.word	0x08005cf3
 8004e74:	08005d73 	.word	0x08005d73

08004e78 <__lshift>:
 8004e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	4607      	mov	r7, r0
 8004e80:	4691      	mov	r9, r2
 8004e82:	6923      	ldr	r3, [r4, #16]
 8004e84:	6849      	ldr	r1, [r1, #4]
 8004e86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e8a:	68a3      	ldr	r3, [r4, #8]
 8004e8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e90:	f108 0601 	add.w	r6, r8, #1
 8004e94:	42b3      	cmp	r3, r6
 8004e96:	db0b      	blt.n	8004eb0 <__lshift+0x38>
 8004e98:	4638      	mov	r0, r7
 8004e9a:	f7ff fde7 	bl	8004a6c <_Balloc>
 8004e9e:	4605      	mov	r5, r0
 8004ea0:	b948      	cbnz	r0, 8004eb6 <__lshift+0x3e>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004ea8:	4b27      	ldr	r3, [pc, #156]	@ (8004f48 <__lshift+0xd0>)
 8004eaa:	4828      	ldr	r0, [pc, #160]	@ (8004f4c <__lshift+0xd4>)
 8004eac:	f000 fb90 	bl	80055d0 <__assert_func>
 8004eb0:	3101      	adds	r1, #1
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	e7ee      	b.n	8004e94 <__lshift+0x1c>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f100 0114 	add.w	r1, r0, #20
 8004ebc:	f100 0210 	add.w	r2, r0, #16
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	4553      	cmp	r3, sl
 8004ec4:	db33      	blt.n	8004f2e <__lshift+0xb6>
 8004ec6:	6920      	ldr	r0, [r4, #16]
 8004ec8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ecc:	f104 0314 	add.w	r3, r4, #20
 8004ed0:	f019 091f 	ands.w	r9, r9, #31
 8004ed4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ed8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004edc:	d02b      	beq.n	8004f36 <__lshift+0xbe>
 8004ede:	468a      	mov	sl, r1
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f1c9 0e20 	rsb	lr, r9, #32
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	fa00 f009 	lsl.w	r0, r0, r9
 8004eec:	4310      	orrs	r0, r2
 8004eee:	f84a 0b04 	str.w	r0, [sl], #4
 8004ef2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ef6:	459c      	cmp	ip, r3
 8004ef8:	fa22 f20e 	lsr.w	r2, r2, lr
 8004efc:	d8f3      	bhi.n	8004ee6 <__lshift+0x6e>
 8004efe:	ebac 0304 	sub.w	r3, ip, r4
 8004f02:	3b15      	subs	r3, #21
 8004f04:	f023 0303 	bic.w	r3, r3, #3
 8004f08:	3304      	adds	r3, #4
 8004f0a:	f104 0015 	add.w	r0, r4, #21
 8004f0e:	4560      	cmp	r0, ip
 8004f10:	bf88      	it	hi
 8004f12:	2304      	movhi	r3, #4
 8004f14:	50ca      	str	r2, [r1, r3]
 8004f16:	b10a      	cbz	r2, 8004f1c <__lshift+0xa4>
 8004f18:	f108 0602 	add.w	r6, r8, #2
 8004f1c:	3e01      	subs	r6, #1
 8004f1e:	4638      	mov	r0, r7
 8004f20:	4621      	mov	r1, r4
 8004f22:	612e      	str	r6, [r5, #16]
 8004f24:	f7ff fde2 	bl	8004aec <_Bfree>
 8004f28:	4628      	mov	r0, r5
 8004f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f32:	3301      	adds	r3, #1
 8004f34:	e7c5      	b.n	8004ec2 <__lshift+0x4a>
 8004f36:	3904      	subs	r1, #4
 8004f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f3c:	459c      	cmp	ip, r3
 8004f3e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f42:	d8f9      	bhi.n	8004f38 <__lshift+0xc0>
 8004f44:	e7ea      	b.n	8004f1c <__lshift+0xa4>
 8004f46:	bf00      	nop
 8004f48:	08005d62 	.word	0x08005d62
 8004f4c:	08005d73 	.word	0x08005d73

08004f50 <__mcmp>:
 8004f50:	4603      	mov	r3, r0
 8004f52:	690a      	ldr	r2, [r1, #16]
 8004f54:	6900      	ldr	r0, [r0, #16]
 8004f56:	b530      	push	{r4, r5, lr}
 8004f58:	1a80      	subs	r0, r0, r2
 8004f5a:	d10e      	bne.n	8004f7a <__mcmp+0x2a>
 8004f5c:	3314      	adds	r3, #20
 8004f5e:	3114      	adds	r1, #20
 8004f60:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004f64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004f68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004f6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004f70:	4295      	cmp	r5, r2
 8004f72:	d003      	beq.n	8004f7c <__mcmp+0x2c>
 8004f74:	d205      	bcs.n	8004f82 <__mcmp+0x32>
 8004f76:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7a:	bd30      	pop	{r4, r5, pc}
 8004f7c:	42a3      	cmp	r3, r4
 8004f7e:	d3f3      	bcc.n	8004f68 <__mcmp+0x18>
 8004f80:	e7fb      	b.n	8004f7a <__mcmp+0x2a>
 8004f82:	2001      	movs	r0, #1
 8004f84:	e7f9      	b.n	8004f7a <__mcmp+0x2a>
	...

08004f88 <__mdiff>:
 8004f88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8c:	4689      	mov	r9, r1
 8004f8e:	4606      	mov	r6, r0
 8004f90:	4611      	mov	r1, r2
 8004f92:	4648      	mov	r0, r9
 8004f94:	4614      	mov	r4, r2
 8004f96:	f7ff ffdb 	bl	8004f50 <__mcmp>
 8004f9a:	1e05      	subs	r5, r0, #0
 8004f9c:	d112      	bne.n	8004fc4 <__mdiff+0x3c>
 8004f9e:	4629      	mov	r1, r5
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	f7ff fd63 	bl	8004a6c <_Balloc>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	b928      	cbnz	r0, 8004fb6 <__mdiff+0x2e>
 8004faa:	f240 2137 	movw	r1, #567	@ 0x237
 8004fae:	4b3e      	ldr	r3, [pc, #248]	@ (80050a8 <__mdiff+0x120>)
 8004fb0:	483e      	ldr	r0, [pc, #248]	@ (80050ac <__mdiff+0x124>)
 8004fb2:	f000 fb0d 	bl	80055d0 <__assert_func>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	b003      	add	sp, #12
 8004fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc4:	bfbc      	itt	lt
 8004fc6:	464b      	movlt	r3, r9
 8004fc8:	46a1      	movlt	r9, r4
 8004fca:	4630      	mov	r0, r6
 8004fcc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004fd0:	bfba      	itte	lt
 8004fd2:	461c      	movlt	r4, r3
 8004fd4:	2501      	movlt	r5, #1
 8004fd6:	2500      	movge	r5, #0
 8004fd8:	f7ff fd48 	bl	8004a6c <_Balloc>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	b918      	cbnz	r0, 8004fe8 <__mdiff+0x60>
 8004fe0:	f240 2145 	movw	r1, #581	@ 0x245
 8004fe4:	4b30      	ldr	r3, [pc, #192]	@ (80050a8 <__mdiff+0x120>)
 8004fe6:	e7e3      	b.n	8004fb0 <__mdiff+0x28>
 8004fe8:	f100 0b14 	add.w	fp, r0, #20
 8004fec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004ff0:	f109 0310 	add.w	r3, r9, #16
 8004ff4:	60c5      	str	r5, [r0, #12]
 8004ff6:	f04f 0c00 	mov.w	ip, #0
 8004ffa:	f109 0514 	add.w	r5, r9, #20
 8004ffe:	46d9      	mov	r9, fp
 8005000:	6926      	ldr	r6, [r4, #16]
 8005002:	f104 0e14 	add.w	lr, r4, #20
 8005006:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800500a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	9b01      	ldr	r3, [sp, #4]
 8005012:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005016:	f853 af04 	ldr.w	sl, [r3, #4]!
 800501a:	b281      	uxth	r1, r0
 800501c:	9301      	str	r3, [sp, #4]
 800501e:	fa1f f38a 	uxth.w	r3, sl
 8005022:	1a5b      	subs	r3, r3, r1
 8005024:	0c00      	lsrs	r0, r0, #16
 8005026:	4463      	add	r3, ip
 8005028:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800502c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005030:	b29b      	uxth	r3, r3
 8005032:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005036:	4576      	cmp	r6, lr
 8005038:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800503c:	f849 3b04 	str.w	r3, [r9], #4
 8005040:	d8e6      	bhi.n	8005010 <__mdiff+0x88>
 8005042:	1b33      	subs	r3, r6, r4
 8005044:	3b15      	subs	r3, #21
 8005046:	f023 0303 	bic.w	r3, r3, #3
 800504a:	3415      	adds	r4, #21
 800504c:	3304      	adds	r3, #4
 800504e:	42a6      	cmp	r6, r4
 8005050:	bf38      	it	cc
 8005052:	2304      	movcc	r3, #4
 8005054:	441d      	add	r5, r3
 8005056:	445b      	add	r3, fp
 8005058:	461e      	mov	r6, r3
 800505a:	462c      	mov	r4, r5
 800505c:	4544      	cmp	r4, r8
 800505e:	d30e      	bcc.n	800507e <__mdiff+0xf6>
 8005060:	f108 0103 	add.w	r1, r8, #3
 8005064:	1b49      	subs	r1, r1, r5
 8005066:	f021 0103 	bic.w	r1, r1, #3
 800506a:	3d03      	subs	r5, #3
 800506c:	45a8      	cmp	r8, r5
 800506e:	bf38      	it	cc
 8005070:	2100      	movcc	r1, #0
 8005072:	440b      	add	r3, r1
 8005074:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005078:	b199      	cbz	r1, 80050a2 <__mdiff+0x11a>
 800507a:	6117      	str	r7, [r2, #16]
 800507c:	e79e      	b.n	8004fbc <__mdiff+0x34>
 800507e:	46e6      	mov	lr, ip
 8005080:	f854 1b04 	ldr.w	r1, [r4], #4
 8005084:	fa1f fc81 	uxth.w	ip, r1
 8005088:	44f4      	add	ip, lr
 800508a:	0c08      	lsrs	r0, r1, #16
 800508c:	4471      	add	r1, lr
 800508e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005092:	b289      	uxth	r1, r1
 8005094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005098:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800509c:	f846 1b04 	str.w	r1, [r6], #4
 80050a0:	e7dc      	b.n	800505c <__mdiff+0xd4>
 80050a2:	3f01      	subs	r7, #1
 80050a4:	e7e6      	b.n	8005074 <__mdiff+0xec>
 80050a6:	bf00      	nop
 80050a8:	08005d62 	.word	0x08005d62
 80050ac:	08005d73 	.word	0x08005d73

080050b0 <__d2b>:
 80050b0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80050b4:	2101      	movs	r1, #1
 80050b6:	4690      	mov	r8, r2
 80050b8:	4699      	mov	r9, r3
 80050ba:	9e08      	ldr	r6, [sp, #32]
 80050bc:	f7ff fcd6 	bl	8004a6c <_Balloc>
 80050c0:	4604      	mov	r4, r0
 80050c2:	b930      	cbnz	r0, 80050d2 <__d2b+0x22>
 80050c4:	4602      	mov	r2, r0
 80050c6:	f240 310f 	movw	r1, #783	@ 0x30f
 80050ca:	4b23      	ldr	r3, [pc, #140]	@ (8005158 <__d2b+0xa8>)
 80050cc:	4823      	ldr	r0, [pc, #140]	@ (800515c <__d2b+0xac>)
 80050ce:	f000 fa7f 	bl	80055d0 <__assert_func>
 80050d2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80050d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050da:	b10d      	cbz	r5, 80050e0 <__d2b+0x30>
 80050dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050e0:	9301      	str	r3, [sp, #4]
 80050e2:	f1b8 0300 	subs.w	r3, r8, #0
 80050e6:	d024      	beq.n	8005132 <__d2b+0x82>
 80050e8:	4668      	mov	r0, sp
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	f7ff fd85 	bl	8004bfa <__lo0bits>
 80050f0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80050f4:	b1d8      	cbz	r0, 800512e <__d2b+0x7e>
 80050f6:	f1c0 0320 	rsb	r3, r0, #32
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	430b      	orrs	r3, r1
 8005100:	40c2      	lsrs	r2, r0
 8005102:	6163      	str	r3, [r4, #20]
 8005104:	9201      	str	r2, [sp, #4]
 8005106:	9b01      	ldr	r3, [sp, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	bf0c      	ite	eq
 800510c:	2201      	moveq	r2, #1
 800510e:	2202      	movne	r2, #2
 8005110:	61a3      	str	r3, [r4, #24]
 8005112:	6122      	str	r2, [r4, #16]
 8005114:	b1ad      	cbz	r5, 8005142 <__d2b+0x92>
 8005116:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800511a:	4405      	add	r5, r0
 800511c:	6035      	str	r5, [r6, #0]
 800511e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005124:	6018      	str	r0, [r3, #0]
 8005126:	4620      	mov	r0, r4
 8005128:	b002      	add	sp, #8
 800512a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800512e:	6161      	str	r1, [r4, #20]
 8005130:	e7e9      	b.n	8005106 <__d2b+0x56>
 8005132:	a801      	add	r0, sp, #4
 8005134:	f7ff fd61 	bl	8004bfa <__lo0bits>
 8005138:	9b01      	ldr	r3, [sp, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	6163      	str	r3, [r4, #20]
 800513e:	3020      	adds	r0, #32
 8005140:	e7e7      	b.n	8005112 <__d2b+0x62>
 8005142:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005146:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800514a:	6030      	str	r0, [r6, #0]
 800514c:	6918      	ldr	r0, [r3, #16]
 800514e:	f7ff fd35 	bl	8004bbc <__hi0bits>
 8005152:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005156:	e7e4      	b.n	8005122 <__d2b+0x72>
 8005158:	08005d62 	.word	0x08005d62
 800515c:	08005d73 	.word	0x08005d73

08005160 <__ssputs_r>:
 8005160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005164:	461f      	mov	r7, r3
 8005166:	688e      	ldr	r6, [r1, #8]
 8005168:	4682      	mov	sl, r0
 800516a:	42be      	cmp	r6, r7
 800516c:	460c      	mov	r4, r1
 800516e:	4690      	mov	r8, r2
 8005170:	680b      	ldr	r3, [r1, #0]
 8005172:	d82d      	bhi.n	80051d0 <__ssputs_r+0x70>
 8005174:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005178:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800517c:	d026      	beq.n	80051cc <__ssputs_r+0x6c>
 800517e:	6965      	ldr	r5, [r4, #20]
 8005180:	6909      	ldr	r1, [r1, #16]
 8005182:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005186:	eba3 0901 	sub.w	r9, r3, r1
 800518a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800518e:	1c7b      	adds	r3, r7, #1
 8005190:	444b      	add	r3, r9
 8005192:	106d      	asrs	r5, r5, #1
 8005194:	429d      	cmp	r5, r3
 8005196:	bf38      	it	cc
 8005198:	461d      	movcc	r5, r3
 800519a:	0553      	lsls	r3, r2, #21
 800519c:	d527      	bpl.n	80051ee <__ssputs_r+0x8e>
 800519e:	4629      	mov	r1, r5
 80051a0:	f7ff fbd8 	bl	8004954 <_malloc_r>
 80051a4:	4606      	mov	r6, r0
 80051a6:	b360      	cbz	r0, 8005202 <__ssputs_r+0xa2>
 80051a8:	464a      	mov	r2, r9
 80051aa:	6921      	ldr	r1, [r4, #16]
 80051ac:	f000 fa02 	bl	80055b4 <memcpy>
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80051b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051ba:	81a3      	strh	r3, [r4, #12]
 80051bc:	6126      	str	r6, [r4, #16]
 80051be:	444e      	add	r6, r9
 80051c0:	6026      	str	r6, [r4, #0]
 80051c2:	463e      	mov	r6, r7
 80051c4:	6165      	str	r5, [r4, #20]
 80051c6:	eba5 0509 	sub.w	r5, r5, r9
 80051ca:	60a5      	str	r5, [r4, #8]
 80051cc:	42be      	cmp	r6, r7
 80051ce:	d900      	bls.n	80051d2 <__ssputs_r+0x72>
 80051d0:	463e      	mov	r6, r7
 80051d2:	4632      	mov	r2, r6
 80051d4:	4641      	mov	r1, r8
 80051d6:	6820      	ldr	r0, [r4, #0]
 80051d8:	f000 f9c2 	bl	8005560 <memmove>
 80051dc:	2000      	movs	r0, #0
 80051de:	68a3      	ldr	r3, [r4, #8]
 80051e0:	1b9b      	subs	r3, r3, r6
 80051e2:	60a3      	str	r3, [r4, #8]
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	4433      	add	r3, r6
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ee:	462a      	mov	r2, r5
 80051f0:	f000 fa32 	bl	8005658 <_realloc_r>
 80051f4:	4606      	mov	r6, r0
 80051f6:	2800      	cmp	r0, #0
 80051f8:	d1e0      	bne.n	80051bc <__ssputs_r+0x5c>
 80051fa:	4650      	mov	r0, sl
 80051fc:	6921      	ldr	r1, [r4, #16]
 80051fe:	f7ff fb37 	bl	8004870 <_free_r>
 8005202:	230c      	movs	r3, #12
 8005204:	f8ca 3000 	str.w	r3, [sl]
 8005208:	89a3      	ldrh	r3, [r4, #12]
 800520a:	f04f 30ff 	mov.w	r0, #4294967295
 800520e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005212:	81a3      	strh	r3, [r4, #12]
 8005214:	e7e9      	b.n	80051ea <__ssputs_r+0x8a>
	...

08005218 <_svfiprintf_r>:
 8005218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521c:	4698      	mov	r8, r3
 800521e:	898b      	ldrh	r3, [r1, #12]
 8005220:	4607      	mov	r7, r0
 8005222:	061b      	lsls	r3, r3, #24
 8005224:	460d      	mov	r5, r1
 8005226:	4614      	mov	r4, r2
 8005228:	b09d      	sub	sp, #116	@ 0x74
 800522a:	d510      	bpl.n	800524e <_svfiprintf_r+0x36>
 800522c:	690b      	ldr	r3, [r1, #16]
 800522e:	b973      	cbnz	r3, 800524e <_svfiprintf_r+0x36>
 8005230:	2140      	movs	r1, #64	@ 0x40
 8005232:	f7ff fb8f 	bl	8004954 <_malloc_r>
 8005236:	6028      	str	r0, [r5, #0]
 8005238:	6128      	str	r0, [r5, #16]
 800523a:	b930      	cbnz	r0, 800524a <_svfiprintf_r+0x32>
 800523c:	230c      	movs	r3, #12
 800523e:	603b      	str	r3, [r7, #0]
 8005240:	f04f 30ff 	mov.w	r0, #4294967295
 8005244:	b01d      	add	sp, #116	@ 0x74
 8005246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800524a:	2340      	movs	r3, #64	@ 0x40
 800524c:	616b      	str	r3, [r5, #20]
 800524e:	2300      	movs	r3, #0
 8005250:	9309      	str	r3, [sp, #36]	@ 0x24
 8005252:	2320      	movs	r3, #32
 8005254:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005258:	2330      	movs	r3, #48	@ 0x30
 800525a:	f04f 0901 	mov.w	r9, #1
 800525e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005262:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80053fc <_svfiprintf_r+0x1e4>
 8005266:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800526a:	4623      	mov	r3, r4
 800526c:	469a      	mov	sl, r3
 800526e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005272:	b10a      	cbz	r2, 8005278 <_svfiprintf_r+0x60>
 8005274:	2a25      	cmp	r2, #37	@ 0x25
 8005276:	d1f9      	bne.n	800526c <_svfiprintf_r+0x54>
 8005278:	ebba 0b04 	subs.w	fp, sl, r4
 800527c:	d00b      	beq.n	8005296 <_svfiprintf_r+0x7e>
 800527e:	465b      	mov	r3, fp
 8005280:	4622      	mov	r2, r4
 8005282:	4629      	mov	r1, r5
 8005284:	4638      	mov	r0, r7
 8005286:	f7ff ff6b 	bl	8005160 <__ssputs_r>
 800528a:	3001      	adds	r0, #1
 800528c:	f000 80a7 	beq.w	80053de <_svfiprintf_r+0x1c6>
 8005290:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005292:	445a      	add	r2, fp
 8005294:	9209      	str	r2, [sp, #36]	@ 0x24
 8005296:	f89a 3000 	ldrb.w	r3, [sl]
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 809f 	beq.w	80053de <_svfiprintf_r+0x1c6>
 80052a0:	2300      	movs	r3, #0
 80052a2:	f04f 32ff 	mov.w	r2, #4294967295
 80052a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052aa:	f10a 0a01 	add.w	sl, sl, #1
 80052ae:	9304      	str	r3, [sp, #16]
 80052b0:	9307      	str	r3, [sp, #28]
 80052b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80052b8:	4654      	mov	r4, sl
 80052ba:	2205      	movs	r2, #5
 80052bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c0:	484e      	ldr	r0, [pc, #312]	@ (80053fc <_svfiprintf_r+0x1e4>)
 80052c2:	f7fe fc68 	bl	8003b96 <memchr>
 80052c6:	9a04      	ldr	r2, [sp, #16]
 80052c8:	b9d8      	cbnz	r0, 8005302 <_svfiprintf_r+0xea>
 80052ca:	06d0      	lsls	r0, r2, #27
 80052cc:	bf44      	itt	mi
 80052ce:	2320      	movmi	r3, #32
 80052d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052d4:	0711      	lsls	r1, r2, #28
 80052d6:	bf44      	itt	mi
 80052d8:	232b      	movmi	r3, #43	@ 0x2b
 80052da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052de:	f89a 3000 	ldrb.w	r3, [sl]
 80052e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80052e4:	d015      	beq.n	8005312 <_svfiprintf_r+0xfa>
 80052e6:	4654      	mov	r4, sl
 80052e8:	2000      	movs	r0, #0
 80052ea:	f04f 0c0a 	mov.w	ip, #10
 80052ee:	9a07      	ldr	r2, [sp, #28]
 80052f0:	4621      	mov	r1, r4
 80052f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052f6:	3b30      	subs	r3, #48	@ 0x30
 80052f8:	2b09      	cmp	r3, #9
 80052fa:	d94b      	bls.n	8005394 <_svfiprintf_r+0x17c>
 80052fc:	b1b0      	cbz	r0, 800532c <_svfiprintf_r+0x114>
 80052fe:	9207      	str	r2, [sp, #28]
 8005300:	e014      	b.n	800532c <_svfiprintf_r+0x114>
 8005302:	eba0 0308 	sub.w	r3, r0, r8
 8005306:	fa09 f303 	lsl.w	r3, r9, r3
 800530a:	4313      	orrs	r3, r2
 800530c:	46a2      	mov	sl, r4
 800530e:	9304      	str	r3, [sp, #16]
 8005310:	e7d2      	b.n	80052b8 <_svfiprintf_r+0xa0>
 8005312:	9b03      	ldr	r3, [sp, #12]
 8005314:	1d19      	adds	r1, r3, #4
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	9103      	str	r1, [sp, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	bfbb      	ittet	lt
 800531e:	425b      	neglt	r3, r3
 8005320:	f042 0202 	orrlt.w	r2, r2, #2
 8005324:	9307      	strge	r3, [sp, #28]
 8005326:	9307      	strlt	r3, [sp, #28]
 8005328:	bfb8      	it	lt
 800532a:	9204      	strlt	r2, [sp, #16]
 800532c:	7823      	ldrb	r3, [r4, #0]
 800532e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005330:	d10a      	bne.n	8005348 <_svfiprintf_r+0x130>
 8005332:	7863      	ldrb	r3, [r4, #1]
 8005334:	2b2a      	cmp	r3, #42	@ 0x2a
 8005336:	d132      	bne.n	800539e <_svfiprintf_r+0x186>
 8005338:	9b03      	ldr	r3, [sp, #12]
 800533a:	3402      	adds	r4, #2
 800533c:	1d1a      	adds	r2, r3, #4
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	9203      	str	r2, [sp, #12]
 8005342:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005346:	9305      	str	r3, [sp, #20]
 8005348:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005400 <_svfiprintf_r+0x1e8>
 800534c:	2203      	movs	r2, #3
 800534e:	4650      	mov	r0, sl
 8005350:	7821      	ldrb	r1, [r4, #0]
 8005352:	f7fe fc20 	bl	8003b96 <memchr>
 8005356:	b138      	cbz	r0, 8005368 <_svfiprintf_r+0x150>
 8005358:	2240      	movs	r2, #64	@ 0x40
 800535a:	9b04      	ldr	r3, [sp, #16]
 800535c:	eba0 000a 	sub.w	r0, r0, sl
 8005360:	4082      	lsls	r2, r0
 8005362:	4313      	orrs	r3, r2
 8005364:	3401      	adds	r4, #1
 8005366:	9304      	str	r3, [sp, #16]
 8005368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800536c:	2206      	movs	r2, #6
 800536e:	4825      	ldr	r0, [pc, #148]	@ (8005404 <_svfiprintf_r+0x1ec>)
 8005370:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005374:	f7fe fc0f 	bl	8003b96 <memchr>
 8005378:	2800      	cmp	r0, #0
 800537a:	d036      	beq.n	80053ea <_svfiprintf_r+0x1d2>
 800537c:	4b22      	ldr	r3, [pc, #136]	@ (8005408 <_svfiprintf_r+0x1f0>)
 800537e:	bb1b      	cbnz	r3, 80053c8 <_svfiprintf_r+0x1b0>
 8005380:	9b03      	ldr	r3, [sp, #12]
 8005382:	3307      	adds	r3, #7
 8005384:	f023 0307 	bic.w	r3, r3, #7
 8005388:	3308      	adds	r3, #8
 800538a:	9303      	str	r3, [sp, #12]
 800538c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800538e:	4433      	add	r3, r6
 8005390:	9309      	str	r3, [sp, #36]	@ 0x24
 8005392:	e76a      	b.n	800526a <_svfiprintf_r+0x52>
 8005394:	460c      	mov	r4, r1
 8005396:	2001      	movs	r0, #1
 8005398:	fb0c 3202 	mla	r2, ip, r2, r3
 800539c:	e7a8      	b.n	80052f0 <_svfiprintf_r+0xd8>
 800539e:	2300      	movs	r3, #0
 80053a0:	f04f 0c0a 	mov.w	ip, #10
 80053a4:	4619      	mov	r1, r3
 80053a6:	3401      	adds	r4, #1
 80053a8:	9305      	str	r3, [sp, #20]
 80053aa:	4620      	mov	r0, r4
 80053ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053b0:	3a30      	subs	r2, #48	@ 0x30
 80053b2:	2a09      	cmp	r2, #9
 80053b4:	d903      	bls.n	80053be <_svfiprintf_r+0x1a6>
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0c6      	beq.n	8005348 <_svfiprintf_r+0x130>
 80053ba:	9105      	str	r1, [sp, #20]
 80053bc:	e7c4      	b.n	8005348 <_svfiprintf_r+0x130>
 80053be:	4604      	mov	r4, r0
 80053c0:	2301      	movs	r3, #1
 80053c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80053c6:	e7f0      	b.n	80053aa <_svfiprintf_r+0x192>
 80053c8:	ab03      	add	r3, sp, #12
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	462a      	mov	r2, r5
 80053ce:	4638      	mov	r0, r7
 80053d0:	4b0e      	ldr	r3, [pc, #56]	@ (800540c <_svfiprintf_r+0x1f4>)
 80053d2:	a904      	add	r1, sp, #16
 80053d4:	f7fd fe7c 	bl	80030d0 <_printf_float>
 80053d8:	1c42      	adds	r2, r0, #1
 80053da:	4606      	mov	r6, r0
 80053dc:	d1d6      	bne.n	800538c <_svfiprintf_r+0x174>
 80053de:	89ab      	ldrh	r3, [r5, #12]
 80053e0:	065b      	lsls	r3, r3, #25
 80053e2:	f53f af2d 	bmi.w	8005240 <_svfiprintf_r+0x28>
 80053e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053e8:	e72c      	b.n	8005244 <_svfiprintf_r+0x2c>
 80053ea:	ab03      	add	r3, sp, #12
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	462a      	mov	r2, r5
 80053f0:	4638      	mov	r0, r7
 80053f2:	4b06      	ldr	r3, [pc, #24]	@ (800540c <_svfiprintf_r+0x1f4>)
 80053f4:	a904      	add	r1, sp, #16
 80053f6:	f7fe f909 	bl	800360c <_printf_i>
 80053fa:	e7ed      	b.n	80053d8 <_svfiprintf_r+0x1c0>
 80053fc:	08005dcc 	.word	0x08005dcc
 8005400:	08005dd2 	.word	0x08005dd2
 8005404:	08005dd6 	.word	0x08005dd6
 8005408:	080030d1 	.word	0x080030d1
 800540c:	08005161 	.word	0x08005161

08005410 <__sflush_r>:
 8005410:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005416:	0716      	lsls	r6, r2, #28
 8005418:	4605      	mov	r5, r0
 800541a:	460c      	mov	r4, r1
 800541c:	d454      	bmi.n	80054c8 <__sflush_r+0xb8>
 800541e:	684b      	ldr	r3, [r1, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	dc02      	bgt.n	800542a <__sflush_r+0x1a>
 8005424:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	dd48      	ble.n	80054bc <__sflush_r+0xac>
 800542a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800542c:	2e00      	cmp	r6, #0
 800542e:	d045      	beq.n	80054bc <__sflush_r+0xac>
 8005430:	2300      	movs	r3, #0
 8005432:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005436:	682f      	ldr	r7, [r5, #0]
 8005438:	6a21      	ldr	r1, [r4, #32]
 800543a:	602b      	str	r3, [r5, #0]
 800543c:	d030      	beq.n	80054a0 <__sflush_r+0x90>
 800543e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	0759      	lsls	r1, r3, #29
 8005444:	d505      	bpl.n	8005452 <__sflush_r+0x42>
 8005446:	6863      	ldr	r3, [r4, #4]
 8005448:	1ad2      	subs	r2, r2, r3
 800544a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800544c:	b10b      	cbz	r3, 8005452 <__sflush_r+0x42>
 800544e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005450:	1ad2      	subs	r2, r2, r3
 8005452:	2300      	movs	r3, #0
 8005454:	4628      	mov	r0, r5
 8005456:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005458:	6a21      	ldr	r1, [r4, #32]
 800545a:	47b0      	blx	r6
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	89a3      	ldrh	r3, [r4, #12]
 8005460:	d106      	bne.n	8005470 <__sflush_r+0x60>
 8005462:	6829      	ldr	r1, [r5, #0]
 8005464:	291d      	cmp	r1, #29
 8005466:	d82b      	bhi.n	80054c0 <__sflush_r+0xb0>
 8005468:	4a28      	ldr	r2, [pc, #160]	@ (800550c <__sflush_r+0xfc>)
 800546a:	40ca      	lsrs	r2, r1
 800546c:	07d6      	lsls	r6, r2, #31
 800546e:	d527      	bpl.n	80054c0 <__sflush_r+0xb0>
 8005470:	2200      	movs	r2, #0
 8005472:	6062      	str	r2, [r4, #4]
 8005474:	6922      	ldr	r2, [r4, #16]
 8005476:	04d9      	lsls	r1, r3, #19
 8005478:	6022      	str	r2, [r4, #0]
 800547a:	d504      	bpl.n	8005486 <__sflush_r+0x76>
 800547c:	1c42      	adds	r2, r0, #1
 800547e:	d101      	bne.n	8005484 <__sflush_r+0x74>
 8005480:	682b      	ldr	r3, [r5, #0]
 8005482:	b903      	cbnz	r3, 8005486 <__sflush_r+0x76>
 8005484:	6560      	str	r0, [r4, #84]	@ 0x54
 8005486:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005488:	602f      	str	r7, [r5, #0]
 800548a:	b1b9      	cbz	r1, 80054bc <__sflush_r+0xac>
 800548c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005490:	4299      	cmp	r1, r3
 8005492:	d002      	beq.n	800549a <__sflush_r+0x8a>
 8005494:	4628      	mov	r0, r5
 8005496:	f7ff f9eb 	bl	8004870 <_free_r>
 800549a:	2300      	movs	r3, #0
 800549c:	6363      	str	r3, [r4, #52]	@ 0x34
 800549e:	e00d      	b.n	80054bc <__sflush_r+0xac>
 80054a0:	2301      	movs	r3, #1
 80054a2:	4628      	mov	r0, r5
 80054a4:	47b0      	blx	r6
 80054a6:	4602      	mov	r2, r0
 80054a8:	1c50      	adds	r0, r2, #1
 80054aa:	d1c9      	bne.n	8005440 <__sflush_r+0x30>
 80054ac:	682b      	ldr	r3, [r5, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0c6      	beq.n	8005440 <__sflush_r+0x30>
 80054b2:	2b1d      	cmp	r3, #29
 80054b4:	d001      	beq.n	80054ba <__sflush_r+0xaa>
 80054b6:	2b16      	cmp	r3, #22
 80054b8:	d11d      	bne.n	80054f6 <__sflush_r+0xe6>
 80054ba:	602f      	str	r7, [r5, #0]
 80054bc:	2000      	movs	r0, #0
 80054be:	e021      	b.n	8005504 <__sflush_r+0xf4>
 80054c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054c4:	b21b      	sxth	r3, r3
 80054c6:	e01a      	b.n	80054fe <__sflush_r+0xee>
 80054c8:	690f      	ldr	r7, [r1, #16]
 80054ca:	2f00      	cmp	r7, #0
 80054cc:	d0f6      	beq.n	80054bc <__sflush_r+0xac>
 80054ce:	0793      	lsls	r3, r2, #30
 80054d0:	bf18      	it	ne
 80054d2:	2300      	movne	r3, #0
 80054d4:	680e      	ldr	r6, [r1, #0]
 80054d6:	bf08      	it	eq
 80054d8:	694b      	ldreq	r3, [r1, #20]
 80054da:	1bf6      	subs	r6, r6, r7
 80054dc:	600f      	str	r7, [r1, #0]
 80054de:	608b      	str	r3, [r1, #8]
 80054e0:	2e00      	cmp	r6, #0
 80054e2:	ddeb      	ble.n	80054bc <__sflush_r+0xac>
 80054e4:	4633      	mov	r3, r6
 80054e6:	463a      	mov	r2, r7
 80054e8:	4628      	mov	r0, r5
 80054ea:	6a21      	ldr	r1, [r4, #32]
 80054ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80054f0:	47e0      	blx	ip
 80054f2:	2800      	cmp	r0, #0
 80054f4:	dc07      	bgt.n	8005506 <__sflush_r+0xf6>
 80054f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005502:	81a3      	strh	r3, [r4, #12]
 8005504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005506:	4407      	add	r7, r0
 8005508:	1a36      	subs	r6, r6, r0
 800550a:	e7e9      	b.n	80054e0 <__sflush_r+0xd0>
 800550c:	20400001 	.word	0x20400001

08005510 <_fflush_r>:
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	690b      	ldr	r3, [r1, #16]
 8005514:	4605      	mov	r5, r0
 8005516:	460c      	mov	r4, r1
 8005518:	b913      	cbnz	r3, 8005520 <_fflush_r+0x10>
 800551a:	2500      	movs	r5, #0
 800551c:	4628      	mov	r0, r5
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	b118      	cbz	r0, 800552a <_fflush_r+0x1a>
 8005522:	6a03      	ldr	r3, [r0, #32]
 8005524:	b90b      	cbnz	r3, 800552a <_fflush_r+0x1a>
 8005526:	f7fe fa1b 	bl	8003960 <__sinit>
 800552a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0f3      	beq.n	800551a <_fflush_r+0xa>
 8005532:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005534:	07d0      	lsls	r0, r2, #31
 8005536:	d404      	bmi.n	8005542 <_fflush_r+0x32>
 8005538:	0599      	lsls	r1, r3, #22
 800553a:	d402      	bmi.n	8005542 <_fflush_r+0x32>
 800553c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800553e:	f7fe fb28 	bl	8003b92 <__retarget_lock_acquire_recursive>
 8005542:	4628      	mov	r0, r5
 8005544:	4621      	mov	r1, r4
 8005546:	f7ff ff63 	bl	8005410 <__sflush_r>
 800554a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800554c:	4605      	mov	r5, r0
 800554e:	07da      	lsls	r2, r3, #31
 8005550:	d4e4      	bmi.n	800551c <_fflush_r+0xc>
 8005552:	89a3      	ldrh	r3, [r4, #12]
 8005554:	059b      	lsls	r3, r3, #22
 8005556:	d4e1      	bmi.n	800551c <_fflush_r+0xc>
 8005558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800555a:	f7fe fb1b 	bl	8003b94 <__retarget_lock_release_recursive>
 800555e:	e7dd      	b.n	800551c <_fflush_r+0xc>

08005560 <memmove>:
 8005560:	4288      	cmp	r0, r1
 8005562:	b510      	push	{r4, lr}
 8005564:	eb01 0402 	add.w	r4, r1, r2
 8005568:	d902      	bls.n	8005570 <memmove+0x10>
 800556a:	4284      	cmp	r4, r0
 800556c:	4623      	mov	r3, r4
 800556e:	d807      	bhi.n	8005580 <memmove+0x20>
 8005570:	1e43      	subs	r3, r0, #1
 8005572:	42a1      	cmp	r1, r4
 8005574:	d008      	beq.n	8005588 <memmove+0x28>
 8005576:	f811 2b01 	ldrb.w	r2, [r1], #1
 800557a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800557e:	e7f8      	b.n	8005572 <memmove+0x12>
 8005580:	4601      	mov	r1, r0
 8005582:	4402      	add	r2, r0
 8005584:	428a      	cmp	r2, r1
 8005586:	d100      	bne.n	800558a <memmove+0x2a>
 8005588:	bd10      	pop	{r4, pc}
 800558a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800558e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005592:	e7f7      	b.n	8005584 <memmove+0x24>

08005594 <_sbrk_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	2300      	movs	r3, #0
 8005598:	4d05      	ldr	r5, [pc, #20]	@ (80055b0 <_sbrk_r+0x1c>)
 800559a:	4604      	mov	r4, r0
 800559c:	4608      	mov	r0, r1
 800559e:	602b      	str	r3, [r5, #0]
 80055a0:	f7fc f8cc 	bl	800173c <_sbrk>
 80055a4:	1c43      	adds	r3, r0, #1
 80055a6:	d102      	bne.n	80055ae <_sbrk_r+0x1a>
 80055a8:	682b      	ldr	r3, [r5, #0]
 80055aa:	b103      	cbz	r3, 80055ae <_sbrk_r+0x1a>
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
 80055b0:	200003d8 	.word	0x200003d8

080055b4 <memcpy>:
 80055b4:	440a      	add	r2, r1
 80055b6:	4291      	cmp	r1, r2
 80055b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80055bc:	d100      	bne.n	80055c0 <memcpy+0xc>
 80055be:	4770      	bx	lr
 80055c0:	b510      	push	{r4, lr}
 80055c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055c6:	4291      	cmp	r1, r2
 80055c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055cc:	d1f9      	bne.n	80055c2 <memcpy+0xe>
 80055ce:	bd10      	pop	{r4, pc}

080055d0 <__assert_func>:
 80055d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055d2:	4614      	mov	r4, r2
 80055d4:	461a      	mov	r2, r3
 80055d6:	4b09      	ldr	r3, [pc, #36]	@ (80055fc <__assert_func+0x2c>)
 80055d8:	4605      	mov	r5, r0
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68d8      	ldr	r0, [r3, #12]
 80055de:	b14c      	cbz	r4, 80055f4 <__assert_func+0x24>
 80055e0:	4b07      	ldr	r3, [pc, #28]	@ (8005600 <__assert_func+0x30>)
 80055e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055e6:	9100      	str	r1, [sp, #0]
 80055e8:	462b      	mov	r3, r5
 80055ea:	4906      	ldr	r1, [pc, #24]	@ (8005604 <__assert_func+0x34>)
 80055ec:	f000 f870 	bl	80056d0 <fiprintf>
 80055f0:	f000 f880 	bl	80056f4 <abort>
 80055f4:	4b04      	ldr	r3, [pc, #16]	@ (8005608 <__assert_func+0x38>)
 80055f6:	461c      	mov	r4, r3
 80055f8:	e7f3      	b.n	80055e2 <__assert_func+0x12>
 80055fa:	bf00      	nop
 80055fc:	2000002c 	.word	0x2000002c
 8005600:	08005de7 	.word	0x08005de7
 8005604:	08005df4 	.word	0x08005df4
 8005608:	08005e22 	.word	0x08005e22

0800560c <_calloc_r>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	fba1 5402 	umull	r5, r4, r1, r2
 8005612:	b934      	cbnz	r4, 8005622 <_calloc_r+0x16>
 8005614:	4629      	mov	r1, r5
 8005616:	f7ff f99d 	bl	8004954 <_malloc_r>
 800561a:	4606      	mov	r6, r0
 800561c:	b928      	cbnz	r0, 800562a <_calloc_r+0x1e>
 800561e:	4630      	mov	r0, r6
 8005620:	bd70      	pop	{r4, r5, r6, pc}
 8005622:	220c      	movs	r2, #12
 8005624:	2600      	movs	r6, #0
 8005626:	6002      	str	r2, [r0, #0]
 8005628:	e7f9      	b.n	800561e <_calloc_r+0x12>
 800562a:	462a      	mov	r2, r5
 800562c:	4621      	mov	r1, r4
 800562e:	f7fe fa32 	bl	8003a96 <memset>
 8005632:	e7f4      	b.n	800561e <_calloc_r+0x12>

08005634 <__ascii_mbtowc>:
 8005634:	b082      	sub	sp, #8
 8005636:	b901      	cbnz	r1, 800563a <__ascii_mbtowc+0x6>
 8005638:	a901      	add	r1, sp, #4
 800563a:	b142      	cbz	r2, 800564e <__ascii_mbtowc+0x1a>
 800563c:	b14b      	cbz	r3, 8005652 <__ascii_mbtowc+0x1e>
 800563e:	7813      	ldrb	r3, [r2, #0]
 8005640:	600b      	str	r3, [r1, #0]
 8005642:	7812      	ldrb	r2, [r2, #0]
 8005644:	1e10      	subs	r0, r2, #0
 8005646:	bf18      	it	ne
 8005648:	2001      	movne	r0, #1
 800564a:	b002      	add	sp, #8
 800564c:	4770      	bx	lr
 800564e:	4610      	mov	r0, r2
 8005650:	e7fb      	b.n	800564a <__ascii_mbtowc+0x16>
 8005652:	f06f 0001 	mvn.w	r0, #1
 8005656:	e7f8      	b.n	800564a <__ascii_mbtowc+0x16>

08005658 <_realloc_r>:
 8005658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800565c:	4607      	mov	r7, r0
 800565e:	4614      	mov	r4, r2
 8005660:	460d      	mov	r5, r1
 8005662:	b921      	cbnz	r1, 800566e <_realloc_r+0x16>
 8005664:	4611      	mov	r1, r2
 8005666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800566a:	f7ff b973 	b.w	8004954 <_malloc_r>
 800566e:	b92a      	cbnz	r2, 800567c <_realloc_r+0x24>
 8005670:	f7ff f8fe 	bl	8004870 <_free_r>
 8005674:	4625      	mov	r5, r4
 8005676:	4628      	mov	r0, r5
 8005678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800567c:	f000 f841 	bl	8005702 <_malloc_usable_size_r>
 8005680:	4284      	cmp	r4, r0
 8005682:	4606      	mov	r6, r0
 8005684:	d802      	bhi.n	800568c <_realloc_r+0x34>
 8005686:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800568a:	d8f4      	bhi.n	8005676 <_realloc_r+0x1e>
 800568c:	4621      	mov	r1, r4
 800568e:	4638      	mov	r0, r7
 8005690:	f7ff f960 	bl	8004954 <_malloc_r>
 8005694:	4680      	mov	r8, r0
 8005696:	b908      	cbnz	r0, 800569c <_realloc_r+0x44>
 8005698:	4645      	mov	r5, r8
 800569a:	e7ec      	b.n	8005676 <_realloc_r+0x1e>
 800569c:	42b4      	cmp	r4, r6
 800569e:	4622      	mov	r2, r4
 80056a0:	4629      	mov	r1, r5
 80056a2:	bf28      	it	cs
 80056a4:	4632      	movcs	r2, r6
 80056a6:	f7ff ff85 	bl	80055b4 <memcpy>
 80056aa:	4629      	mov	r1, r5
 80056ac:	4638      	mov	r0, r7
 80056ae:	f7ff f8df 	bl	8004870 <_free_r>
 80056b2:	e7f1      	b.n	8005698 <_realloc_r+0x40>

080056b4 <__ascii_wctomb>:
 80056b4:	4603      	mov	r3, r0
 80056b6:	4608      	mov	r0, r1
 80056b8:	b141      	cbz	r1, 80056cc <__ascii_wctomb+0x18>
 80056ba:	2aff      	cmp	r2, #255	@ 0xff
 80056bc:	d904      	bls.n	80056c8 <__ascii_wctomb+0x14>
 80056be:	228a      	movs	r2, #138	@ 0x8a
 80056c0:	f04f 30ff 	mov.w	r0, #4294967295
 80056c4:	601a      	str	r2, [r3, #0]
 80056c6:	4770      	bx	lr
 80056c8:	2001      	movs	r0, #1
 80056ca:	700a      	strb	r2, [r1, #0]
 80056cc:	4770      	bx	lr
	...

080056d0 <fiprintf>:
 80056d0:	b40e      	push	{r1, r2, r3}
 80056d2:	b503      	push	{r0, r1, lr}
 80056d4:	4601      	mov	r1, r0
 80056d6:	ab03      	add	r3, sp, #12
 80056d8:	4805      	ldr	r0, [pc, #20]	@ (80056f0 <fiprintf+0x20>)
 80056da:	f853 2b04 	ldr.w	r2, [r3], #4
 80056de:	6800      	ldr	r0, [r0, #0]
 80056e0:	9301      	str	r3, [sp, #4]
 80056e2:	f000 f83d 	bl	8005760 <_vfiprintf_r>
 80056e6:	b002      	add	sp, #8
 80056e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80056ec:	b003      	add	sp, #12
 80056ee:	4770      	bx	lr
 80056f0:	2000002c 	.word	0x2000002c

080056f4 <abort>:
 80056f4:	2006      	movs	r0, #6
 80056f6:	b508      	push	{r3, lr}
 80056f8:	f000 fa06 	bl	8005b08 <raise>
 80056fc:	2001      	movs	r0, #1
 80056fe:	f7fb ffa8 	bl	8001652 <_exit>

08005702 <_malloc_usable_size_r>:
 8005702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005706:	1f18      	subs	r0, r3, #4
 8005708:	2b00      	cmp	r3, #0
 800570a:	bfbc      	itt	lt
 800570c:	580b      	ldrlt	r3, [r1, r0]
 800570e:	18c0      	addlt	r0, r0, r3
 8005710:	4770      	bx	lr

08005712 <__sfputc_r>:
 8005712:	6893      	ldr	r3, [r2, #8]
 8005714:	b410      	push	{r4}
 8005716:	3b01      	subs	r3, #1
 8005718:	2b00      	cmp	r3, #0
 800571a:	6093      	str	r3, [r2, #8]
 800571c:	da07      	bge.n	800572e <__sfputc_r+0x1c>
 800571e:	6994      	ldr	r4, [r2, #24]
 8005720:	42a3      	cmp	r3, r4
 8005722:	db01      	blt.n	8005728 <__sfputc_r+0x16>
 8005724:	290a      	cmp	r1, #10
 8005726:	d102      	bne.n	800572e <__sfputc_r+0x1c>
 8005728:	bc10      	pop	{r4}
 800572a:	f000 b931 	b.w	8005990 <__swbuf_r>
 800572e:	6813      	ldr	r3, [r2, #0]
 8005730:	1c58      	adds	r0, r3, #1
 8005732:	6010      	str	r0, [r2, #0]
 8005734:	7019      	strb	r1, [r3, #0]
 8005736:	4608      	mov	r0, r1
 8005738:	bc10      	pop	{r4}
 800573a:	4770      	bx	lr

0800573c <__sfputs_r>:
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573e:	4606      	mov	r6, r0
 8005740:	460f      	mov	r7, r1
 8005742:	4614      	mov	r4, r2
 8005744:	18d5      	adds	r5, r2, r3
 8005746:	42ac      	cmp	r4, r5
 8005748:	d101      	bne.n	800574e <__sfputs_r+0x12>
 800574a:	2000      	movs	r0, #0
 800574c:	e007      	b.n	800575e <__sfputs_r+0x22>
 800574e:	463a      	mov	r2, r7
 8005750:	4630      	mov	r0, r6
 8005752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005756:	f7ff ffdc 	bl	8005712 <__sfputc_r>
 800575a:	1c43      	adds	r3, r0, #1
 800575c:	d1f3      	bne.n	8005746 <__sfputs_r+0xa>
 800575e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005760 <_vfiprintf_r>:
 8005760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005764:	460d      	mov	r5, r1
 8005766:	4614      	mov	r4, r2
 8005768:	4698      	mov	r8, r3
 800576a:	4606      	mov	r6, r0
 800576c:	b09d      	sub	sp, #116	@ 0x74
 800576e:	b118      	cbz	r0, 8005778 <_vfiprintf_r+0x18>
 8005770:	6a03      	ldr	r3, [r0, #32]
 8005772:	b90b      	cbnz	r3, 8005778 <_vfiprintf_r+0x18>
 8005774:	f7fe f8f4 	bl	8003960 <__sinit>
 8005778:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800577a:	07d9      	lsls	r1, r3, #31
 800577c:	d405      	bmi.n	800578a <_vfiprintf_r+0x2a>
 800577e:	89ab      	ldrh	r3, [r5, #12]
 8005780:	059a      	lsls	r2, r3, #22
 8005782:	d402      	bmi.n	800578a <_vfiprintf_r+0x2a>
 8005784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005786:	f7fe fa04 	bl	8003b92 <__retarget_lock_acquire_recursive>
 800578a:	89ab      	ldrh	r3, [r5, #12]
 800578c:	071b      	lsls	r3, r3, #28
 800578e:	d501      	bpl.n	8005794 <_vfiprintf_r+0x34>
 8005790:	692b      	ldr	r3, [r5, #16]
 8005792:	b99b      	cbnz	r3, 80057bc <_vfiprintf_r+0x5c>
 8005794:	4629      	mov	r1, r5
 8005796:	4630      	mov	r0, r6
 8005798:	f000 f938 	bl	8005a0c <__swsetup_r>
 800579c:	b170      	cbz	r0, 80057bc <_vfiprintf_r+0x5c>
 800579e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057a0:	07dc      	lsls	r4, r3, #31
 80057a2:	d504      	bpl.n	80057ae <_vfiprintf_r+0x4e>
 80057a4:	f04f 30ff 	mov.w	r0, #4294967295
 80057a8:	b01d      	add	sp, #116	@ 0x74
 80057aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ae:	89ab      	ldrh	r3, [r5, #12]
 80057b0:	0598      	lsls	r0, r3, #22
 80057b2:	d4f7      	bmi.n	80057a4 <_vfiprintf_r+0x44>
 80057b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057b6:	f7fe f9ed 	bl	8003b94 <__retarget_lock_release_recursive>
 80057ba:	e7f3      	b.n	80057a4 <_vfiprintf_r+0x44>
 80057bc:	2300      	movs	r3, #0
 80057be:	9309      	str	r3, [sp, #36]	@ 0x24
 80057c0:	2320      	movs	r3, #32
 80057c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80057c6:	2330      	movs	r3, #48	@ 0x30
 80057c8:	f04f 0901 	mov.w	r9, #1
 80057cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80057d0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800597c <_vfiprintf_r+0x21c>
 80057d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80057d8:	4623      	mov	r3, r4
 80057da:	469a      	mov	sl, r3
 80057dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057e0:	b10a      	cbz	r2, 80057e6 <_vfiprintf_r+0x86>
 80057e2:	2a25      	cmp	r2, #37	@ 0x25
 80057e4:	d1f9      	bne.n	80057da <_vfiprintf_r+0x7a>
 80057e6:	ebba 0b04 	subs.w	fp, sl, r4
 80057ea:	d00b      	beq.n	8005804 <_vfiprintf_r+0xa4>
 80057ec:	465b      	mov	r3, fp
 80057ee:	4622      	mov	r2, r4
 80057f0:	4629      	mov	r1, r5
 80057f2:	4630      	mov	r0, r6
 80057f4:	f7ff ffa2 	bl	800573c <__sfputs_r>
 80057f8:	3001      	adds	r0, #1
 80057fa:	f000 80a7 	beq.w	800594c <_vfiprintf_r+0x1ec>
 80057fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005800:	445a      	add	r2, fp
 8005802:	9209      	str	r2, [sp, #36]	@ 0x24
 8005804:	f89a 3000 	ldrb.w	r3, [sl]
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 809f 	beq.w	800594c <_vfiprintf_r+0x1ec>
 800580e:	2300      	movs	r3, #0
 8005810:	f04f 32ff 	mov.w	r2, #4294967295
 8005814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005818:	f10a 0a01 	add.w	sl, sl, #1
 800581c:	9304      	str	r3, [sp, #16]
 800581e:	9307      	str	r3, [sp, #28]
 8005820:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005824:	931a      	str	r3, [sp, #104]	@ 0x68
 8005826:	4654      	mov	r4, sl
 8005828:	2205      	movs	r2, #5
 800582a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800582e:	4853      	ldr	r0, [pc, #332]	@ (800597c <_vfiprintf_r+0x21c>)
 8005830:	f7fe f9b1 	bl	8003b96 <memchr>
 8005834:	9a04      	ldr	r2, [sp, #16]
 8005836:	b9d8      	cbnz	r0, 8005870 <_vfiprintf_r+0x110>
 8005838:	06d1      	lsls	r1, r2, #27
 800583a:	bf44      	itt	mi
 800583c:	2320      	movmi	r3, #32
 800583e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005842:	0713      	lsls	r3, r2, #28
 8005844:	bf44      	itt	mi
 8005846:	232b      	movmi	r3, #43	@ 0x2b
 8005848:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800584c:	f89a 3000 	ldrb.w	r3, [sl]
 8005850:	2b2a      	cmp	r3, #42	@ 0x2a
 8005852:	d015      	beq.n	8005880 <_vfiprintf_r+0x120>
 8005854:	4654      	mov	r4, sl
 8005856:	2000      	movs	r0, #0
 8005858:	f04f 0c0a 	mov.w	ip, #10
 800585c:	9a07      	ldr	r2, [sp, #28]
 800585e:	4621      	mov	r1, r4
 8005860:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005864:	3b30      	subs	r3, #48	@ 0x30
 8005866:	2b09      	cmp	r3, #9
 8005868:	d94b      	bls.n	8005902 <_vfiprintf_r+0x1a2>
 800586a:	b1b0      	cbz	r0, 800589a <_vfiprintf_r+0x13a>
 800586c:	9207      	str	r2, [sp, #28]
 800586e:	e014      	b.n	800589a <_vfiprintf_r+0x13a>
 8005870:	eba0 0308 	sub.w	r3, r0, r8
 8005874:	fa09 f303 	lsl.w	r3, r9, r3
 8005878:	4313      	orrs	r3, r2
 800587a:	46a2      	mov	sl, r4
 800587c:	9304      	str	r3, [sp, #16]
 800587e:	e7d2      	b.n	8005826 <_vfiprintf_r+0xc6>
 8005880:	9b03      	ldr	r3, [sp, #12]
 8005882:	1d19      	adds	r1, r3, #4
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	9103      	str	r1, [sp, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	bfbb      	ittet	lt
 800588c:	425b      	neglt	r3, r3
 800588e:	f042 0202 	orrlt.w	r2, r2, #2
 8005892:	9307      	strge	r3, [sp, #28]
 8005894:	9307      	strlt	r3, [sp, #28]
 8005896:	bfb8      	it	lt
 8005898:	9204      	strlt	r2, [sp, #16]
 800589a:	7823      	ldrb	r3, [r4, #0]
 800589c:	2b2e      	cmp	r3, #46	@ 0x2e
 800589e:	d10a      	bne.n	80058b6 <_vfiprintf_r+0x156>
 80058a0:	7863      	ldrb	r3, [r4, #1]
 80058a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80058a4:	d132      	bne.n	800590c <_vfiprintf_r+0x1ac>
 80058a6:	9b03      	ldr	r3, [sp, #12]
 80058a8:	3402      	adds	r4, #2
 80058aa:	1d1a      	adds	r2, r3, #4
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	9203      	str	r2, [sp, #12]
 80058b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80058b4:	9305      	str	r3, [sp, #20]
 80058b6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005980 <_vfiprintf_r+0x220>
 80058ba:	2203      	movs	r2, #3
 80058bc:	4650      	mov	r0, sl
 80058be:	7821      	ldrb	r1, [r4, #0]
 80058c0:	f7fe f969 	bl	8003b96 <memchr>
 80058c4:	b138      	cbz	r0, 80058d6 <_vfiprintf_r+0x176>
 80058c6:	2240      	movs	r2, #64	@ 0x40
 80058c8:	9b04      	ldr	r3, [sp, #16]
 80058ca:	eba0 000a 	sub.w	r0, r0, sl
 80058ce:	4082      	lsls	r2, r0
 80058d0:	4313      	orrs	r3, r2
 80058d2:	3401      	adds	r4, #1
 80058d4:	9304      	str	r3, [sp, #16]
 80058d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058da:	2206      	movs	r2, #6
 80058dc:	4829      	ldr	r0, [pc, #164]	@ (8005984 <_vfiprintf_r+0x224>)
 80058de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058e2:	f7fe f958 	bl	8003b96 <memchr>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d03f      	beq.n	800596a <_vfiprintf_r+0x20a>
 80058ea:	4b27      	ldr	r3, [pc, #156]	@ (8005988 <_vfiprintf_r+0x228>)
 80058ec:	bb1b      	cbnz	r3, 8005936 <_vfiprintf_r+0x1d6>
 80058ee:	9b03      	ldr	r3, [sp, #12]
 80058f0:	3307      	adds	r3, #7
 80058f2:	f023 0307 	bic.w	r3, r3, #7
 80058f6:	3308      	adds	r3, #8
 80058f8:	9303      	str	r3, [sp, #12]
 80058fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058fc:	443b      	add	r3, r7
 80058fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005900:	e76a      	b.n	80057d8 <_vfiprintf_r+0x78>
 8005902:	460c      	mov	r4, r1
 8005904:	2001      	movs	r0, #1
 8005906:	fb0c 3202 	mla	r2, ip, r2, r3
 800590a:	e7a8      	b.n	800585e <_vfiprintf_r+0xfe>
 800590c:	2300      	movs	r3, #0
 800590e:	f04f 0c0a 	mov.w	ip, #10
 8005912:	4619      	mov	r1, r3
 8005914:	3401      	adds	r4, #1
 8005916:	9305      	str	r3, [sp, #20]
 8005918:	4620      	mov	r0, r4
 800591a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800591e:	3a30      	subs	r2, #48	@ 0x30
 8005920:	2a09      	cmp	r2, #9
 8005922:	d903      	bls.n	800592c <_vfiprintf_r+0x1cc>
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0c6      	beq.n	80058b6 <_vfiprintf_r+0x156>
 8005928:	9105      	str	r1, [sp, #20]
 800592a:	e7c4      	b.n	80058b6 <_vfiprintf_r+0x156>
 800592c:	4604      	mov	r4, r0
 800592e:	2301      	movs	r3, #1
 8005930:	fb0c 2101 	mla	r1, ip, r1, r2
 8005934:	e7f0      	b.n	8005918 <_vfiprintf_r+0x1b8>
 8005936:	ab03      	add	r3, sp, #12
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	462a      	mov	r2, r5
 800593c:	4630      	mov	r0, r6
 800593e:	4b13      	ldr	r3, [pc, #76]	@ (800598c <_vfiprintf_r+0x22c>)
 8005940:	a904      	add	r1, sp, #16
 8005942:	f7fd fbc5 	bl	80030d0 <_printf_float>
 8005946:	4607      	mov	r7, r0
 8005948:	1c78      	adds	r0, r7, #1
 800594a:	d1d6      	bne.n	80058fa <_vfiprintf_r+0x19a>
 800594c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800594e:	07d9      	lsls	r1, r3, #31
 8005950:	d405      	bmi.n	800595e <_vfiprintf_r+0x1fe>
 8005952:	89ab      	ldrh	r3, [r5, #12]
 8005954:	059a      	lsls	r2, r3, #22
 8005956:	d402      	bmi.n	800595e <_vfiprintf_r+0x1fe>
 8005958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800595a:	f7fe f91b 	bl	8003b94 <__retarget_lock_release_recursive>
 800595e:	89ab      	ldrh	r3, [r5, #12]
 8005960:	065b      	lsls	r3, r3, #25
 8005962:	f53f af1f 	bmi.w	80057a4 <_vfiprintf_r+0x44>
 8005966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005968:	e71e      	b.n	80057a8 <_vfiprintf_r+0x48>
 800596a:	ab03      	add	r3, sp, #12
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	462a      	mov	r2, r5
 8005970:	4630      	mov	r0, r6
 8005972:	4b06      	ldr	r3, [pc, #24]	@ (800598c <_vfiprintf_r+0x22c>)
 8005974:	a904      	add	r1, sp, #16
 8005976:	f7fd fe49 	bl	800360c <_printf_i>
 800597a:	e7e4      	b.n	8005946 <_vfiprintf_r+0x1e6>
 800597c:	08005dcc 	.word	0x08005dcc
 8005980:	08005dd2 	.word	0x08005dd2
 8005984:	08005dd6 	.word	0x08005dd6
 8005988:	080030d1 	.word	0x080030d1
 800598c:	0800573d 	.word	0x0800573d

08005990 <__swbuf_r>:
 8005990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005992:	460e      	mov	r6, r1
 8005994:	4614      	mov	r4, r2
 8005996:	4605      	mov	r5, r0
 8005998:	b118      	cbz	r0, 80059a2 <__swbuf_r+0x12>
 800599a:	6a03      	ldr	r3, [r0, #32]
 800599c:	b90b      	cbnz	r3, 80059a2 <__swbuf_r+0x12>
 800599e:	f7fd ffdf 	bl	8003960 <__sinit>
 80059a2:	69a3      	ldr	r3, [r4, #24]
 80059a4:	60a3      	str	r3, [r4, #8]
 80059a6:	89a3      	ldrh	r3, [r4, #12]
 80059a8:	071a      	lsls	r2, r3, #28
 80059aa:	d501      	bpl.n	80059b0 <__swbuf_r+0x20>
 80059ac:	6923      	ldr	r3, [r4, #16]
 80059ae:	b943      	cbnz	r3, 80059c2 <__swbuf_r+0x32>
 80059b0:	4621      	mov	r1, r4
 80059b2:	4628      	mov	r0, r5
 80059b4:	f000 f82a 	bl	8005a0c <__swsetup_r>
 80059b8:	b118      	cbz	r0, 80059c2 <__swbuf_r+0x32>
 80059ba:	f04f 37ff 	mov.w	r7, #4294967295
 80059be:	4638      	mov	r0, r7
 80059c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	6922      	ldr	r2, [r4, #16]
 80059c6:	b2f6      	uxtb	r6, r6
 80059c8:	1a98      	subs	r0, r3, r2
 80059ca:	6963      	ldr	r3, [r4, #20]
 80059cc:	4637      	mov	r7, r6
 80059ce:	4283      	cmp	r3, r0
 80059d0:	dc05      	bgt.n	80059de <__swbuf_r+0x4e>
 80059d2:	4621      	mov	r1, r4
 80059d4:	4628      	mov	r0, r5
 80059d6:	f7ff fd9b 	bl	8005510 <_fflush_r>
 80059da:	2800      	cmp	r0, #0
 80059dc:	d1ed      	bne.n	80059ba <__swbuf_r+0x2a>
 80059de:	68a3      	ldr	r3, [r4, #8]
 80059e0:	3b01      	subs	r3, #1
 80059e2:	60a3      	str	r3, [r4, #8]
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	6022      	str	r2, [r4, #0]
 80059ea:	701e      	strb	r6, [r3, #0]
 80059ec:	6962      	ldr	r2, [r4, #20]
 80059ee:	1c43      	adds	r3, r0, #1
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d004      	beq.n	80059fe <__swbuf_r+0x6e>
 80059f4:	89a3      	ldrh	r3, [r4, #12]
 80059f6:	07db      	lsls	r3, r3, #31
 80059f8:	d5e1      	bpl.n	80059be <__swbuf_r+0x2e>
 80059fa:	2e0a      	cmp	r6, #10
 80059fc:	d1df      	bne.n	80059be <__swbuf_r+0x2e>
 80059fe:	4621      	mov	r1, r4
 8005a00:	4628      	mov	r0, r5
 8005a02:	f7ff fd85 	bl	8005510 <_fflush_r>
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d0d9      	beq.n	80059be <__swbuf_r+0x2e>
 8005a0a:	e7d6      	b.n	80059ba <__swbuf_r+0x2a>

08005a0c <__swsetup_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4b29      	ldr	r3, [pc, #164]	@ (8005ab4 <__swsetup_r+0xa8>)
 8005a10:	4605      	mov	r5, r0
 8005a12:	6818      	ldr	r0, [r3, #0]
 8005a14:	460c      	mov	r4, r1
 8005a16:	b118      	cbz	r0, 8005a20 <__swsetup_r+0x14>
 8005a18:	6a03      	ldr	r3, [r0, #32]
 8005a1a:	b90b      	cbnz	r3, 8005a20 <__swsetup_r+0x14>
 8005a1c:	f7fd ffa0 	bl	8003960 <__sinit>
 8005a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a24:	0719      	lsls	r1, r3, #28
 8005a26:	d422      	bmi.n	8005a6e <__swsetup_r+0x62>
 8005a28:	06da      	lsls	r2, r3, #27
 8005a2a:	d407      	bmi.n	8005a3c <__swsetup_r+0x30>
 8005a2c:	2209      	movs	r2, #9
 8005a2e:	602a      	str	r2, [r5, #0]
 8005a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a34:	f04f 30ff 	mov.w	r0, #4294967295
 8005a38:	81a3      	strh	r3, [r4, #12]
 8005a3a:	e033      	b.n	8005aa4 <__swsetup_r+0x98>
 8005a3c:	0758      	lsls	r0, r3, #29
 8005a3e:	d512      	bpl.n	8005a66 <__swsetup_r+0x5a>
 8005a40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a42:	b141      	cbz	r1, 8005a56 <__swsetup_r+0x4a>
 8005a44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a48:	4299      	cmp	r1, r3
 8005a4a:	d002      	beq.n	8005a52 <__swsetup_r+0x46>
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f7fe ff0f 	bl	8004870 <_free_r>
 8005a52:	2300      	movs	r3, #0
 8005a54:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a56:	89a3      	ldrh	r3, [r4, #12]
 8005a58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a5c:	81a3      	strh	r3, [r4, #12]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	6063      	str	r3, [r4, #4]
 8005a62:	6923      	ldr	r3, [r4, #16]
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	89a3      	ldrh	r3, [r4, #12]
 8005a68:	f043 0308 	orr.w	r3, r3, #8
 8005a6c:	81a3      	strh	r3, [r4, #12]
 8005a6e:	6923      	ldr	r3, [r4, #16]
 8005a70:	b94b      	cbnz	r3, 8005a86 <__swsetup_r+0x7a>
 8005a72:	89a3      	ldrh	r3, [r4, #12]
 8005a74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a7c:	d003      	beq.n	8005a86 <__swsetup_r+0x7a>
 8005a7e:	4621      	mov	r1, r4
 8005a80:	4628      	mov	r0, r5
 8005a82:	f000 f882 	bl	8005b8a <__smakebuf_r>
 8005a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a8a:	f013 0201 	ands.w	r2, r3, #1
 8005a8e:	d00a      	beq.n	8005aa6 <__swsetup_r+0x9a>
 8005a90:	2200      	movs	r2, #0
 8005a92:	60a2      	str	r2, [r4, #8]
 8005a94:	6962      	ldr	r2, [r4, #20]
 8005a96:	4252      	negs	r2, r2
 8005a98:	61a2      	str	r2, [r4, #24]
 8005a9a:	6922      	ldr	r2, [r4, #16]
 8005a9c:	b942      	cbnz	r2, 8005ab0 <__swsetup_r+0xa4>
 8005a9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005aa2:	d1c5      	bne.n	8005a30 <__swsetup_r+0x24>
 8005aa4:	bd38      	pop	{r3, r4, r5, pc}
 8005aa6:	0799      	lsls	r1, r3, #30
 8005aa8:	bf58      	it	pl
 8005aaa:	6962      	ldrpl	r2, [r4, #20]
 8005aac:	60a2      	str	r2, [r4, #8]
 8005aae:	e7f4      	b.n	8005a9a <__swsetup_r+0x8e>
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	e7f7      	b.n	8005aa4 <__swsetup_r+0x98>
 8005ab4:	2000002c 	.word	0x2000002c

08005ab8 <_raise_r>:
 8005ab8:	291f      	cmp	r1, #31
 8005aba:	b538      	push	{r3, r4, r5, lr}
 8005abc:	4605      	mov	r5, r0
 8005abe:	460c      	mov	r4, r1
 8005ac0:	d904      	bls.n	8005acc <_raise_r+0x14>
 8005ac2:	2316      	movs	r3, #22
 8005ac4:	6003      	str	r3, [r0, #0]
 8005ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005ace:	b112      	cbz	r2, 8005ad6 <_raise_r+0x1e>
 8005ad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ad4:	b94b      	cbnz	r3, 8005aea <_raise_r+0x32>
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f000 f830 	bl	8005b3c <_getpid_r>
 8005adc:	4622      	mov	r2, r4
 8005ade:	4601      	mov	r1, r0
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ae6:	f000 b817 	b.w	8005b18 <_kill_r>
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d00a      	beq.n	8005b04 <_raise_r+0x4c>
 8005aee:	1c59      	adds	r1, r3, #1
 8005af0:	d103      	bne.n	8005afa <_raise_r+0x42>
 8005af2:	2316      	movs	r3, #22
 8005af4:	6003      	str	r3, [r0, #0]
 8005af6:	2001      	movs	r0, #1
 8005af8:	e7e7      	b.n	8005aca <_raise_r+0x12>
 8005afa:	2100      	movs	r1, #0
 8005afc:	4620      	mov	r0, r4
 8005afe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005b02:	4798      	blx	r3
 8005b04:	2000      	movs	r0, #0
 8005b06:	e7e0      	b.n	8005aca <_raise_r+0x12>

08005b08 <raise>:
 8005b08:	4b02      	ldr	r3, [pc, #8]	@ (8005b14 <raise+0xc>)
 8005b0a:	4601      	mov	r1, r0
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	f7ff bfd3 	b.w	8005ab8 <_raise_r>
 8005b12:	bf00      	nop
 8005b14:	2000002c 	.word	0x2000002c

08005b18 <_kill_r>:
 8005b18:	b538      	push	{r3, r4, r5, lr}
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	4d06      	ldr	r5, [pc, #24]	@ (8005b38 <_kill_r+0x20>)
 8005b1e:	4604      	mov	r4, r0
 8005b20:	4608      	mov	r0, r1
 8005b22:	4611      	mov	r1, r2
 8005b24:	602b      	str	r3, [r5, #0]
 8005b26:	f7fb fd84 	bl	8001632 <_kill>
 8005b2a:	1c43      	adds	r3, r0, #1
 8005b2c:	d102      	bne.n	8005b34 <_kill_r+0x1c>
 8005b2e:	682b      	ldr	r3, [r5, #0]
 8005b30:	b103      	cbz	r3, 8005b34 <_kill_r+0x1c>
 8005b32:	6023      	str	r3, [r4, #0]
 8005b34:	bd38      	pop	{r3, r4, r5, pc}
 8005b36:	bf00      	nop
 8005b38:	200003d8 	.word	0x200003d8

08005b3c <_getpid_r>:
 8005b3c:	f7fb bd72 	b.w	8001624 <_getpid>

08005b40 <__swhatbuf_r>:
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	460c      	mov	r4, r1
 8005b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b48:	4615      	mov	r5, r2
 8005b4a:	2900      	cmp	r1, #0
 8005b4c:	461e      	mov	r6, r3
 8005b4e:	b096      	sub	sp, #88	@ 0x58
 8005b50:	da0c      	bge.n	8005b6c <__swhatbuf_r+0x2c>
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	2100      	movs	r1, #0
 8005b56:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005b5a:	bf14      	ite	ne
 8005b5c:	2340      	movne	r3, #64	@ 0x40
 8005b5e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005b62:	2000      	movs	r0, #0
 8005b64:	6031      	str	r1, [r6, #0]
 8005b66:	602b      	str	r3, [r5, #0]
 8005b68:	b016      	add	sp, #88	@ 0x58
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}
 8005b6c:	466a      	mov	r2, sp
 8005b6e:	f000 f849 	bl	8005c04 <_fstat_r>
 8005b72:	2800      	cmp	r0, #0
 8005b74:	dbed      	blt.n	8005b52 <__swhatbuf_r+0x12>
 8005b76:	9901      	ldr	r1, [sp, #4]
 8005b78:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b7c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b80:	4259      	negs	r1, r3
 8005b82:	4159      	adcs	r1, r3
 8005b84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b88:	e7eb      	b.n	8005b62 <__swhatbuf_r+0x22>

08005b8a <__smakebuf_r>:
 8005b8a:	898b      	ldrh	r3, [r1, #12]
 8005b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b8e:	079d      	lsls	r5, r3, #30
 8005b90:	4606      	mov	r6, r0
 8005b92:	460c      	mov	r4, r1
 8005b94:	d507      	bpl.n	8005ba6 <__smakebuf_r+0x1c>
 8005b96:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b9a:	6023      	str	r3, [r4, #0]
 8005b9c:	6123      	str	r3, [r4, #16]
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	6163      	str	r3, [r4, #20]
 8005ba2:	b003      	add	sp, #12
 8005ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ba6:	466a      	mov	r2, sp
 8005ba8:	ab01      	add	r3, sp, #4
 8005baa:	f7ff ffc9 	bl	8005b40 <__swhatbuf_r>
 8005bae:	9f00      	ldr	r7, [sp, #0]
 8005bb0:	4605      	mov	r5, r0
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f7fe fecd 	bl	8004954 <_malloc_r>
 8005bba:	b948      	cbnz	r0, 8005bd0 <__smakebuf_r+0x46>
 8005bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc0:	059a      	lsls	r2, r3, #22
 8005bc2:	d4ee      	bmi.n	8005ba2 <__smakebuf_r+0x18>
 8005bc4:	f023 0303 	bic.w	r3, r3, #3
 8005bc8:	f043 0302 	orr.w	r3, r3, #2
 8005bcc:	81a3      	strh	r3, [r4, #12]
 8005bce:	e7e2      	b.n	8005b96 <__smakebuf_r+0xc>
 8005bd0:	89a3      	ldrh	r3, [r4, #12]
 8005bd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bda:	81a3      	strh	r3, [r4, #12]
 8005bdc:	9b01      	ldr	r3, [sp, #4]
 8005bde:	6020      	str	r0, [r4, #0]
 8005be0:	b15b      	cbz	r3, 8005bfa <__smakebuf_r+0x70>
 8005be2:	4630      	mov	r0, r6
 8005be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005be8:	f000 f81e 	bl	8005c28 <_isatty_r>
 8005bec:	b128      	cbz	r0, 8005bfa <__smakebuf_r+0x70>
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	f023 0303 	bic.w	r3, r3, #3
 8005bf4:	f043 0301 	orr.w	r3, r3, #1
 8005bf8:	81a3      	strh	r3, [r4, #12]
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	431d      	orrs	r5, r3
 8005bfe:	81a5      	strh	r5, [r4, #12]
 8005c00:	e7cf      	b.n	8005ba2 <__smakebuf_r+0x18>
	...

08005c04 <_fstat_r>:
 8005c04:	b538      	push	{r3, r4, r5, lr}
 8005c06:	2300      	movs	r3, #0
 8005c08:	4d06      	ldr	r5, [pc, #24]	@ (8005c24 <_fstat_r+0x20>)
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	4608      	mov	r0, r1
 8005c0e:	4611      	mov	r1, r2
 8005c10:	602b      	str	r3, [r5, #0]
 8005c12:	f7fb fd6d 	bl	80016f0 <_fstat>
 8005c16:	1c43      	adds	r3, r0, #1
 8005c18:	d102      	bne.n	8005c20 <_fstat_r+0x1c>
 8005c1a:	682b      	ldr	r3, [r5, #0]
 8005c1c:	b103      	cbz	r3, 8005c20 <_fstat_r+0x1c>
 8005c1e:	6023      	str	r3, [r4, #0]
 8005c20:	bd38      	pop	{r3, r4, r5, pc}
 8005c22:	bf00      	nop
 8005c24:	200003d8 	.word	0x200003d8

08005c28 <_isatty_r>:
 8005c28:	b538      	push	{r3, r4, r5, lr}
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	4d05      	ldr	r5, [pc, #20]	@ (8005c44 <_isatty_r+0x1c>)
 8005c2e:	4604      	mov	r4, r0
 8005c30:	4608      	mov	r0, r1
 8005c32:	602b      	str	r3, [r5, #0]
 8005c34:	f7fb fd6b 	bl	800170e <_isatty>
 8005c38:	1c43      	adds	r3, r0, #1
 8005c3a:	d102      	bne.n	8005c42 <_isatty_r+0x1a>
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	b103      	cbz	r3, 8005c42 <_isatty_r+0x1a>
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	bd38      	pop	{r3, r4, r5, pc}
 8005c44:	200003d8 	.word	0x200003d8

08005c48 <_init>:
 8005c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4a:	bf00      	nop
 8005c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c4e:	bc08      	pop	{r3}
 8005c50:	469e      	mov	lr, r3
 8005c52:	4770      	bx	lr

08005c54 <_fini>:
 8005c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c56:	bf00      	nop
 8005c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5a:	bc08      	pop	{r3}
 8005c5c:	469e      	mov	lr, r3
 8005c5e:	4770      	bx	lr
